{"version":3,"file":"static/js/app.5128823e.js","mappings":"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","sources":["webpack://juejin/./src/App.vue","webpack://juejin/./src/components/Nav.vue","webpack://juejin/src/components/Nav.vue","webpack://juejin/./src/components/Nav.vue?574c","webpack://juejin/./src/components/Nav.vue?9e7a","webpack://juejin/src/App.vue","webpack://juejin/./src/App.vue?14ae","webpack://juejin/./src/App.vue?0e40","webpack://juejin/./src/views/Home.vue","webpack://juejin/./src/components/Adivertising.vue","webpack://juejin/src/components/Adivertising.vue","webpack://juejin/./src/components/Adivertising.vue?25cf","webpack://juejin/./src/components/Adivertising.vue?73fe","webpack://juejin/./src/components/Header.vue","webpack://juejin/src/components/Header.vue","webpack://juejin/./src/components/Header.vue?7863","webpack://juejin/./src/components/Header.vue?03e2","webpack://juejin/src/views/Home.vue","webpack://juejin/./src/views/Home.vue?f01c","webpack://juejin/./src/views/Home.vue?8611","webpack://juejin/./src/router/index.js","webpack://juejin/./src/store/index.js","webpack://juejin/./src/main.js","webpack://juejin/./src/views/ sync","webpack://juejin/webpack/bootstrap","webpack://juejin/webpack/runtime/chunk loaded","webpack://juejin/webpack/runtime/compat get default export","webpack://juejin/webpack/runtime/define property getters","webpack://juejin/webpack/runtime/ensure chunk","webpack://juejin/webpack/runtime/get javascript chunk filename","webpack://juejin/webpack/runtime/get mini-css chunk filename","webpack://juejin/webpack/runtime/global","webpack://juejin/webpack/runtime/hasOwnProperty shorthand","webpack://juejin/webpack/runtime/load script","webpack://juejin/webpack/runtime/make namespace object","webpack://juejin/webpack/runtime/publicPath","webpack://juejin/webpack/runtime/css loading","webpack://juejin/webpack/runtime/jsonp chunk loading","webpack://juejin/webpack/startup"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{attrs:{\"id\":\"app\"}},[_c('Nav'),_c('router-view')],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('nav',[_c('div',{staticClass:\"container\"},[_c('img',{attrs:{\"src\":\"https://lf3-cdn-tos.bytescm.com/obj/static/xitu_juejin_web/e08da34488b114bd4c665ba2fa520a31.svg\"}}),_c('ul',[_c('li',{class:_vm.$route.path === '/home' ? 'active' : '',on:{\"click\":function($event){return _vm.$router.push('/home')}}},[_vm._v(\"首页\")]),_c('li',{class:_vm.$route.path === '/hot' ? 'active' : '',on:{\"click\":function($event){return _vm.$router.push('/hot')}}},[_vm._v(\"沸点\")]),_c('li',{class:_vm.$route.path === '/course' ? 'active' : '',on:{\"click\":function($event){return _vm.$router.push('/course')}}},[_vm._v(\"课程\")]),_c('li',{class:_vm.$route.path === '/show' ? 'active' : '',on:{\"click\":function($event){return _vm.$router.push('/show')}}},[_vm._v(\"直播\")]),_c('li',{class:_vm.$route.path === '/activity' ? 'active' : '',on:{\"click\":function($event){return _vm.$router.push('/activity')}}},[_vm._v(\"活动\")]),_vm._m(0),_vm._m(1),_vm._m(2)]),_vm._m(3),_vm._m(4),_vm._m(5),_c('img',{staticClass:\"bell\",attrs:{\"src\":require(\"../assets/image/bell.png\"),\"alt\":\"\"}}),_c('img',{staticClass:\"login\",attrs:{\"src\":require(\"../assets/image/login.png\"),\"alt\":\"\"}})])])\n}\nvar staticRenderFns = [function (){var _vm=this,_c=_vm._self._c;return _c('li',[_c('a',{attrs:{\"href\":\"https://detail.youzan.com/show/goods/newest?kdt_id=104340304\"}},[_vm._v(\"商城\")])])\n},function (){var _vm=this,_c=_vm._self._c;return _c('li',[_c('a',{attrs:{\"href\":\"https://juejin.cn/app?utm_source=jj_nav\"}},[_vm._v(\"APP\")])])\n},function (){var _vm=this,_c=_vm._self._c;return _c('li',[_c('a',{attrs:{\"href\":\"https://juejin.cn/extension?utm_source=jj_nav\"}},[_vm._v(\"插件\")])])\n},function (){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"search\"},[_c('input',{attrs:{\"type\":\"text\",\"placeholder\":\"探索稀土掘金\"}}),_c('div',{staticClass:\"search_image\"},[_c('img',{attrs:{\"src\":\"https://lf3-cdn-tos.bytescm.com/obj/static/xitu_juejin_web/1e8ab9a22f0ddc36349f60b38900d0bd.svg\"}})])])\n},function (){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"creator\"},[_c('button',[_vm._v(\"创作者中心\")]),_c('div',{staticClass:\"content\"})])\n},function (){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"vip\"},[_c('img',{attrs:{\"src\":\"https://lf3-cdn-tos.bytescm.com/obj/static/xitu_juejin_web/24127194d5b158d7eaf8f09a256c5d01.svg\",\"alt\":\"\"}}),_c('span',[_vm._v(\"会员\")])])\n}]\n\nexport { render, staticRenderFns }","<template>\r\n  <nav>\r\n    <div class=\"container\">\r\n      <img src=\"https://lf3-cdn-tos.bytescm.com/obj/static/xitu_juejin_web/e08da34488b114bd4c665ba2fa520a31.svg\" />\r\n      <ul>\r\n        <li @click=\"$router.push('/home')\" :class=\"$route.path === '/home' ? 'active' : ''\">首页</li>\r\n        <li @click=\"$router.push('/hot')\" :class=\"$route.path === '/hot' ? 'active' : ''\">沸点</li>\r\n        <li @click=\"$router.push('/course')\" :class=\"$route.path === '/course' ? 'active' : ''\">课程</li>\r\n        <li @click=\"$router.push('/show')\" :class=\"$route.path === '/show' ? 'active' : ''\">直播</li>\r\n        <li @click=\"$router.push('/activity')\" :class=\"$route.path === '/activity' ? 'active' : ''\">活动</li>\r\n        <li><a href=\"https://detail.youzan.com/show/goods/newest?kdt_id=104340304\">商城</a></li>\r\n        <li><a href=\"https://juejin.cn/app?utm_source=jj_nav\">APP</a></li>\r\n        <li><a href=\"https://juejin.cn/extension?utm_source=jj_nav\">插件</a></li>\r\n      </ul>\r\n      <div class=\"search\">\r\n        <input type=\"text\" placeholder=\"探索稀土掘金\" />\r\n        <div class=\"search_image\"><img src=\"https://lf3-cdn-tos.bytescm.com/obj/static/xitu_juejin_web/1e8ab9a22f0ddc36349f60b38900d0bd.svg\" /></div>\r\n      </div>\r\n      <div class=\"creator\">\r\n        <button>创作者中心</button>\r\n        <div class=\"content\"></div>\r\n      </div>\r\n      <div class=\"vip\">\r\n        <img src=\"https://lf3-cdn-tos.bytescm.com/obj/static/xitu_juejin_web/24127194d5b158d7eaf8f09a256c5d01.svg\" alt=\"\" />\r\n        <span>会员</span>\r\n      </div>\r\n      <img class=\"bell\" src=\"../assets/image/bell.png\" alt=\"\" />\r\n      <img class=\"login\" src=\"../assets/image/login.png\" alt=\"\" />\r\n    </div>\r\n  </nav>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  methods: {\r\n    jumpFn() {\r\n      this.$router.push()\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n@import '../total.less';\r\nnav {\r\n  border-bottom: 1px solid #f1f1f1;\r\n  .container {\r\n    width: 1440px;\r\n    height: 60px;\r\n    margin: auto;\r\n    display: flex;\r\n    align-items: center;\r\n    img {\r\n      cursor: pointer;\r\n      width: 107px;\r\n      height: 22px;\r\n      margin-left: 15px;\r\n      margin-right: 12px;\r\n    }\r\n    ul {\r\n      cursor: pointer;\r\n      width: 420px;\r\n      display: flex;\r\n      justify-content: space-around;\r\n      align-items: center;\r\n      color: #494848;\r\n      font-size: 14px;\r\n      margin-top: 1px;\r\n      margin-right: 150px;\r\n      li {\r\n        height: 60px;\r\n        border: 2px solid transparent;\r\n        line-height: 60px;\r\n        &.active {\r\n          color: #1e80ff;\r\n        }\r\n        a {\r\n          text-decoration: none;\r\n          color: #494848;\r\n        }\r\n        a:hover {\r\n          color: rgb(40, 40, 40);\r\n        }\r\n      }\r\n      li:nth-child(-n + 5):hover {\r\n        color: rgb(40, 40, 40);\r\n        border-bottom: 2px solid #1e80ff;\r\n      }\r\n    }\r\n    .search {\r\n      width: 360px;\r\n      height: 35.3px;\r\n      border: 1px solid #c2c8d1;\r\n      display: flex;\r\n      align-items: center;\r\n      margin-right: 25px;\r\n      input {\r\n        height: 35.3px;\r\n        width: 315px;\r\n        border: 0;\r\n        padding: 0;\r\n        outline: none;\r\n        padding-left: 10px;\r\n      }\r\n      .search_image {\r\n        cursor: pointer;\r\n        height: 30px;\r\n        width: 44px;\r\n        background-color: rgb(238, 238, 238);\r\n        border-radius: 10%;\r\n        img {\r\n          height: 17px;\r\n          width: 17px;\r\n          padding: 0;\r\n          padding-left: 13px;\r\n          padding-top: 6px;\r\n          margin: 0;\r\n        }\r\n      }\r\n    }\r\n    .creator {\r\n      width: 115px;\r\n      height: 36px;\r\n      background-color: #1e80ff;\r\n      border-radius: 8%;\r\n      flex-shrink: 0;\r\n      cursor: pointer;\r\n      button {\r\n        height: 36px;\r\n        width: 100px;\r\n        color: white;\r\n        background-color: #1e80ff;\r\n        border: 0;\r\n        border-right: 1px solid rgb(154, 154, 255);\r\n        border-radius: 8%;\r\n      }\r\n      .content {\r\n        width: 0px;\r\n        height: 0px;\r\n        border: 6px;\r\n        border-style: solid;\r\n        border-color: white transparent transparent;\r\n        display: inline-block;\r\n        position: relative;\r\n        top: 3px;\r\n      }\r\n    }\r\n    .vip {\r\n      cursor: pointer;\r\n      color: gray;\r\n      font-size: 13px;\r\n      img {\r\n        width: 30px;\r\n        margin-right: 0;\r\n        margin-left: 20px;\r\n      }\r\n      span {\r\n        width: 30px;\r\n        position: relative;\r\n        bottom: 5px;\r\n      }\r\n    }\r\n    .bell {\r\n      height: 24px;\r\n      width: 20px;\r\n    }\r\n    .login {\r\n      height: 40px;\r\n      width: 70px;\r\n    }\r\n  }\r\n}\r\n</style>\r\n","import mod from \"-!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[0]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Nav.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[0]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Nav.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Nav.vue?vue&type=template&id=169e6f1c&scoped=true&\"\nimport script from \"./Nav.vue?vue&type=script&lang=js&\"\nexport * from \"./Nav.vue?vue&type=script&lang=js&\"\nimport style0 from \"./Nav.vue?vue&type=style&index=0&id=169e6f1c&prod&lang=less&scoped=true&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"169e6f1c\",\n  null\n  \n)\n\nexport default component.exports","<template>\n  <div id=\"app\">\n    <Nav></Nav>\n    <router-view />\n  </div>\n</template>\n\n<script>\nimport Nav from './components/Nav.vue'\nexport default {\n  name: 'App',\n  components: {\n    Nav\n  }\n}\n</script>\n\n<style lang=\"less\" scoped></style>\n","import mod from \"-!../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[0]!../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[0]!../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./App.vue?vue&type=template&id=37503615&scoped=true&\"\nimport script from \"./App.vue?vue&type=script&lang=js&\"\nexport * from \"./App.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"37503615\",\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"total\"},[_c('Header'),_c('div',{staticClass:\"article\"},[_vm._m(0),_c('div',{staticClass:\"container-left-middle\"},_vm._l((this.ArticleData),function(item){return _c('div',{key:item.id,staticClass:\"container-left-middle-1\"},[_c('ul',[_c('li',[_vm._v(_vm._s(item.name))]),_c('li',[_vm._v(\"|\")]),_c('li',[_vm._v(_vm._s(item.day)+\"天前\")]),_c('li',[_vm._v(\"|\")]),_c('li',[_vm._v(_vm._s(item.category))])]),_c('div',{staticClass:\"div1\"},[_c('br'),_c('span',[_c('h3',{on:{\"click\":function($event){return _vm.goToArticle(item.id)}}},[_vm._v(_vm._s(item.title))])]),_c('div',{staticClass:\"span\"},[_c('span',[_vm._v(_vm._s(item.intro))])]),_c('div'),_c('img',{staticClass:\"img1\",attrs:{\"src\":item.imgsrc}})])])}),0)]),_c('img',{staticClass:\"advs\",attrs:{\"src\":require(\"../assets/image/advs.png\"),\"alt\":\"\"}}),_c('img',{staticClass:\"advs2\",attrs:{\"src\":require(\"../assets/image/advs2.png\"),\"alt\":\"\"}})],1)\n}\nvar staticRenderFns = [function (){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"recom\"},[_c('ul',[_c('li',{staticClass:\"active\"},[_vm._v(\"推荐\")]),_c('li',[_vm._v(\"最新\")]),_c('li',[_vm._v(\"热榜\")])])])\n}]\n\nexport { render, staticRenderFns }","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',[_vm._v(\"广告\")])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n  <div>广告</div>\r\n</template>\r\n\r\n<script>\r\nexport default {}\r\n</script>\r\n\r\n<style></style>\r\n","import mod from \"-!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[0]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Adivertising.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[0]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Adivertising.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Adivertising.vue?vue&type=template&id=17d1fc43&\"\nimport script from \"./Adivertising.vue?vue&type=script&lang=js&\"\nexport * from \"./Adivertising.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c;return _vm._m(0)\n}\nvar staticRenderFns = [function (){var _vm=this,_c=_vm._self._c;return _c('div',[_c('header',[_c('ul',[_c('li',{staticClass:\"active\"},[_vm._v(\"综合\")]),_c('li',[_vm._v(\"后端\")]),_c('li',[_vm._v(\"前端\")]),_c('li',[_vm._v(\"Android\")]),_c('li',[_vm._v(\"ios\")]),_c('li',[_vm._v(\"人工智能\")]),_c('li',[_vm._v(\"开发工具\")]),_c('li',[_vm._v(\"代码人生\")]),_c('li',[_vm._v(\"阅读\")])])])])\n}]\n\nexport { render, staticRenderFns }","<template>\r\n  <div>\r\n    <header>\r\n      <ul>\r\n        <li class=\"active\">综合</li>\r\n        <li>后端</li>\r\n        <li>前端</li>\r\n        <li>Android</li>\r\n        <li>ios</li>\r\n        <li>人工智能</li>\r\n        <li>开发工具</li>\r\n        <li>代码人生</li>\r\n        <li>阅读</li>\r\n      </ul>\r\n    </header>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {}\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\nheader {\r\n  background-color: #fff;\r\n  border-bottom: 1px solid #f1f1f1;\r\n  width: 100%;\r\n  height: 46px;\r\n  ul {\r\n    font-size: 14px;\r\n    display: flex;\r\n    align-items: center;\r\n    line-height: 46px;\r\n    color: gray;\r\n    li:nth-child(1) {\r\n      margin-left: 370px;\r\n    }\r\n    li {\r\n      margin-right: 25px;\r\n      cursor: pointer;\r\n      &.active {\r\n        color: #1e80ff;\r\n      }\r\n    }\r\n    li:hover {\r\n      color: #1e80ff;\r\n    }\r\n  }\r\n}\r\n</style>\r\n","import mod from \"-!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[0]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Header.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[0]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Header.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Header.vue?vue&type=template&id=5f887d58&scoped=true&\"\nimport script from \"./Header.vue?vue&type=script&lang=js&\"\nexport * from \"./Header.vue?vue&type=script&lang=js&\"\nimport style0 from \"./Header.vue?vue&type=style&index=0&id=5f887d58&prod&lang=less&scoped=true&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"5f887d58\",\n  null\n  \n)\n\nexport default component.exports","<template>\n  <div class=\"total\">\n    <Header></Header>\n    <div class=\"article\">\n      <div class=\"recom\">\n        <ul>\n          <li class=\"active\">推荐</li>\n          <li>最新</li>\n          <li>热榜</li>\n        </ul>\n      </div>\n      <div class=\"container-left-middle\">\n        <div class=\"container-left-middle-1\" v-for=\"item in this.ArticleData\" :key=\"item.id\">\n          <ul>\n            <li>{{ item.name }}</li>\n            <li>|</li>\n            <li>{{ item.day }}天前</li>\n            <li>|</li>\n            <li>{{ item.category }}</li>\n          </ul>\n          <div class=\"div1\">\n            <br />\n            <span\n              ><h3 @click=\"goToArticle(item.id)\">{{ item.title }}</h3></span\n            >\n            <div class=\"span\">\n              <span>{{ item.intro }}</span>\n            </div>\n            <div></div>\n            <img class=\"img1\" :src=\"item.imgsrc\" />\n          </div>\n        </div>\n      </div>\n    </div>\n    <img class=\"advs\" src=\"../assets/image/advs.png\" alt=\"\" />\n    <img class=\"advs2\" src=\"../assets/image/advs2.png\" alt=\"\" />\n  </div>\n</template>\n\n<script>\nimport Adivertising from '../components/Adivertising.vue'\nimport Header from '../components/Header.vue'\nlet obj = {}\nlet objKey = 0\nexport default {\n  name: 'home',\n  data() {\n    return {\n      ArticleData: {}\n    }\n  },\n  components: {\n    Adivertising,\n    Header\n  },\n  methods: {\n    ImgSrc(ImgSrc) {\n      return require(ImgSrc)\n    },\n    scrollFn() {\n      let windowHeight = window.innerHeight || document.documentElement.clientHeight\n      let st = window.pageYOffset || document.documentElement.scrollTop\n      let scrollHeight = document.documentElement.scrollHeight\n      if (objKey === Object.keys(obj).length - 1) {\n        return\n      }\n      if (windowHeight + st >= scrollHeight) {\n        objKey++\n        this.ArticleData = this.ArticleData.concat(obj[objKey])\n      }\n    },\n\n    goToArticle(id) {\n      id = id - 1\n      this.$router.push({ path: '/article/' + id })\n    }\n  },\n  mounted() {\n    window.addEventListener('scroll', this.scrollFn)\n    if (this.$store.state.database.length <= 15) {\n      this.ArticleData = this.$store.state.database\n    } else {\n      for (let i = 0; i < this.$store.state.database.length / 15; i++) {\n        obj[i] = this.$store.state.database.slice(15 * i, 15 * (i + 1))\n      }\n      this.ArticleData = obj[0]\n    }\n  },\n  beforeDestroy() {\n    window.removeEventListener('scroll', this.scrollFn)\n  }\n}\n</script>\n<style lang=\"less\" scoped>\n@import '../total.less';\n.total {\n  background-color: rgb(246, 246, 246);\n  .article {\n    width: 700px;\n    background-color: #fff;\n    margin-left: 370px;\n    margin-top: 10px;\n    .recom {\n      height: 46px;\n      color: grey;\n      font-size: 14px;\n      line-height: 46px;\n      border-bottom: 1px solid #f1f1f1;\n      ul {\n        display: flex;\n        align-items: center;\n        li:nth-child(1) {\n          margin-left: 25px;\n        }\n        li {\n          width: 55px;\n          cursor: pointer;\n          &.active {\n            color: #1e80ff;\n          }\n        }\n        li:hover {\n          color: #1e80ff;\n        }\n      }\n    }\n    .container-left-middle-1 {\n      cursor: pointer;\n      margin-left: 10px;\n      ul {\n        display: flex;\n        li {\n          margin-top: 15px;\n          font-size: 13px;\n          margin-right: 10px;\n        }\n        li:nth-child(1) {\n          color: rgb(80, 80, 80);\n          border-right: 1px solid #ccc;\n        }\n        li:nth-of-type(n + 2) {\n          color: grey;\n        }\n      }\n      .shu {\n        margin-left: 5px;\n      }\n\n      .img1 {\n        float: right;\n        width: 120px;\n        margin-right: 20px;\n        height: 80px;\n        margin-top: -100px;\n      }\n\n      h3 {\n        font-size: 16px;\n        padding-bottom: 20px;\n        margin-top: 8px;\n        font-weight: bold;\n        color: black;\n      }\n\n      .span {\n        padding-bottom: 20px;\n        font-size: 15px;\n        width: 550px;\n        border-bottom: 1px solid gainsboro;\n        font-family: Arial, Helvetica, sans-serif;\n        color: #86909c;\n      }\n    }\n  }\n  .advs,\n  .advs2 {\n    cursor: pointer;\n    width: 240px;\n    position: absolute;\n    left: 1087px;\n    &.advs {\n      top: 115px;\n    }\n    &.advs2 {\n      top: 740px;\n    }\n  }\n}\n</style>\n","import mod from \"-!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[0]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Home.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[0]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Home.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Home.vue?vue&type=template&id=34eedcbe&scoped=true&\"\nimport script from \"./Home.vue?vue&type=script&lang=js&\"\nexport * from \"./Home.vue?vue&type=script&lang=js&\"\nimport style0 from \"./Home.vue?vue&type=style&index=0&id=34eedcbe&prod&lang=less&scoped=true&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"34eedcbe\",\n  null\n  \n)\n\nexport default component.exports","import Vue from 'vue'\nimport VueRouter from 'vue-router'\nimport Home from '../views/Home.vue'\n\nVue.use(VueRouter)\n\nconst routes = [\n  {\n    path: '/',\n    redirect:'/home'\n  },\n  {\n    path: '/home',\n    name: 'Home',\n    component: Home\n  },\n  {\n    path: '/activity',\n    name: 'Activity',\n    component: () => import(/* webpackChunkName: \"activity\" */ '../views/Activity.vue')\n  },\n  {\n    path: '/course',\n    name: 'Course',\n    component: () => import(/* webpackChunkName: \"course\" */ '../views/Course.vue')\n  },\n  {\n    path: '/hot',\n    name: 'Hot',\n    component: () => import(/* webpackChunkName: \"hot\" */ '../views/Hot.vue')\n  },\n  {\n    path: '/show',\n    name: 'Show',\n    component: () => import(/* webpackChunkName: \"show\" */ '../views/Show.vue')\n  },\n  {\n    path: '/article/:id',\n    name: 'Article',\n    component: () => import(/* webpackChunkName: \"article\" */ '../views/Article.vue')\n  }\n]\n\nconst router = new VueRouter({\n  // mode: 'history',\n  base: process.env.BASE_URL,\n  routes,\n  scrollBehavior(to, from, savedPosition) {\n    return {\n      x: 0,\n      y: 0\n    }\n  },\n})\n\nexport default router\n","import Vue from 'vue'\nimport Vuex from 'vuex'\n\nVue.use(Vuex)\n\nexport default new Vuex.Store({\n  state: {\n    database: [\n      {\n        id: 1,\n        name: 'ZEROL',\n        day: '22',\n        category: 'JavaScript',\n        title: 'setTimeout 和 setInterval，你们两位同学注意点时间~ ',\n        intro: '你们两位同学注意点时间~',\n        imgsrc: require('../assets/image/ArticleImg2.webp'),\n        content:\n        '## 一、基本定义与用法 \\n### 1、定义\\n-   `setTimeout()`方法用于在指定的时间（单位毫秒）后执行回调函数或指定的一段代码\\n-   `setInterval()`方法可按照指定的时间间隔（单位毫秒）来调用回调函数或指定的一段代码\\n### 2、参数\\n-   第一个参数 function，必填，回调函数。或者是一段字符串代码，但是这种方式不建议使用，就和使用`eval()`一样，有安全风险；而且还有作用域问题（字符串会在全局作用域内被解释执行）\\n```\\nsetTimeout(\\'console.log(123);fn()\\', 2000)\\n```\\n-   第二个参数 delay，可选，单位是 ms，对于`setTimeout`是延迟时间，对于`setInterval`是间隔时间，默认都是 0\\n-   第三个参数 param1,param2,param3...，可选，是传递给回调函数的参数，不大常用\\n ```\\nsetTimeout(function (a, b) {\\nconsole.log(a, b)\\n}, 2000, \\'我是\\', \\'定时器\\')\\n```\\n### 3、返回值\\n-   返回一个 ID（数字），可以将这个 ID 传递给`clearTimeout()`或`clearInterval()`来取消执行\\n-   PS: `setTimeout()`和`setInterval()`共用一个编号池，技术上，`clearTimeout()`和`clearInterval()`可以互换使用，但是为了避免混淆，一般不这么做\\n## 二、setTimeout 和 setInterval 的实际表现\\n### 1、使用 setInterval 实现计时\\n```\\nconst startTime = new Date().getTime()\\nlet count = 0\\nconst interval = setInterval(function () {\\ncount++\\nconsole.log(new Date().getTime() - (startTime + count * 1000) + \\'ms\\')\\nif(count === 10){\\nclearInterval(interval);\\n}\\n}, 1000)\\n```\\n`new Date().getTime() - (startTime + count * 1000)`理想情况下应该是 0ms，然而事实并不是这样，而是存在着误差：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ba8397cf6a184ed6a32b285693cff3c0~tplv-k3u1fbpfcp-zoom-1.image)\\n### 2、使用 setTimeout 实现计时\\n```\\nconst startTime = new Date().getTime(), delay = 1000\\nlet count = 0\\nlet timer = setTimeout(doFunc, delay)\\nfunction doFunc(){\\ncount++\\nconsole.log(new Date().getTime() - (startTime + count * 1000) + \\'ms\\')\\nif(count < 10){\\ntimer = setTimeout(doFunc, delay)\\n}\\n}\\n```\\nsetTimeout 也同样存在着误差，而且时间越来越大（setTimeout 需要在同步代码执行完成后才重新开始计时）：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c59850b3ac2a475eb718b5492630d88e~tplv-k3u1fbpfcp-zoom-1.image)\\n## 三、为什么会出现误差\\n### 1、setTimeout 的最短延迟时间\\n`setTimeout`遵循的规范由 whatwg 来维护，在 [HTML Standard - 8.6 Timers](https://link.juejin.cn?target=https%3A%2F%2Fhtml.spec.whatwg.org%2Fmultipage%2Ftimers-and-user-prompts.html%23dom-settimeout \"https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-settimeout\") 中写到了定义定时器的详细步骤，其中有两条：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ffbfbab446fe494fb44c54181f48aa31~tplv-k3u1fbpfcp-zoom-1.image)\\n上面的意思就是说，如果设置的 timeout 小于 0，则设置为 0，如果嵌套的层级超过了 5 层（计时器嵌套），并且 timeout 小于 4ms，则设置 timeout 为 4ms。并且，在不同浏览器中出现这种最小延迟的情况有所不同\\n具体的源代码实现以及各大浏览器实现的不同，大家可以参考这篇文章：[为什么 setTimeout 有最小延时 4ms ？](https://link.juejin.cn?target=https%3A%2F%2Fwww.bruceyj.com%2Ffront-end-interview-summary%2Fsystem-design%2Fwhy-is-the-design%2F2-why-setTimeout-4ms.html \"https://www.bruceyj.com/front-end-interview-summary/system-design/why-is-the-design/2-why-setTimeout-4ms.html\")\\n这里只看结论，定时器本身的定义步骤是造成其出现误差的原因之一\\n### 2、setInterval 的最小间隔时间\\n在 HTML5 标准中，setInterval 的最小间隔为 10ms，虽然我在规范文档中并未找到其相关说明，但是经过实际测试，也确实存在最小间隔时间，例如以下代码：\\n```\\nlet startTime = new Date().getTime()\\nlet count = 0\\nconst interval = setInterval(function () {\\ncount++\\n console.log(new Date().getTime() - startTime + \\'ms\\')\\nstartTime = new Date().getTime()\\nif(count === 10) {\\nclearInterval(interval)\\n}\\n}, 0)\\n```\\n测试结果：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9bcffa807d384a7ab542fd1174186b12~tplv-k3u1fbpfcp-zoom-1.image)\\n虽然没有 10ms 那么大的间隔，但是间隔仍然存在，猜测具体的间隔时间是和浏览器实现以及设备性能有关，无论如何，间隔是确实存在的\\n另外，当使用 setInterval 时间间隔到点后，仅当队列中没有该定时器的任何其他代码实例时，才会将定时器的代码添加到队列中，如果有的话，则不会添加，造成堵塞，这个也与 JS 的事件循环有关\\n 未被激活的tabs的定时最小延迟 >= 1000ms\\n为了优化后台 tab 的加载损耗（以及降低耗电量），在未被激活的 tab 中定时器的最小延时限制为1s(1000ms)，具体时间在不同的浏览器实现中也有差别\\n  JS 的事件循环机制\\n`setTimeout`和`setInterval`中的时间并不是到点就立即执行，而是到点将其回调函数加入异步事件队列中，按照队列先进先出的性质，该回调函数到点之后是否能执行还得取决于是否属于队列首位，如果前头还有其他事件在等待，则不能按点执行，如果没有，则将其放入同步队列执行。具体事件循环机制，可以参考这篇文章：[动图学习-EventLoop](https://juejin.cn/post/6969028296893792286 \"https://juejin.cn/post/6969028296893792286\")\\n## 四、解决方案\\n1、在浏览器中实现一个 0ms 延时的定时器\\n可以参考如下代码（来自于国外的一篇博客，也是 MDN 推荐的方法），主要是使用了 postMessage 方法，异步的执行了回调函数，并且速度要比 setTimeout(0) 要快的多。具体比较可以参照原文：[setTimeout with a shorter delay](https://link.juejin.cn?target=https%3A%2F%2Fdbaron.org%2Flog%2F20100309-faster-timeouts \"https://dbaron.org/log/20100309-faster-timeouts\")\\n使用 setTimeout(0) 得到的时间：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8994a7da32e549cd9d06c34d1ac0bbc8~tplv-k3u1fbpfcp-zoom-1.image)\\n将 setTimeout 改成 setZeroTimeout 后得到的时间，时间几乎都在 0～1，至于为什么不是绝对的 0，猜测可能与性能有关，总的来说，时间确实缩短了：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dced5471b7fc422d9f9eb28259b26ce2~tplv-k3u1fbpfcp-zoom-1.image)\\n购物网站的秒杀活动\\n一般情况下，从服务器拿到倒数时间后，前端的执行倒计时程序持续运行，事实上，显示时间相比实际时间会越来越慢的\\n究其原因，倒计时通常是使用定时器实现，而 JS 的单线程特性使得同步任务执行过程中出现阻塞时，任务队列中的异步任务并不能及时执行，因此浏览器并不能保证在定时器设置的时间结束后代码总是被准时执行，从而造成了倒计时的偏差\\n一般的解决方法是前端定时向服务器发送请求获取最新的时间差来校准倒计时时间，和用户一直按 F5 刷新没啥区别，比较简单粗暴，下面的方法可以一定程度上解决这个问题，纯前端控制，不依赖于后端。源地址已忘\\n 五、使用 setTimeout 替代 setInterval\\n定时器指定的时间间隔，表示的是何时将定时器的代码添加到消息队列，而不是何时执行代码。所以真正何时执行代码的时间是不能保证的，它取决于何时被主线程的事件循环获取到，并执行\\n假设有 `setInterval(function, 100)`，它的执行可能是这样的：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/30346ef998214cabb6c95141b19ad25f~tplv-k3u1fbpfcp-zoom-1.image)\\n上图可见，setInterval 每隔 100ms 往队列中添加一个事件；100ms 后，添加 T1 定时器代码至队列中，主线程中还有任务在执行，所以等待，some event 执行结束后执行 T1 定时器代码；又过了100ms，T2定时器被添加到队列中，主线程还在执行 T1 代码，所以等待；又过了 100ms，理论上又要往队列里推一个定时器代码，但由于此时 T2 还在队列中，所以 T3 不会被添加，结果就是此时被跳过；然后，T1 定时器执行结束后马上执行了 T2 代码，所以并没有达到定时器间隔的效果\\n综上所述，serInterval 有两个问题：\\n-   可能多个定时器会连续执行（会导致后续的间隔误差）\\n-   某些间隔会被跳过（这么设计也可能是为了尽量避免第一个问题）\\n因而一般会使用 setTimeout 模拟 setInterval，来规避掉上面的缺点\\n```\\nsetTimeout(function fn() {\\n// do something\\nsetTimeout(fn, delay)\\n}, delay)\\n```\\n这样的话，在前一个定时器代码执行完成前，不会向队列中插入新的定时器（不会连续执行），而且保证了定时器间隔\\n注：有些说法，可能对当队列中存在定时器实例时，是否会跳过添加实例，存在质疑；还有的说法是，在 Node 环境中会跳过，在浏览器环境中会累加；不过我这边实测，不管在 Node 还是在 web 中，当队列中存在定时器实例时，都会跳过添加的；当然也有可能是浏览器版本或内核不同，表现不同，没有细测；感兴趣的小伙伴可以使用一下代码实测下，看是会一次性输出，还是会间隔性输出\\n**这边顺便一提，涉及到做动画的场景可能会使用定时器**\\n-   由于定时器的种种误差问题，以及固定时间间隔不一定与屏幕刷新时间相同，可能会引起丢帧；而且定时器在后台仍会继续执行，也会造成资源的浪费\\n-   一般情况下，还是推荐使用 requestAnimationFrame，RAF 重绘或回流（重排）的时间间隔是紧紧跟随浏览器的刷新频率的；并且在页面未激活时，该页面的屏幕刷新任务也会被暂停，当页面被激活时，任务会从上次停留的地方继续执行，这也就意味着将耗费更少的资源，提升了性能\\n### 总结\\n-   setTimeout 和 setInterval 都存在计时误差，不会严格按照既定时间执行\\n-   一般情况下，这些误差不会造成太大影响，只对于某些特殊场景，对时间要求比较严格的情况下，需要特殊处理\\n-   对于 setInterval，个人建议能不用尽量不用，使用 setTimeout 的嵌套实现，可以规避掉一些潜在问题的发生\\n'\n      },\n      {\n        id: 2,\n        name: '望舟',\n        day: '1',\n        category: '面试',\n        title: '让“作用域和闭包”说人话！ ',\n        intro: '让作用域和闭包说人话，面试时候有话可讲！',\n        imgsrc: require('../assets/image/ArticleImg1.webp'),\n        content:\n        '# 一、作用域是什么\\n作用域与编译原理息息相关，但是我们暂时还不用管编译原理的复杂过程，它的作用可以简单看下面这张图： \\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2dc72d14948848159ed01ab7af90a090~tplv-k3u1fbpfcp-zoom-1.image)\\n简单来说就是“我得知道这些变量在哪里，不然我怎么取到它们再进行下一步操作呀！”\\n***\\nJavaScript的编译发生代码执行前的几微妙内，并不是发生在构建之前。\\n引擎根据作用域进行变量查询，存在两种影响结果的查找方式——LHS/RHS。\\nRHS（谁是源头【获取变量的值】）：需要找到这个变量的值才可以进行下一步操作。如console.log(a)，即得到a的值后执行操作。查询操作失败报ReferenceError异常，不合理操作报TypeError异常。\\nLHS（目标是谁【对变量赋值】）：为操作找到一个容器，如var a = 2，即找到一个a，给它赋值为2。查询操作失败在非严格模式下会创建变量。*这个特性可以解释变量提升这个东西，也就是“赋值可以跑到声明前”。为了完成赋值这个动作，我可以自己声明一下嘛。现在可以暂时放一下这句话，等到提升时再想。*\\n> ~~不推荐使用with/eval~~\\n# 二、函数作用域和块作用域\\n> 函数作用域含义：属于这个函数的全部变量都可以在整个函数的范围内使用或复用。\\nfunction 开头的就是函数声明，其余则是函数表达式。 **正常函数声明被绑定在作用域中，函数表达式则绑定在函数自身中。** 这句话不理解可以先埋下一个伏笔，等下面看到闭包的时候再回头看会回味无穷。\\n```\\n// 函数声明\\nfunction foo(){\\nvar a = 2;\\nconsole.log(a);\\n}\\nfoo()\\n// 函数表达式\\n(function foo(){\\nvar a = 2;\\nconsole.log(a);\\n})()\\nvar a = 2;\\n(function IIFE(global){\\nvar a = 3;\\nconsole.log(a, global.a)// 3,2\\n})(window)\\n// 函数表达式\\nvar foo = function(){\\nconsole.log(1)\\n}\\n```\\n那么怎么搞出一个块作用域呢？块作用域的声明方式有：\\n1.  with 仅在with声明中有效\\n1.  try/catch catch内的变量仅在catch内使用\\n1.  let 劫持所在块的作用域\\n1.  const 与let类似，变量不可修改\\n块作用域的优势：1. 有利于垃圾回收（块作用域内代码执行后可以直接回收）；2. 解决 var 循环问题。\\n# 三、提升\\n> 没有赋值只有声明的变量是会报错 undefined，提升也只是提升了个声明而已；再换句话说，赋值可以跑在声明的前面。光说不干假把式~\\n第一段代码可以顺利执行，因为对于 a 的声明会提升到最顶部，因此在作用域内能够找到a。但是这第二段代码中，`var a = 2;`会被拆分为两步，第一步是声明 a ，然后就执行了输出语句，还没有进行赋值呢，因此会出现报错。 这个例子恰好说明了“赋值可以跑在声明前面”。\\n***\\n例二：\\n```\\nfoo()\\nfunction foo(){\\nconsole.log(a); //undefined\\nvar a;\\n}\\n```\\n这里也是和例一一样，a会提升声明（作用域在foo内），但是只有声明，没有赋值，所以仍然会报错。\\n***\\n同样是声明提升，***函数的优先级高于变量***。这里的例子我们可以把函数表达式当作是一个变量的声明，相当于给foo2 这个变量赋值了一个函数。那么由于函数的优先级更高，这个foo2无法覆盖之前的foo1，所以输出仍然是1。\\n# 四、闭包\\n## 1. 闭包是什么\\n首先我们得知道闭包是什么，来看看书里是怎么说的：\\n> 函数在 定义时的词法作用域以外的地方 被调用，闭包使得函数可以继续访问定义时的词法作用域。\\n这句话的形容使闭包看起来像一种_访问作用域的方法_。我们继续看下一句：\\n> 无论通过何种手段将内部函数传递到所在的词法作用域以外，它都会持有对原始定义作用域的引用，无论在何处执行这个函数都会使用闭包。\\n**因此，不应该把比较理解成一种现象或者原理，应该作为一种工具方便我们使用来解决 JavaScript 中的一些问题。这是一个重要的理解点。** 用自己的话再来说一下闭包是什么吧：\\n一个函数（A）引用着另一个函数的变量（B），即使 B 已经顺利执行结束了也不会被回收，因为 A 还引用着呢，所以 B 的各种变量也要被保存。\\n'\n      },\n      {\n        id: 3,\n        name: 'ZEROL',\n        day: '22',\n        category: 'JavaScript',\n        title: 'setTimeout 和 setInterval，你们两位同学注意点时间~ ',\n        intro: '你们两位同学注意点时间~',\n        imgsrc: require('../assets/image/ArticleImg2.webp'),\n        content:\n        '## 一、基本定义与用法 \\n### 1、定义\\n-   `setTimeout()`方法用于在指定的时间（单位毫秒）后执行回调函数或指定的一段代码\\n-   `setInterval()`方法可按照指定的时间间隔（单位毫秒）来调用回调函数或指定的一段代码\\n### 2、参数\\n-   第一个参数 function，必填，回调函数。或者是一段字符串代码，但是这种方式不建议使用，就和使用`eval()`一样，有安全风险；而且还有作用域问题（字符串会在全局作用域内被解释执行）\\n```\\nsetTimeout(\\'console.log(123);fn()\\', 2000)\\n```\\n-   第二个参数 delay，可选，单位是 ms，对于`setTimeout`是延迟时间，对于`setInterval`是间隔时间，默认都是 0\\n-   第三个参数 param1,param2,param3...，可选，是传递给回调函数的参数，不大常用\\n ```\\nsetTimeout(function (a, b) {\\nconsole.log(a, b)\\n}, 2000, \\'我是\\', \\'定时器\\')\\n```\\n### 3、返回值\\n-   返回一个 ID（数字），可以将这个 ID 传递给`clearTimeout()`或`clearInterval()`来取消执行\\n-   PS: `setTimeout()`和`setInterval()`共用一个编号池，技术上，`clearTimeout()`和`clearInterval()`可以互换使用，但是为了避免混淆，一般不这么做\\n## 二、setTimeout 和 setInterval 的实际表现\\n### 1、使用 setInterval 实现计时\\n```\\nconst startTime = new Date().getTime()\\nlet count = 0\\nconst interval = setInterval(function () {\\ncount++\\nconsole.log(new Date().getTime() - (startTime + count * 1000) + \\'ms\\')\\nif(count === 10){\\nclearInterval(interval);\\n}\\n}, 1000)\\n```\\n`new Date().getTime() - (startTime + count * 1000)`理想情况下应该是 0ms，然而事实并不是这样，而是存在着误差：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ba8397cf6a184ed6a32b285693cff3c0~tplv-k3u1fbpfcp-zoom-1.image)\\n### 2、使用 setTimeout 实现计时\\n```\\nconst startTime = new Date().getTime(), delay = 1000\\nlet count = 0\\nlet timer = setTimeout(doFunc, delay)\\nfunction doFunc(){\\ncount++\\nconsole.log(new Date().getTime() - (startTime + count * 1000) + \\'ms\\')\\nif(count < 10){\\ntimer = setTimeout(doFunc, delay)\\n}\\n}\\n```\\nsetTimeout 也同样存在着误差，而且时间越来越大（setTimeout 需要在同步代码执行完成后才重新开始计时）：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c59850b3ac2a475eb718b5492630d88e~tplv-k3u1fbpfcp-zoom-1.image)\\n## 三、为什么会出现误差\\n### 1、setTimeout 的最短延迟时间\\n`setTimeout`遵循的规范由 whatwg 来维护，在 [HTML Standard - 8.6 Timers](https://link.juejin.cn?target=https%3A%2F%2Fhtml.spec.whatwg.org%2Fmultipage%2Ftimers-and-user-prompts.html%23dom-settimeout \"https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-settimeout\") 中写到了定义定时器的详细步骤，其中有两条：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ffbfbab446fe494fb44c54181f48aa31~tplv-k3u1fbpfcp-zoom-1.image)\\n上面的意思就是说，如果设置的 timeout 小于 0，则设置为 0，如果嵌套的层级超过了 5 层（计时器嵌套），并且 timeout 小于 4ms，则设置 timeout 为 4ms。并且，在不同浏览器中出现这种最小延迟的情况有所不同\\n具体的源代码实现以及各大浏览器实现的不同，大家可以参考这篇文章：[为什么 setTimeout 有最小延时 4ms ？](https://link.juejin.cn?target=https%3A%2F%2Fwww.bruceyj.com%2Ffront-end-interview-summary%2Fsystem-design%2Fwhy-is-the-design%2F2-why-setTimeout-4ms.html \"https://www.bruceyj.com/front-end-interview-summary/system-design/why-is-the-design/2-why-setTimeout-4ms.html\")\\n这里只看结论，定时器本身的定义步骤是造成其出现误差的原因之一\\n### 2、setInterval 的最小间隔时间\\n在 HTML5 标准中，setInterval 的最小间隔为 10ms，虽然我在规范文档中并未找到其相关说明，但是经过实际测试，也确实存在最小间隔时间，例如以下代码：\\n```\\nlet startTime = new Date().getTime()\\nlet count = 0\\nconst interval = setInterval(function () {\\ncount++\\n console.log(new Date().getTime() - startTime + \\'ms\\')\\nstartTime = new Date().getTime()\\nif(count === 10) {\\nclearInterval(interval)\\n}\\n}, 0)\\n```\\n测试结果：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9bcffa807d384a7ab542fd1174186b12~tplv-k3u1fbpfcp-zoom-1.image)\\n虽然没有 10ms 那么大的间隔，但是间隔仍然存在，猜测具体的间隔时间是和浏览器实现以及设备性能有关，无论如何，间隔是确实存在的\\n另外，当使用 setInterval 时间间隔到点后，仅当队列中没有该定时器的任何其他代码实例时，才会将定时器的代码添加到队列中，如果有的话，则不会添加，造成堵塞，这个也与 JS 的事件循环有关\\n 未被激活的tabs的定时最小延迟 >= 1000ms\\n为了优化后台 tab 的加载损耗（以及降低耗电量），在未被激活的 tab 中定时器的最小延时限制为1s(1000ms)，具体时间在不同的浏览器实现中也有差别\\n  JS 的事件循环机制\\n`setTimeout`和`setInterval`中的时间并不是到点就立即执行，而是到点将其回调函数加入异步事件队列中，按照队列先进先出的性质，该回调函数到点之后是否能执行还得取决于是否属于队列首位，如果前头还有其他事件在等待，则不能按点执行，如果没有，则将其放入同步队列执行。具体事件循环机制，可以参考这篇文章：[动图学习-EventLoop](https://juejin.cn/post/6969028296893792286 \"https://juejin.cn/post/6969028296893792286\")\\n## 四、解决方案\\n1、在浏览器中实现一个 0ms 延时的定时器\\n可以参考如下代码（来自于国外的一篇博客，也是 MDN 推荐的方法），主要是使用了 postMessage 方法，异步的执行了回调函数，并且速度要比 setTimeout(0) 要快的多。具体比较可以参照原文：[setTimeout with a shorter delay](https://link.juejin.cn?target=https%3A%2F%2Fdbaron.org%2Flog%2F20100309-faster-timeouts \"https://dbaron.org/log/20100309-faster-timeouts\")\\n使用 setTimeout(0) 得到的时间：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8994a7da32e549cd9d06c34d1ac0bbc8~tplv-k3u1fbpfcp-zoom-1.image)\\n将 setTimeout 改成 setZeroTimeout 后得到的时间，时间几乎都在 0～1，至于为什么不是绝对的 0，猜测可能与性能有关，总的来说，时间确实缩短了：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dced5471b7fc422d9f9eb28259b26ce2~tplv-k3u1fbpfcp-zoom-1.image)\\n购物网站的秒杀活动\\n一般情况下，从服务器拿到倒数时间后，前端的执行倒计时程序持续运行，事实上，显示时间相比实际时间会越来越慢的\\n究其原因，倒计时通常是使用定时器实现，而 JS 的单线程特性使得同步任务执行过程中出现阻塞时，任务队列中的异步任务并不能及时执行，因此浏览器并不能保证在定时器设置的时间结束后代码总是被准时执行，从而造成了倒计时的偏差\\n一般的解决方法是前端定时向服务器发送请求获取最新的时间差来校准倒计时时间，和用户一直按 F5 刷新没啥区别，比较简单粗暴，下面的方法可以一定程度上解决这个问题，纯前端控制，不依赖于后端。源地址已忘\\n 五、使用 setTimeout 替代 setInterval\\n定时器指定的时间间隔，表示的是何时将定时器的代码添加到消息队列，而不是何时执行代码。所以真正何时执行代码的时间是不能保证的，它取决于何时被主线程的事件循环获取到，并执行\\n假设有 `setInterval(function, 100)`，它的执行可能是这样的：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/30346ef998214cabb6c95141b19ad25f~tplv-k3u1fbpfcp-zoom-1.image)\\n上图可见，setInterval 每隔 100ms 往队列中添加一个事件；100ms 后，添加 T1 定时器代码至队列中，主线程中还有任务在执行，所以等待，some event 执行结束后执行 T1 定时器代码；又过了100ms，T2定时器被添加到队列中，主线程还在执行 T1 代码，所以等待；又过了 100ms，理论上又要往队列里推一个定时器代码，但由于此时 T2 还在队列中，所以 T3 不会被添加，结果就是此时被跳过；然后，T1 定时器执行结束后马上执行了 T2 代码，所以并没有达到定时器间隔的效果\\n综上所述，serInterval 有两个问题：\\n-   可能多个定时器会连续执行（会导致后续的间隔误差）\\n-   某些间隔会被跳过（这么设计也可能是为了尽量避免第一个问题）\\n因而一般会使用 setTimeout 模拟 setInterval，来规避掉上面的缺点\\n```\\nsetTimeout(function fn() {\\n// do something\\nsetTimeout(fn, delay)\\n}, delay)\\n```\\n这样的话，在前一个定时器代码执行完成前，不会向队列中插入新的定时器（不会连续执行），而且保证了定时器间隔\\n注：有些说法，可能对当队列中存在定时器实例时，是否会跳过添加实例，存在质疑；还有的说法是，在 Node 环境中会跳过，在浏览器环境中会累加；不过我这边实测，不管在 Node 还是在 web 中，当队列中存在定时器实例时，都会跳过添加的；当然也有可能是浏览器版本或内核不同，表现不同，没有细测；感兴趣的小伙伴可以使用一下代码实测下，看是会一次性输出，还是会间隔性输出\\n**这边顺便一提，涉及到做动画的场景可能会使用定时器**\\n-   由于定时器的种种误差问题，以及固定时间间隔不一定与屏幕刷新时间相同，可能会引起丢帧；而且定时器在后台仍会继续执行，也会造成资源的浪费\\n-   一般情况下，还是推荐使用 requestAnimationFrame，RAF 重绘或回流（重排）的时间间隔是紧紧跟随浏览器的刷新频率的；并且在页面未激活时，该页面的屏幕刷新任务也会被暂停，当页面被激活时，任务会从上次停留的地方继续执行，这也就意味着将耗费更少的资源，提升了性能\\n### 总结\\n-   setTimeout 和 setInterval 都存在计时误差，不会严格按照既定时间执行\\n-   一般情况下，这些误差不会造成太大影响，只对于某些特殊场景，对时间要求比较严格的情况下，需要特殊处理\\n-   对于 setInterval，个人建议能不用尽量不用，使用 setTimeout 的嵌套实现，可以规避掉一些潜在问题的发生\\n'\n      },\n      {\n        id: 4,\n        name: '望舟',\n        day: '1',\n        category: '面试',\n        title: '让“作用域和闭包”说人话！ ',\n        intro: '让作用域和闭包说人话，面试时候有话可讲！',\n        imgsrc: require('../assets/image/ArticleImg1.webp'),\n        content:\n        '# 一、作用域是什么\\n作用域与编译原理息息相关，但是我们暂时还不用管编译原理的复杂过程，它的作用可以简单看下面这张图： \\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2dc72d14948848159ed01ab7af90a090~tplv-k3u1fbpfcp-zoom-1.image)\\n简单来说就是“我得知道这些变量在哪里，不然我怎么取到它们再进行下一步操作呀！”\\n***\\nJavaScript的编译发生代码执行前的几微妙内，并不是发生在构建之前。\\n引擎根据作用域进行变量查询，存在两种影响结果的查找方式——LHS/RHS。\\nRHS（谁是源头【获取变量的值】）：需要找到这个变量的值才可以进行下一步操作。如console.log(a)，即得到a的值后执行操作。查询操作失败报ReferenceError异常，不合理操作报TypeError异常。\\nLHS（目标是谁【对变量赋值】）：为操作找到一个容器，如var a = 2，即找到一个a，给它赋值为2。查询操作失败在非严格模式下会创建变量。*这个特性可以解释变量提升这个东西，也就是“赋值可以跑到声明前”。为了完成赋值这个动作，我可以自己声明一下嘛。现在可以暂时放一下这句话，等到提升时再想。*\\n> ~~不推荐使用with/eval~~\\n# 二、函数作用域和块作用域\\n> 函数作用域含义：属于这个函数的全部变量都可以在整个函数的范围内使用或复用。\\nfunction 开头的就是函数声明，其余则是函数表达式。 **正常函数声明被绑定在作用域中，函数表达式则绑定在函数自身中。** 这句话不理解可以先埋下一个伏笔，等下面看到闭包的时候再回头看会回味无穷。\\n```\\n// 函数声明\\nfunction foo(){\\nvar a = 2;\\nconsole.log(a);\\n}\\nfoo()\\n// 函数表达式\\n(function foo(){\\nvar a = 2;\\nconsole.log(a);\\n})()\\nvar a = 2;\\n(function IIFE(global){\\nvar a = 3;\\nconsole.log(a, global.a)// 3,2\\n})(window)\\n// 函数表达式\\nvar foo = function(){\\nconsole.log(1)\\n}\\n```\\n那么怎么搞出一个块作用域呢？块作用域的声明方式有：\\n1.  with 仅在with声明中有效\\n1.  try/catch catch内的变量仅在catch内使用\\n1.  let 劫持所在块的作用域\\n1.  const 与let类似，变量不可修改\\n块作用域的优势：1. 有利于垃圾回收（块作用域内代码执行后可以直接回收）；2. 解决 var 循环问题。\\n# 三、提升\\n> 没有赋值只有声明的变量是会报错 undefined，提升也只是提升了个声明而已；再换句话说，赋值可以跑在声明的前面。光说不干假把式~\\n第一段代码可以顺利执行，因为对于 a 的声明会提升到最顶部，因此在作用域内能够找到a。但是这第二段代码中，`var a = 2;`会被拆分为两步，第一步是声明 a ，然后就执行了输出语句，还没有进行赋值呢，因此会出现报错。 这个例子恰好说明了“赋值可以跑在声明前面”。\\n***\\n例二：\\n```\\nfoo()\\nfunction foo(){\\nconsole.log(a); //undefined\\nvar a;\\n}\\n```\\n这里也是和例一一样，a会提升声明（作用域在foo内），但是只有声明，没有赋值，所以仍然会报错。\\n***\\n同样是声明提升，***函数的优先级高于变量***。这里的例子我们可以把函数表达式当作是一个变量的声明，相当于给foo2 这个变量赋值了一个函数。那么由于函数的优先级更高，这个foo2无法覆盖之前的foo1，所以输出仍然是1。\\n# 四、闭包\\n## 1. 闭包是什么\\n首先我们得知道闭包是什么，来看看书里是怎么说的：\\n> 函数在 定义时的词法作用域以外的地方 被调用，闭包使得函数可以继续访问定义时的词法作用域。\\n这句话的形容使闭包看起来像一种_访问作用域的方法_。我们继续看下一句：\\n> 无论通过何种手段将内部函数传递到所在的词法作用域以外，它都会持有对原始定义作用域的引用，无论在何处执行这个函数都会使用闭包。\\n**因此，不应该把比较理解成一种现象或者原理，应该作为一种工具方便我们使用来解决 JavaScript 中的一些问题。这是一个重要的理解点。** 用自己的话再来说一下闭包是什么吧：\\n一个函数（A）引用着另一个函数的变量（B），即使 B 已经顺利执行结束了也不会被回收，因为 A 还引用着呢，所以 B 的各种变量也要被保存。\\n'\n      },\n      {\n        id: 5,\n        name: 'ZEROL',\n        day: '22',\n        category: 'JavaScript',\n        title: 'setTimeout 和 setInterval，你们两位同学注意点时间~ ',\n        intro: '你们两位同学注意点时间~',\n        imgsrc: require('../assets/image/ArticleImg2.webp'),\n        content:\n        '## 一、基本定义与用法 \\n### 1、定义\\n-   `setTimeout()`方法用于在指定的时间（单位毫秒）后执行回调函数或指定的一段代码\\n-   `setInterval()`方法可按照指定的时间间隔（单位毫秒）来调用回调函数或指定的一段代码\\n### 2、参数\\n-   第一个参数 function，必填，回调函数。或者是一段字符串代码，但是这种方式不建议使用，就和使用`eval()`一样，有安全风险；而且还有作用域问题（字符串会在全局作用域内被解释执行）\\n```\\nsetTimeout(\\'console.log(123);fn()\\', 2000)\\n```\\n-   第二个参数 delay，可选，单位是 ms，对于`setTimeout`是延迟时间，对于`setInterval`是间隔时间，默认都是 0\\n-   第三个参数 param1,param2,param3...，可选，是传递给回调函数的参数，不大常用\\n ```\\nsetTimeout(function (a, b) {\\nconsole.log(a, b)\\n}, 2000, \\'我是\\', \\'定时器\\')\\n```\\n### 3、返回值\\n-   返回一个 ID（数字），可以将这个 ID 传递给`clearTimeout()`或`clearInterval()`来取消执行\\n-   PS: `setTimeout()`和`setInterval()`共用一个编号池，技术上，`clearTimeout()`和`clearInterval()`可以互换使用，但是为了避免混淆，一般不这么做\\n## 二、setTimeout 和 setInterval 的实际表现\\n### 1、使用 setInterval 实现计时\\n```\\nconst startTime = new Date().getTime()\\nlet count = 0\\nconst interval = setInterval(function () {\\ncount++\\nconsole.log(new Date().getTime() - (startTime + count * 1000) + \\'ms\\')\\nif(count === 10){\\nclearInterval(interval);\\n}\\n}, 1000)\\n```\\n`new Date().getTime() - (startTime + count * 1000)`理想情况下应该是 0ms，然而事实并不是这样，而是存在着误差：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ba8397cf6a184ed6a32b285693cff3c0~tplv-k3u1fbpfcp-zoom-1.image)\\n### 2、使用 setTimeout 实现计时\\n```\\nconst startTime = new Date().getTime(), delay = 1000\\nlet count = 0\\nlet timer = setTimeout(doFunc, delay)\\nfunction doFunc(){\\ncount++\\nconsole.log(new Date().getTime() - (startTime + count * 1000) + \\'ms\\')\\nif(count < 10){\\ntimer = setTimeout(doFunc, delay)\\n}\\n}\\n```\\nsetTimeout 也同样存在着误差，而且时间越来越大（setTimeout 需要在同步代码执行完成后才重新开始计时）：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c59850b3ac2a475eb718b5492630d88e~tplv-k3u1fbpfcp-zoom-1.image)\\n## 三、为什么会出现误差\\n### 1、setTimeout 的最短延迟时间\\n`setTimeout`遵循的规范由 whatwg 来维护，在 [HTML Standard - 8.6 Timers](https://link.juejin.cn?target=https%3A%2F%2Fhtml.spec.whatwg.org%2Fmultipage%2Ftimers-and-user-prompts.html%23dom-settimeout \"https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-settimeout\") 中写到了定义定时器的详细步骤，其中有两条：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ffbfbab446fe494fb44c54181f48aa31~tplv-k3u1fbpfcp-zoom-1.image)\\n上面的意思就是说，如果设置的 timeout 小于 0，则设置为 0，如果嵌套的层级超过了 5 层（计时器嵌套），并且 timeout 小于 4ms，则设置 timeout 为 4ms。并且，在不同浏览器中出现这种最小延迟的情况有所不同\\n具体的源代码实现以及各大浏览器实现的不同，大家可以参考这篇文章：[为什么 setTimeout 有最小延时 4ms ？](https://link.juejin.cn?target=https%3A%2F%2Fwww.bruceyj.com%2Ffront-end-interview-summary%2Fsystem-design%2Fwhy-is-the-design%2F2-why-setTimeout-4ms.html \"https://www.bruceyj.com/front-end-interview-summary/system-design/why-is-the-design/2-why-setTimeout-4ms.html\")\\n这里只看结论，定时器本身的定义步骤是造成其出现误差的原因之一\\n### 2、setInterval 的最小间隔时间\\n在 HTML5 标准中，setInterval 的最小间隔为 10ms，虽然我在规范文档中并未找到其相关说明，但是经过实际测试，也确实存在最小间隔时间，例如以下代码：\\n```\\nlet startTime = new Date().getTime()\\nlet count = 0\\nconst interval = setInterval(function () {\\ncount++\\n console.log(new Date().getTime() - startTime + \\'ms\\')\\nstartTime = new Date().getTime()\\nif(count === 10) {\\nclearInterval(interval)\\n}\\n}, 0)\\n```\\n测试结果：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9bcffa807d384a7ab542fd1174186b12~tplv-k3u1fbpfcp-zoom-1.image)\\n虽然没有 10ms 那么大的间隔，但是间隔仍然存在，猜测具体的间隔时间是和浏览器实现以及设备性能有关，无论如何，间隔是确实存在的\\n另外，当使用 setInterval 时间间隔到点后，仅当队列中没有该定时器的任何其他代码实例时，才会将定时器的代码添加到队列中，如果有的话，则不会添加，造成堵塞，这个也与 JS 的事件循环有关\\n 未被激活的tabs的定时最小延迟 >= 1000ms\\n为了优化后台 tab 的加载损耗（以及降低耗电量），在未被激活的 tab 中定时器的最小延时限制为1s(1000ms)，具体时间在不同的浏览器实现中也有差别\\n  JS 的事件循环机制\\n`setTimeout`和`setInterval`中的时间并不是到点就立即执行，而是到点将其回调函数加入异步事件队列中，按照队列先进先出的性质，该回调函数到点之后是否能执行还得取决于是否属于队列首位，如果前头还有其他事件在等待，则不能按点执行，如果没有，则将其放入同步队列执行。具体事件循环机制，可以参考这篇文章：[动图学习-EventLoop](https://juejin.cn/post/6969028296893792286 \"https://juejin.cn/post/6969028296893792286\")\\n## 四、解决方案\\n1、在浏览器中实现一个 0ms 延时的定时器\\n可以参考如下代码（来自于国外的一篇博客，也是 MDN 推荐的方法），主要是使用了 postMessage 方法，异步的执行了回调函数，并且速度要比 setTimeout(0) 要快的多。具体比较可以参照原文：[setTimeout with a shorter delay](https://link.juejin.cn?target=https%3A%2F%2Fdbaron.org%2Flog%2F20100309-faster-timeouts \"https://dbaron.org/log/20100309-faster-timeouts\")\\n使用 setTimeout(0) 得到的时间：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8994a7da32e549cd9d06c34d1ac0bbc8~tplv-k3u1fbpfcp-zoom-1.image)\\n将 setTimeout 改成 setZeroTimeout 后得到的时间，时间几乎都在 0～1，至于为什么不是绝对的 0，猜测可能与性能有关，总的来说，时间确实缩短了：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dced5471b7fc422d9f9eb28259b26ce2~tplv-k3u1fbpfcp-zoom-1.image)\\n购物网站的秒杀活动\\n一般情况下，从服务器拿到倒数时间后，前端的执行倒计时程序持续运行，事实上，显示时间相比实际时间会越来越慢的\\n究其原因，倒计时通常是使用定时器实现，而 JS 的单线程特性使得同步任务执行过程中出现阻塞时，任务队列中的异步任务并不能及时执行，因此浏览器并不能保证在定时器设置的时间结束后代码总是被准时执行，从而造成了倒计时的偏差\\n一般的解决方法是前端定时向服务器发送请求获取最新的时间差来校准倒计时时间，和用户一直按 F5 刷新没啥区别，比较简单粗暴，下面的方法可以一定程度上解决这个问题，纯前端控制，不依赖于后端。源地址已忘\\n 五、使用 setTimeout 替代 setInterval\\n定时器指定的时间间隔，表示的是何时将定时器的代码添加到消息队列，而不是何时执行代码。所以真正何时执行代码的时间是不能保证的，它取决于何时被主线程的事件循环获取到，并执行\\n假设有 `setInterval(function, 100)`，它的执行可能是这样的：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/30346ef998214cabb6c95141b19ad25f~tplv-k3u1fbpfcp-zoom-1.image)\\n上图可见，setInterval 每隔 100ms 往队列中添加一个事件；100ms 后，添加 T1 定时器代码至队列中，主线程中还有任务在执行，所以等待，some event 执行结束后执行 T1 定时器代码；又过了100ms，T2定时器被添加到队列中，主线程还在执行 T1 代码，所以等待；又过了 100ms，理论上又要往队列里推一个定时器代码，但由于此时 T2 还在队列中，所以 T3 不会被添加，结果就是此时被跳过；然后，T1 定时器执行结束后马上执行了 T2 代码，所以并没有达到定时器间隔的效果\\n综上所述，serInterval 有两个问题：\\n-   可能多个定时器会连续执行（会导致后续的间隔误差）\\n-   某些间隔会被跳过（这么设计也可能是为了尽量避免第一个问题）\\n因而一般会使用 setTimeout 模拟 setInterval，来规避掉上面的缺点\\n```\\nsetTimeout(function fn() {\\n// do something\\nsetTimeout(fn, delay)\\n}, delay)\\n```\\n这样的话，在前一个定时器代码执行完成前，不会向队列中插入新的定时器（不会连续执行），而且保证了定时器间隔\\n注：有些说法，可能对当队列中存在定时器实例时，是否会跳过添加实例，存在质疑；还有的说法是，在 Node 环境中会跳过，在浏览器环境中会累加；不过我这边实测，不管在 Node 还是在 web 中，当队列中存在定时器实例时，都会跳过添加的；当然也有可能是浏览器版本或内核不同，表现不同，没有细测；感兴趣的小伙伴可以使用一下代码实测下，看是会一次性输出，还是会间隔性输出\\n**这边顺便一提，涉及到做动画的场景可能会使用定时器**\\n-   由于定时器的种种误差问题，以及固定时间间隔不一定与屏幕刷新时间相同，可能会引起丢帧；而且定时器在后台仍会继续执行，也会造成资源的浪费\\n-   一般情况下，还是推荐使用 requestAnimationFrame，RAF 重绘或回流（重排）的时间间隔是紧紧跟随浏览器的刷新频率的；并且在页面未激活时，该页面的屏幕刷新任务也会被暂停，当页面被激活时，任务会从上次停留的地方继续执行，这也就意味着将耗费更少的资源，提升了性能\\n### 总结\\n-   setTimeout 和 setInterval 都存在计时误差，不会严格按照既定时间执行\\n-   一般情况下，这些误差不会造成太大影响，只对于某些特殊场景，对时间要求比较严格的情况下，需要特殊处理\\n-   对于 setInterval，个人建议能不用尽量不用，使用 setTimeout 的嵌套实现，可以规避掉一些潜在问题的发生\\n'\n      },{\n        id: 6,\n        name: 'ZEROL',\n        day: '22',\n        category: 'JavaScript',\n        title: 'setTimeout 和 setInterval，你们两位同学注意点时间~ ',\n        intro: '你们两位同学注意点时间~',\n        imgsrc: require('../assets/image/ArticleImg2.webp'),\n        content:\n        '## 一、基本定义与用法 \\n### 1、定义\\n-   `setTimeout()`方法用于在指定的时间（单位毫秒）后执行回调函数或指定的一段代码\\n-   `setInterval()`方法可按照指定的时间间隔（单位毫秒）来调用回调函数或指定的一段代码\\n### 2、参数\\n-   第一个参数 function，必填，回调函数。或者是一段字符串代码，但是这种方式不建议使用，就和使用`eval()`一样，有安全风险；而且还有作用域问题（字符串会在全局作用域内被解释执行）\\n```\\nsetTimeout(\\'console.log(123);fn()\\', 2000)\\n```\\n-   第二个参数 delay，可选，单位是 ms，对于`setTimeout`是延迟时间，对于`setInterval`是间隔时间，默认都是 0\\n-   第三个参数 param1,param2,param3...，可选，是传递给回调函数的参数，不大常用\\n ```\\nsetTimeout(function (a, b) {\\nconsole.log(a, b)\\n}, 2000, \\'我是\\', \\'定时器\\')\\n```\\n### 3、返回值\\n-   返回一个 ID（数字），可以将这个 ID 传递给`clearTimeout()`或`clearInterval()`来取消执行\\n-   PS: `setTimeout()`和`setInterval()`共用一个编号池，技术上，`clearTimeout()`和`clearInterval()`可以互换使用，但是为了避免混淆，一般不这么做\\n## 二、setTimeout 和 setInterval 的实际表现\\n### 1、使用 setInterval 实现计时\\n```\\nconst startTime = new Date().getTime()\\nlet count = 0\\nconst interval = setInterval(function () {\\ncount++\\nconsole.log(new Date().getTime() - (startTime + count * 1000) + \\'ms\\')\\nif(count === 10){\\nclearInterval(interval);\\n}\\n}, 1000)\\n```\\n`new Date().getTime() - (startTime + count * 1000)`理想情况下应该是 0ms，然而事实并不是这样，而是存在着误差：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ba8397cf6a184ed6a32b285693cff3c0~tplv-k3u1fbpfcp-zoom-1.image)\\n### 2、使用 setTimeout 实现计时\\n```\\nconst startTime = new Date().getTime(), delay = 1000\\nlet count = 0\\nlet timer = setTimeout(doFunc, delay)\\nfunction doFunc(){\\ncount++\\nconsole.log(new Date().getTime() - (startTime + count * 1000) + \\'ms\\')\\nif(count < 10){\\ntimer = setTimeout(doFunc, delay)\\n}\\n}\\n```\\nsetTimeout 也同样存在着误差，而且时间越来越大（setTimeout 需要在同步代码执行完成后才重新开始计时）：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c59850b3ac2a475eb718b5492630d88e~tplv-k3u1fbpfcp-zoom-1.image)\\n## 三、为什么会出现误差\\n### 1、setTimeout 的最短延迟时间\\n`setTimeout`遵循的规范由 whatwg 来维护，在 [HTML Standard - 8.6 Timers](https://link.juejin.cn?target=https%3A%2F%2Fhtml.spec.whatwg.org%2Fmultipage%2Ftimers-and-user-prompts.html%23dom-settimeout \"https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-settimeout\") 中写到了定义定时器的详细步骤，其中有两条：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ffbfbab446fe494fb44c54181f48aa31~tplv-k3u1fbpfcp-zoom-1.image)\\n上面的意思就是说，如果设置的 timeout 小于 0，则设置为 0，如果嵌套的层级超过了 5 层（计时器嵌套），并且 timeout 小于 4ms，则设置 timeout 为 4ms。并且，在不同浏览器中出现这种最小延迟的情况有所不同\\n具体的源代码实现以及各大浏览器实现的不同，大家可以参考这篇文章：[为什么 setTimeout 有最小延时 4ms ？](https://link.juejin.cn?target=https%3A%2F%2Fwww.bruceyj.com%2Ffront-end-interview-summary%2Fsystem-design%2Fwhy-is-the-design%2F2-why-setTimeout-4ms.html \"https://www.bruceyj.com/front-end-interview-summary/system-design/why-is-the-design/2-why-setTimeout-4ms.html\")\\n这里只看结论，定时器本身的定义步骤是造成其出现误差的原因之一\\n### 2、setInterval 的最小间隔时间\\n在 HTML5 标准中，setInterval 的最小间隔为 10ms，虽然我在规范文档中并未找到其相关说明，但是经过实际测试，也确实存在最小间隔时间，例如以下代码：\\n```\\nlet startTime = new Date().getTime()\\nlet count = 0\\nconst interval = setInterval(function () {\\ncount++\\n console.log(new Date().getTime() - startTime + \\'ms\\')\\nstartTime = new Date().getTime()\\nif(count === 10) {\\nclearInterval(interval)\\n}\\n}, 0)\\n```\\n测试结果：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9bcffa807d384a7ab542fd1174186b12~tplv-k3u1fbpfcp-zoom-1.image)\\n虽然没有 10ms 那么大的间隔，但是间隔仍然存在，猜测具体的间隔时间是和浏览器实现以及设备性能有关，无论如何，间隔是确实存在的\\n另外，当使用 setInterval 时间间隔到点后，仅当队列中没有该定时器的任何其他代码实例时，才会将定时器的代码添加到队列中，如果有的话，则不会添加，造成堵塞，这个也与 JS 的事件循环有关\\n 未被激活的tabs的定时最小延迟 >= 1000ms\\n为了优化后台 tab 的加载损耗（以及降低耗电量），在未被激活的 tab 中定时器的最小延时限制为1s(1000ms)，具体时间在不同的浏览器实现中也有差别\\n  JS 的事件循环机制\\n`setTimeout`和`setInterval`中的时间并不是到点就立即执行，而是到点将其回调函数加入异步事件队列中，按照队列先进先出的性质，该回调函数到点之后是否能执行还得取决于是否属于队列首位，如果前头还有其他事件在等待，则不能按点执行，如果没有，则将其放入同步队列执行。具体事件循环机制，可以参考这篇文章：[动图学习-EventLoop](https://juejin.cn/post/6969028296893792286 \"https://juejin.cn/post/6969028296893792286\")\\n## 四、解决方案\\n1、在浏览器中实现一个 0ms 延时的定时器\\n可以参考如下代码（来自于国外的一篇博客，也是 MDN 推荐的方法），主要是使用了 postMessage 方法，异步的执行了回调函数，并且速度要比 setTimeout(0) 要快的多。具体比较可以参照原文：[setTimeout with a shorter delay](https://link.juejin.cn?target=https%3A%2F%2Fdbaron.org%2Flog%2F20100309-faster-timeouts \"https://dbaron.org/log/20100309-faster-timeouts\")\\n使用 setTimeout(0) 得到的时间：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8994a7da32e549cd9d06c34d1ac0bbc8~tplv-k3u1fbpfcp-zoom-1.image)\\n将 setTimeout 改成 setZeroTimeout 后得到的时间，时间几乎都在 0～1，至于为什么不是绝对的 0，猜测可能与性能有关，总的来说，时间确实缩短了：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dced5471b7fc422d9f9eb28259b26ce2~tplv-k3u1fbpfcp-zoom-1.image)\\n购物网站的秒杀活动\\n一般情况下，从服务器拿到倒数时间后，前端的执行倒计时程序持续运行，事实上，显示时间相比实际时间会越来越慢的\\n究其原因，倒计时通常是使用定时器实现，而 JS 的单线程特性使得同步任务执行过程中出现阻塞时，任务队列中的异步任务并不能及时执行，因此浏览器并不能保证在定时器设置的时间结束后代码总是被准时执行，从而造成了倒计时的偏差\\n一般的解决方法是前端定时向服务器发送请求获取最新的时间差来校准倒计时时间，和用户一直按 F5 刷新没啥区别，比较简单粗暴，下面的方法可以一定程度上解决这个问题，纯前端控制，不依赖于后端。源地址已忘\\n 五、使用 setTimeout 替代 setInterval\\n定时器指定的时间间隔，表示的是何时将定时器的代码添加到消息队列，而不是何时执行代码。所以真正何时执行代码的时间是不能保证的，它取决于何时被主线程的事件循环获取到，并执行\\n假设有 `setInterval(function, 100)`，它的执行可能是这样的：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/30346ef998214cabb6c95141b19ad25f~tplv-k3u1fbpfcp-zoom-1.image)\\n上图可见，setInterval 每隔 100ms 往队列中添加一个事件；100ms 后，添加 T1 定时器代码至队列中，主线程中还有任务在执行，所以等待，some event 执行结束后执行 T1 定时器代码；又过了100ms，T2定时器被添加到队列中，主线程还在执行 T1 代码，所以等待；又过了 100ms，理论上又要往队列里推一个定时器代码，但由于此时 T2 还在队列中，所以 T3 不会被添加，结果就是此时被跳过；然后，T1 定时器执行结束后马上执行了 T2 代码，所以并没有达到定时器间隔的效果\\n综上所述，serInterval 有两个问题：\\n-   可能多个定时器会连续执行（会导致后续的间隔误差）\\n-   某些间隔会被跳过（这么设计也可能是为了尽量避免第一个问题）\\n因而一般会使用 setTimeout 模拟 setInterval，来规避掉上面的缺点\\n```\\nsetTimeout(function fn() {\\n// do something\\nsetTimeout(fn, delay)\\n}, delay)\\n```\\n这样的话，在前一个定时器代码执行完成前，不会向队列中插入新的定时器（不会连续执行），而且保证了定时器间隔\\n注：有些说法，可能对当队列中存在定时器实例时，是否会跳过添加实例，存在质疑；还有的说法是，在 Node 环境中会跳过，在浏览器环境中会累加；不过我这边实测，不管在 Node 还是在 web 中，当队列中存在定时器实例时，都会跳过添加的；当然也有可能是浏览器版本或内核不同，表现不同，没有细测；感兴趣的小伙伴可以使用一下代码实测下，看是会一次性输出，还是会间隔性输出\\n**这边顺便一提，涉及到做动画的场景可能会使用定时器**\\n-   由于定时器的种种误差问题，以及固定时间间隔不一定与屏幕刷新时间相同，可能会引起丢帧；而且定时器在后台仍会继续执行，也会造成资源的浪费\\n-   一般情况下，还是推荐使用 requestAnimationFrame，RAF 重绘或回流（重排）的时间间隔是紧紧跟随浏览器的刷新频率的；并且在页面未激活时，该页面的屏幕刷新任务也会被暂停，当页面被激活时，任务会从上次停留的地方继续执行，这也就意味着将耗费更少的资源，提升了性能\\n### 总结\\n-   setTimeout 和 setInterval 都存在计时误差，不会严格按照既定时间执行\\n-   一般情况下，这些误差不会造成太大影响，只对于某些特殊场景，对时间要求比较严格的情况下，需要特殊处理\\n-   对于 setInterval，个人建议能不用尽量不用，使用 setTimeout 的嵌套实现，可以规避掉一些潜在问题的发生\\n'\n      },{\n        id: 7,\n        name: 'ZEROL',\n        day: '22',\n        category: 'JavaScript',\n        title: 'setTimeout 和 setInterval，你们两位同学注意点时间~ ',\n        intro: '你们两位同学注意点时间~',\n        imgsrc: require('../assets/image/ArticleImg2.webp'),\n        content:\n        '## 一、基本定义与用法 \\n### 1、定义\\n-   `setTimeout()`方法用于在指定的时间（单位毫秒）后执行回调函数或指定的一段代码\\n-   `setInterval()`方法可按照指定的时间间隔（单位毫秒）来调用回调函数或指定的一段代码\\n### 2、参数\\n-   第一个参数 function，必填，回调函数。或者是一段字符串代码，但是这种方式不建议使用，就和使用`eval()`一样，有安全风险；而且还有作用域问题（字符串会在全局作用域内被解释执行）\\n```\\nsetTimeout(\\'console.log(123);fn()\\', 2000)\\n```\\n-   第二个参数 delay，可选，单位是 ms，对于`setTimeout`是延迟时间，对于`setInterval`是间隔时间，默认都是 0\\n-   第三个参数 param1,param2,param3...，可选，是传递给回调函数的参数，不大常用\\n ```\\nsetTimeout(function (a, b) {\\nconsole.log(a, b)\\n}, 2000, \\'我是\\', \\'定时器\\')\\n```\\n### 3、返回值\\n-   返回一个 ID（数字），可以将这个 ID 传递给`clearTimeout()`或`clearInterval()`来取消执行\\n-   PS: `setTimeout()`和`setInterval()`共用一个编号池，技术上，`clearTimeout()`和`clearInterval()`可以互换使用，但是为了避免混淆，一般不这么做\\n## 二、setTimeout 和 setInterval 的实际表现\\n### 1、使用 setInterval 实现计时\\n```\\nconst startTime = new Date().getTime()\\nlet count = 0\\nconst interval = setInterval(function () {\\ncount++\\nconsole.log(new Date().getTime() - (startTime + count * 1000) + \\'ms\\')\\nif(count === 10){\\nclearInterval(interval);\\n}\\n}, 1000)\\n```\\n`new Date().getTime() - (startTime + count * 1000)`理想情况下应该是 0ms，然而事实并不是这样，而是存在着误差：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ba8397cf6a184ed6a32b285693cff3c0~tplv-k3u1fbpfcp-zoom-1.image)\\n### 2、使用 setTimeout 实现计时\\n```\\nconst startTime = new Date().getTime(), delay = 1000\\nlet count = 0\\nlet timer = setTimeout(doFunc, delay)\\nfunction doFunc(){\\ncount++\\nconsole.log(new Date().getTime() - (startTime + count * 1000) + \\'ms\\')\\nif(count < 10){\\ntimer = setTimeout(doFunc, delay)\\n}\\n}\\n```\\nsetTimeout 也同样存在着误差，而且时间越来越大（setTimeout 需要在同步代码执行完成后才重新开始计时）：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c59850b3ac2a475eb718b5492630d88e~tplv-k3u1fbpfcp-zoom-1.image)\\n## 三、为什么会出现误差\\n### 1、setTimeout 的最短延迟时间\\n`setTimeout`遵循的规范由 whatwg 来维护，在 [HTML Standard - 8.6 Timers](https://link.juejin.cn?target=https%3A%2F%2Fhtml.spec.whatwg.org%2Fmultipage%2Ftimers-and-user-prompts.html%23dom-settimeout \"https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-settimeout\") 中写到了定义定时器的详细步骤，其中有两条：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ffbfbab446fe494fb44c54181f48aa31~tplv-k3u1fbpfcp-zoom-1.image)\\n上面的意思就是说，如果设置的 timeout 小于 0，则设置为 0，如果嵌套的层级超过了 5 层（计时器嵌套），并且 timeout 小于 4ms，则设置 timeout 为 4ms。并且，在不同浏览器中出现这种最小延迟的情况有所不同\\n具体的源代码实现以及各大浏览器实现的不同，大家可以参考这篇文章：[为什么 setTimeout 有最小延时 4ms ？](https://link.juejin.cn?target=https%3A%2F%2Fwww.bruceyj.com%2Ffront-end-interview-summary%2Fsystem-design%2Fwhy-is-the-design%2F2-why-setTimeout-4ms.html \"https://www.bruceyj.com/front-end-interview-summary/system-design/why-is-the-design/2-why-setTimeout-4ms.html\")\\n这里只看结论，定时器本身的定义步骤是造成其出现误差的原因之一\\n### 2、setInterval 的最小间隔时间\\n在 HTML5 标准中，setInterval 的最小间隔为 10ms，虽然我在规范文档中并未找到其相关说明，但是经过实际测试，也确实存在最小间隔时间，例如以下代码：\\n```\\nlet startTime = new Date().getTime()\\nlet count = 0\\nconst interval = setInterval(function () {\\ncount++\\n console.log(new Date().getTime() - startTime + \\'ms\\')\\nstartTime = new Date().getTime()\\nif(count === 10) {\\nclearInterval(interval)\\n}\\n}, 0)\\n```\\n测试结果：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9bcffa807d384a7ab542fd1174186b12~tplv-k3u1fbpfcp-zoom-1.image)\\n虽然没有 10ms 那么大的间隔，但是间隔仍然存在，猜测具体的间隔时间是和浏览器实现以及设备性能有关，无论如何，间隔是确实存在的\\n另外，当使用 setInterval 时间间隔到点后，仅当队列中没有该定时器的任何其他代码实例时，才会将定时器的代码添加到队列中，如果有的话，则不会添加，造成堵塞，这个也与 JS 的事件循环有关\\n 未被激活的tabs的定时最小延迟 >= 1000ms\\n为了优化后台 tab 的加载损耗（以及降低耗电量），在未被激活的 tab 中定时器的最小延时限制为1s(1000ms)，具体时间在不同的浏览器实现中也有差别\\n  JS 的事件循环机制\\n`setTimeout`和`setInterval`中的时间并不是到点就立即执行，而是到点将其回调函数加入异步事件队列中，按照队列先进先出的性质，该回调函数到点之后是否能执行还得取决于是否属于队列首位，如果前头还有其他事件在等待，则不能按点执行，如果没有，则将其放入同步队列执行。具体事件循环机制，可以参考这篇文章：[动图学习-EventLoop](https://juejin.cn/post/6969028296893792286 \"https://juejin.cn/post/6969028296893792286\")\\n## 四、解决方案\\n1、在浏览器中实现一个 0ms 延时的定时器\\n可以参考如下代码（来自于国外的一篇博客，也是 MDN 推荐的方法），主要是使用了 postMessage 方法，异步的执行了回调函数，并且速度要比 setTimeout(0) 要快的多。具体比较可以参照原文：[setTimeout with a shorter delay](https://link.juejin.cn?target=https%3A%2F%2Fdbaron.org%2Flog%2F20100309-faster-timeouts \"https://dbaron.org/log/20100309-faster-timeouts\")\\n使用 setTimeout(0) 得到的时间：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8994a7da32e549cd9d06c34d1ac0bbc8~tplv-k3u1fbpfcp-zoom-1.image)\\n将 setTimeout 改成 setZeroTimeout 后得到的时间，时间几乎都在 0～1，至于为什么不是绝对的 0，猜测可能与性能有关，总的来说，时间确实缩短了：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dced5471b7fc422d9f9eb28259b26ce2~tplv-k3u1fbpfcp-zoom-1.image)\\n购物网站的秒杀活动\\n一般情况下，从服务器拿到倒数时间后，前端的执行倒计时程序持续运行，事实上，显示时间相比实际时间会越来越慢的\\n究其原因，倒计时通常是使用定时器实现，而 JS 的单线程特性使得同步任务执行过程中出现阻塞时，任务队列中的异步任务并不能及时执行，因此浏览器并不能保证在定时器设置的时间结束后代码总是被准时执行，从而造成了倒计时的偏差\\n一般的解决方法是前端定时向服务器发送请求获取最新的时间差来校准倒计时时间，和用户一直按 F5 刷新没啥区别，比较简单粗暴，下面的方法可以一定程度上解决这个问题，纯前端控制，不依赖于后端。源地址已忘\\n 五、使用 setTimeout 替代 setInterval\\n定时器指定的时间间隔，表示的是何时将定时器的代码添加到消息队列，而不是何时执行代码。所以真正何时执行代码的时间是不能保证的，它取决于何时被主线程的事件循环获取到，并执行\\n假设有 `setInterval(function, 100)`，它的执行可能是这样的：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/30346ef998214cabb6c95141b19ad25f~tplv-k3u1fbpfcp-zoom-1.image)\\n上图可见，setInterval 每隔 100ms 往队列中添加一个事件；100ms 后，添加 T1 定时器代码至队列中，主线程中还有任务在执行，所以等待，some event 执行结束后执行 T1 定时器代码；又过了100ms，T2定时器被添加到队列中，主线程还在执行 T1 代码，所以等待；又过了 100ms，理论上又要往队列里推一个定时器代码，但由于此时 T2 还在队列中，所以 T3 不会被添加，结果就是此时被跳过；然后，T1 定时器执行结束后马上执行了 T2 代码，所以并没有达到定时器间隔的效果\\n综上所述，serInterval 有两个问题：\\n-   可能多个定时器会连续执行（会导致后续的间隔误差）\\n-   某些间隔会被跳过（这么设计也可能是为了尽量避免第一个问题）\\n因而一般会使用 setTimeout 模拟 setInterval，来规避掉上面的缺点\\n```\\nsetTimeout(function fn() {\\n// do something\\nsetTimeout(fn, delay)\\n}, delay)\\n```\\n这样的话，在前一个定时器代码执行完成前，不会向队列中插入新的定时器（不会连续执行），而且保证了定时器间隔\\n注：有些说法，可能对当队列中存在定时器实例时，是否会跳过添加实例，存在质疑；还有的说法是，在 Node 环境中会跳过，在浏览器环境中会累加；不过我这边实测，不管在 Node 还是在 web 中，当队列中存在定时器实例时，都会跳过添加的；当然也有可能是浏览器版本或内核不同，表现不同，没有细测；感兴趣的小伙伴可以使用一下代码实测下，看是会一次性输出，还是会间隔性输出\\n**这边顺便一提，涉及到做动画的场景可能会使用定时器**\\n-   由于定时器的种种误差问题，以及固定时间间隔不一定与屏幕刷新时间相同，可能会引起丢帧；而且定时器在后台仍会继续执行，也会造成资源的浪费\\n-   一般情况下，还是推荐使用 requestAnimationFrame，RAF 重绘或回流（重排）的时间间隔是紧紧跟随浏览器的刷新频率的；并且在页面未激活时，该页面的屏幕刷新任务也会被暂停，当页面被激活时，任务会从上次停留的地方继续执行，这也就意味着将耗费更少的资源，提升了性能\\n### 总结\\n-   setTimeout 和 setInterval 都存在计时误差，不会严格按照既定时间执行\\n-   一般情况下，这些误差不会造成太大影响，只对于某些特殊场景，对时间要求比较严格的情况下，需要特殊处理\\n-   对于 setInterval，个人建议能不用尽量不用，使用 setTimeout 的嵌套实现，可以规避掉一些潜在问题的发生\\n'\n      },{\n        id: 8,\n        name: '望舟',\n        day: '1',\n        category: '面试',\n        title: '让“作用域和闭包”说人话！ ',\n        intro: '让作用域和闭包说人话，面试时候有话可讲！',\n        imgsrc: require('../assets/image/ArticleImg1.webp'),\n        content:\n        '# 一、作用域是什么\\n作用域与编译原理息息相关，但是我们暂时还不用管编译原理的复杂过程，它的作用可以简单看下面这张图： \\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2dc72d14948848159ed01ab7af90a090~tplv-k3u1fbpfcp-zoom-1.image)\\n简单来说就是“我得知道这些变量在哪里，不然我怎么取到它们再进行下一步操作呀！”\\n***\\nJavaScript的编译发生代码执行前的几微妙内，并不是发生在构建之前。\\n引擎根据作用域进行变量查询，存在两种影响结果的查找方式——LHS/RHS。\\nRHS（谁是源头【获取变量的值】）：需要找到这个变量的值才可以进行下一步操作。如console.log(a)，即得到a的值后执行操作。查询操作失败报ReferenceError异常，不合理操作报TypeError异常。\\nLHS（目标是谁【对变量赋值】）：为操作找到一个容器，如var a = 2，即找到一个a，给它赋值为2。查询操作失败在非严格模式下会创建变量。*这个特性可以解释变量提升这个东西，也就是“赋值可以跑到声明前”。为了完成赋值这个动作，我可以自己声明一下嘛。现在可以暂时放一下这句话，等到提升时再想。*\\n> ~~不推荐使用with/eval~~\\n# 二、函数作用域和块作用域\\n> 函数作用域含义：属于这个函数的全部变量都可以在整个函数的范围内使用或复用。\\nfunction 开头的就是函数声明，其余则是函数表达式。 **正常函数声明被绑定在作用域中，函数表达式则绑定在函数自身中。** 这句话不理解可以先埋下一个伏笔，等下面看到闭包的时候再回头看会回味无穷。\\n```\\n// 函数声明\\nfunction foo(){\\nvar a = 2;\\nconsole.log(a);\\n}\\nfoo()\\n// 函数表达式\\n(function foo(){\\nvar a = 2;\\nconsole.log(a);\\n})()\\nvar a = 2;\\n(function IIFE(global){\\nvar a = 3;\\nconsole.log(a, global.a)// 3,2\\n})(window)\\n// 函数表达式\\nvar foo = function(){\\nconsole.log(1)\\n}\\n```\\n那么怎么搞出一个块作用域呢？块作用域的声明方式有：\\n1.  with 仅在with声明中有效\\n1.  try/catch catch内的变量仅在catch内使用\\n1.  let 劫持所在块的作用域\\n1.  const 与let类似，变量不可修改\\n块作用域的优势：1. 有利于垃圾回收（块作用域内代码执行后可以直接回收）；2. 解决 var 循环问题。\\n# 三、提升\\n> 没有赋值只有声明的变量是会报错 undefined，提升也只是提升了个声明而已；再换句话说，赋值可以跑在声明的前面。光说不干假把式~\\n第一段代码可以顺利执行，因为对于 a 的声明会提升到最顶部，因此在作用域内能够找到a。但是这第二段代码中，`var a = 2;`会被拆分为两步，第一步是声明 a ，然后就执行了输出语句，还没有进行赋值呢，因此会出现报错。 这个例子恰好说明了“赋值可以跑在声明前面”。\\n***\\n例二：\\n```\\nfoo()\\nfunction foo(){\\nconsole.log(a); //undefined\\nvar a;\\n}\\n```\\n这里也是和例一一样，a会提升声明（作用域在foo内），但是只有声明，没有赋值，所以仍然会报错。\\n***\\n同样是声明提升，***函数的优先级高于变量***。这里的例子我们可以把函数表达式当作是一个变量的声明，相当于给foo2 这个变量赋值了一个函数。那么由于函数的优先级更高，这个foo2无法覆盖之前的foo1，所以输出仍然是1。\\n# 四、闭包\\n## 1. 闭包是什么\\n首先我们得知道闭包是什么，来看看书里是怎么说的：\\n> 函数在 定义时的词法作用域以外的地方 被调用，闭包使得函数可以继续访问定义时的词法作用域。\\n这句话的形容使闭包看起来像一种_访问作用域的方法_。我们继续看下一句：\\n> 无论通过何种手段将内部函数传递到所在的词法作用域以外，它都会持有对原始定义作用域的引用，无论在何处执行这个函数都会使用闭包。\\n**因此，不应该把比较理解成一种现象或者原理，应该作为一种工具方便我们使用来解决 JavaScript 中的一些问题。这是一个重要的理解点。** 用自己的话再来说一下闭包是什么吧：\\n一个函数（A）引用着另一个函数的变量（B），即使 B 已经顺利执行结束了也不会被回收，因为 A 还引用着呢，所以 B 的各种变量也要被保存。\\n'\n      },{\n        id: 9,\n        name: 'ZEROL',\n        day: '22',\n        category: 'JavaScript',\n        title: 'setTimeout 和 setInterval，你们两位同学注意点时间~ ',\n        intro: '你们两位同学注意点时间~',\n        imgsrc: require('../assets/image/ArticleImg2.webp'),\n        content:\n        '## 一、基本定义与用法 \\n### 1、定义\\n-   `setTimeout()`方法用于在指定的时间（单位毫秒）后执行回调函数或指定的一段代码\\n-   `setInterval()`方法可按照指定的时间间隔（单位毫秒）来调用回调函数或指定的一段代码\\n### 2、参数\\n-   第一个参数 function，必填，回调函数。或者是一段字符串代码，但是这种方式不建议使用，就和使用`eval()`一样，有安全风险；而且还有作用域问题（字符串会在全局作用域内被解释执行）\\n```\\nsetTimeout(\\'console.log(123);fn()\\', 2000)\\n```\\n-   第二个参数 delay，可选，单位是 ms，对于`setTimeout`是延迟时间，对于`setInterval`是间隔时间，默认都是 0\\n-   第三个参数 param1,param2,param3...，可选，是传递给回调函数的参数，不大常用\\n ```\\nsetTimeout(function (a, b) {\\nconsole.log(a, b)\\n}, 2000, \\'我是\\', \\'定时器\\')\\n```\\n### 3、返回值\\n-   返回一个 ID（数字），可以将这个 ID 传递给`clearTimeout()`或`clearInterval()`来取消执行\\n-   PS: `setTimeout()`和`setInterval()`共用一个编号池，技术上，`clearTimeout()`和`clearInterval()`可以互换使用，但是为了避免混淆，一般不这么做\\n## 二、setTimeout 和 setInterval 的实际表现\\n### 1、使用 setInterval 实现计时\\n```\\nconst startTime = new Date().getTime()\\nlet count = 0\\nconst interval = setInterval(function () {\\ncount++\\nconsole.log(new Date().getTime() - (startTime + count * 1000) + \\'ms\\')\\nif(count === 10){\\nclearInterval(interval);\\n}\\n}, 1000)\\n```\\n`new Date().getTime() - (startTime + count * 1000)`理想情况下应该是 0ms，然而事实并不是这样，而是存在着误差：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ba8397cf6a184ed6a32b285693cff3c0~tplv-k3u1fbpfcp-zoom-1.image)\\n### 2、使用 setTimeout 实现计时\\n```\\nconst startTime = new Date().getTime(), delay = 1000\\nlet count = 0\\nlet timer = setTimeout(doFunc, delay)\\nfunction doFunc(){\\ncount++\\nconsole.log(new Date().getTime() - (startTime + count * 1000) + \\'ms\\')\\nif(count < 10){\\ntimer = setTimeout(doFunc, delay)\\n}\\n}\\n```\\nsetTimeout 也同样存在着误差，而且时间越来越大（setTimeout 需要在同步代码执行完成后才重新开始计时）：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c59850b3ac2a475eb718b5492630d88e~tplv-k3u1fbpfcp-zoom-1.image)\\n## 三、为什么会出现误差\\n### 1、setTimeout 的最短延迟时间\\n`setTimeout`遵循的规范由 whatwg 来维护，在 [HTML Standard - 8.6 Timers](https://link.juejin.cn?target=https%3A%2F%2Fhtml.spec.whatwg.org%2Fmultipage%2Ftimers-and-user-prompts.html%23dom-settimeout \"https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-settimeout\") 中写到了定义定时器的详细步骤，其中有两条：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ffbfbab446fe494fb44c54181f48aa31~tplv-k3u1fbpfcp-zoom-1.image)\\n上面的意思就是说，如果设置的 timeout 小于 0，则设置为 0，如果嵌套的层级超过了 5 层（计时器嵌套），并且 timeout 小于 4ms，则设置 timeout 为 4ms。并且，在不同浏览器中出现这种最小延迟的情况有所不同\\n具体的源代码实现以及各大浏览器实现的不同，大家可以参考这篇文章：[为什么 setTimeout 有最小延时 4ms ？](https://link.juejin.cn?target=https%3A%2F%2Fwww.bruceyj.com%2Ffront-end-interview-summary%2Fsystem-design%2Fwhy-is-the-design%2F2-why-setTimeout-4ms.html \"https://www.bruceyj.com/front-end-interview-summary/system-design/why-is-the-design/2-why-setTimeout-4ms.html\")\\n这里只看结论，定时器本身的定义步骤是造成其出现误差的原因之一\\n### 2、setInterval 的最小间隔时间\\n在 HTML5 标准中，setInterval 的最小间隔为 10ms，虽然我在规范文档中并未找到其相关说明，但是经过实际测试，也确实存在最小间隔时间，例如以下代码：\\n```\\nlet startTime = new Date().getTime()\\nlet count = 0\\nconst interval = setInterval(function () {\\ncount++\\n console.log(new Date().getTime() - startTime + \\'ms\\')\\nstartTime = new Date().getTime()\\nif(count === 10) {\\nclearInterval(interval)\\n}\\n}, 0)\\n```\\n测试结果：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9bcffa807d384a7ab542fd1174186b12~tplv-k3u1fbpfcp-zoom-1.image)\\n虽然没有 10ms 那么大的间隔，但是间隔仍然存在，猜测具体的间隔时间是和浏览器实现以及设备性能有关，无论如何，间隔是确实存在的\\n另外，当使用 setInterval 时间间隔到点后，仅当队列中没有该定时器的任何其他代码实例时，才会将定时器的代码添加到队列中，如果有的话，则不会添加，造成堵塞，这个也与 JS 的事件循环有关\\n 未被激活的tabs的定时最小延迟 >= 1000ms\\n为了优化后台 tab 的加载损耗（以及降低耗电量），在未被激活的 tab 中定时器的最小延时限制为1s(1000ms)，具体时间在不同的浏览器实现中也有差别\\n  JS 的事件循环机制\\n`setTimeout`和`setInterval`中的时间并不是到点就立即执行，而是到点将其回调函数加入异步事件队列中，按照队列先进先出的性质，该回调函数到点之后是否能执行还得取决于是否属于队列首位，如果前头还有其他事件在等待，则不能按点执行，如果没有，则将其放入同步队列执行。具体事件循环机制，可以参考这篇文章：[动图学习-EventLoop](https://juejin.cn/post/6969028296893792286 \"https://juejin.cn/post/6969028296893792286\")\\n## 四、解决方案\\n1、在浏览器中实现一个 0ms 延时的定时器\\n可以参考如下代码（来自于国外的一篇博客，也是 MDN 推荐的方法），主要是使用了 postMessage 方法，异步的执行了回调函数，并且速度要比 setTimeout(0) 要快的多。具体比较可以参照原文：[setTimeout with a shorter delay](https://link.juejin.cn?target=https%3A%2F%2Fdbaron.org%2Flog%2F20100309-faster-timeouts \"https://dbaron.org/log/20100309-faster-timeouts\")\\n使用 setTimeout(0) 得到的时间：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8994a7da32e549cd9d06c34d1ac0bbc8~tplv-k3u1fbpfcp-zoom-1.image)\\n将 setTimeout 改成 setZeroTimeout 后得到的时间，时间几乎都在 0～1，至于为什么不是绝对的 0，猜测可能与性能有关，总的来说，时间确实缩短了：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dced5471b7fc422d9f9eb28259b26ce2~tplv-k3u1fbpfcp-zoom-1.image)\\n购物网站的秒杀活动\\n一般情况下，从服务器拿到倒数时间后，前端的执行倒计时程序持续运行，事实上，显示时间相比实际时间会越来越慢的\\n究其原因，倒计时通常是使用定时器实现，而 JS 的单线程特性使得同步任务执行过程中出现阻塞时，任务队列中的异步任务并不能及时执行，因此浏览器并不能保证在定时器设置的时间结束后代码总是被准时执行，从而造成了倒计时的偏差\\n一般的解决方法是前端定时向服务器发送请求获取最新的时间差来校准倒计时时间，和用户一直按 F5 刷新没啥区别，比较简单粗暴，下面的方法可以一定程度上解决这个问题，纯前端控制，不依赖于后端。源地址已忘\\n 五、使用 setTimeout 替代 setInterval\\n定时器指定的时间间隔，表示的是何时将定时器的代码添加到消息队列，而不是何时执行代码。所以真正何时执行代码的时间是不能保证的，它取决于何时被主线程的事件循环获取到，并执行\\n假设有 `setInterval(function, 100)`，它的执行可能是这样的：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/30346ef998214cabb6c95141b19ad25f~tplv-k3u1fbpfcp-zoom-1.image)\\n上图可见，setInterval 每隔 100ms 往队列中添加一个事件；100ms 后，添加 T1 定时器代码至队列中，主线程中还有任务在执行，所以等待，some event 执行结束后执行 T1 定时器代码；又过了100ms，T2定时器被添加到队列中，主线程还在执行 T1 代码，所以等待；又过了 100ms，理论上又要往队列里推一个定时器代码，但由于此时 T2 还在队列中，所以 T3 不会被添加，结果就是此时被跳过；然后，T1 定时器执行结束后马上执行了 T2 代码，所以并没有达到定时器间隔的效果\\n综上所述，serInterval 有两个问题：\\n-   可能多个定时器会连续执行（会导致后续的间隔误差）\\n-   某些间隔会被跳过（这么设计也可能是为了尽量避免第一个问题）\\n因而一般会使用 setTimeout 模拟 setInterval，来规避掉上面的缺点\\n```\\nsetTimeout(function fn() {\\n// do something\\nsetTimeout(fn, delay)\\n}, delay)\\n```\\n这样的话，在前一个定时器代码执行完成前，不会向队列中插入新的定时器（不会连续执行），而且保证了定时器间隔\\n注：有些说法，可能对当队列中存在定时器实例时，是否会跳过添加实例，存在质疑；还有的说法是，在 Node 环境中会跳过，在浏览器环境中会累加；不过我这边实测，不管在 Node 还是在 web 中，当队列中存在定时器实例时，都会跳过添加的；当然也有可能是浏览器版本或内核不同，表现不同，没有细测；感兴趣的小伙伴可以使用一下代码实测下，看是会一次性输出，还是会间隔性输出\\n**这边顺便一提，涉及到做动画的场景可能会使用定时器**\\n-   由于定时器的种种误差问题，以及固定时间间隔不一定与屏幕刷新时间相同，可能会引起丢帧；而且定时器在后台仍会继续执行，也会造成资源的浪费\\n-   一般情况下，还是推荐使用 requestAnimationFrame，RAF 重绘或回流（重排）的时间间隔是紧紧跟随浏览器的刷新频率的；并且在页面未激活时，该页面的屏幕刷新任务也会被暂停，当页面被激活时，任务会从上次停留的地方继续执行，这也就意味着将耗费更少的资源，提升了性能\\n### 总结\\n-   setTimeout 和 setInterval 都存在计时误差，不会严格按照既定时间执行\\n-   一般情况下，这些误差不会造成太大影响，只对于某些特殊场景，对时间要求比较严格的情况下，需要特殊处理\\n-   对于 setInterval，个人建议能不用尽量不用，使用 setTimeout 的嵌套实现，可以规避掉一些潜在问题的发生\\n'\n      },{\n        id: 10,\n        name: 'ZEROL',\n        day: '22',\n        category: 'JavaScript',\n        title: 'setTimeout 和 setInterval，你们两位同学注意点时间~ ',\n        intro: '你们两位同学注意点时间~',\n        imgsrc: require('../assets/image/ArticleImg2.webp'),\n        content:\n        '## 一、基本定义与用法 \\n### 1、定义\\n-   `setTimeout()`方法用于在指定的时间（单位毫秒）后执行回调函数或指定的一段代码\\n-   `setInterval()`方法可按照指定的时间间隔（单位毫秒）来调用回调函数或指定的一段代码\\n### 2、参数\\n-   第一个参数 function，必填，回调函数。或者是一段字符串代码，但是这种方式不建议使用，就和使用`eval()`一样，有安全风险；而且还有作用域问题（字符串会在全局作用域内被解释执行）\\n```\\nsetTimeout(\\'console.log(123);fn()\\', 2000)\\n```\\n-   第二个参数 delay，可选，单位是 ms，对于`setTimeout`是延迟时间，对于`setInterval`是间隔时间，默认都是 0\\n-   第三个参数 param1,param2,param3...，可选，是传递给回调函数的参数，不大常用\\n ```\\nsetTimeout(function (a, b) {\\nconsole.log(a, b)\\n}, 2000, \\'我是\\', \\'定时器\\')\\n```\\n### 3、返回值\\n-   返回一个 ID（数字），可以将这个 ID 传递给`clearTimeout()`或`clearInterval()`来取消执行\\n-   PS: `setTimeout()`和`setInterval()`共用一个编号池，技术上，`clearTimeout()`和`clearInterval()`可以互换使用，但是为了避免混淆，一般不这么做\\n## 二、setTimeout 和 setInterval 的实际表现\\n### 1、使用 setInterval 实现计时\\n```\\nconst startTime = new Date().getTime()\\nlet count = 0\\nconst interval = setInterval(function () {\\ncount++\\nconsole.log(new Date().getTime() - (startTime + count * 1000) + \\'ms\\')\\nif(count === 10){\\nclearInterval(interval);\\n}\\n}, 1000)\\n```\\n`new Date().getTime() - (startTime + count * 1000)`理想情况下应该是 0ms，然而事实并不是这样，而是存在着误差：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ba8397cf6a184ed6a32b285693cff3c0~tplv-k3u1fbpfcp-zoom-1.image)\\n### 2、使用 setTimeout 实现计时\\n```\\nconst startTime = new Date().getTime(), delay = 1000\\nlet count = 0\\nlet timer = setTimeout(doFunc, delay)\\nfunction doFunc(){\\ncount++\\nconsole.log(new Date().getTime() - (startTime + count * 1000) + \\'ms\\')\\nif(count < 10){\\ntimer = setTimeout(doFunc, delay)\\n}\\n}\\n```\\nsetTimeout 也同样存在着误差，而且时间越来越大（setTimeout 需要在同步代码执行完成后才重新开始计时）：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c59850b3ac2a475eb718b5492630d88e~tplv-k3u1fbpfcp-zoom-1.image)\\n## 三、为什么会出现误差\\n### 1、setTimeout 的最短延迟时间\\n`setTimeout`遵循的规范由 whatwg 来维护，在 [HTML Standard - 8.6 Timers](https://link.juejin.cn?target=https%3A%2F%2Fhtml.spec.whatwg.org%2Fmultipage%2Ftimers-and-user-prompts.html%23dom-settimeout \"https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-settimeout\") 中写到了定义定时器的详细步骤，其中有两条：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ffbfbab446fe494fb44c54181f48aa31~tplv-k3u1fbpfcp-zoom-1.image)\\n上面的意思就是说，如果设置的 timeout 小于 0，则设置为 0，如果嵌套的层级超过了 5 层（计时器嵌套），并且 timeout 小于 4ms，则设置 timeout 为 4ms。并且，在不同浏览器中出现这种最小延迟的情况有所不同\\n具体的源代码实现以及各大浏览器实现的不同，大家可以参考这篇文章：[为什么 setTimeout 有最小延时 4ms ？](https://link.juejin.cn?target=https%3A%2F%2Fwww.bruceyj.com%2Ffront-end-interview-summary%2Fsystem-design%2Fwhy-is-the-design%2F2-why-setTimeout-4ms.html \"https://www.bruceyj.com/front-end-interview-summary/system-design/why-is-the-design/2-why-setTimeout-4ms.html\")\\n这里只看结论，定时器本身的定义步骤是造成其出现误差的原因之一\\n### 2、setInterval 的最小间隔时间\\n在 HTML5 标准中，setInterval 的最小间隔为 10ms，虽然我在规范文档中并未找到其相关说明，但是经过实际测试，也确实存在最小间隔时间，例如以下代码：\\n```\\nlet startTime = new Date().getTime()\\nlet count = 0\\nconst interval = setInterval(function () {\\ncount++\\n console.log(new Date().getTime() - startTime + \\'ms\\')\\nstartTime = new Date().getTime()\\nif(count === 10) {\\nclearInterval(interval)\\n}\\n}, 0)\\n```\\n测试结果：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9bcffa807d384a7ab542fd1174186b12~tplv-k3u1fbpfcp-zoom-1.image)\\n虽然没有 10ms 那么大的间隔，但是间隔仍然存在，猜测具体的间隔时间是和浏览器实现以及设备性能有关，无论如何，间隔是确实存在的\\n另外，当使用 setInterval 时间间隔到点后，仅当队列中没有该定时器的任何其他代码实例时，才会将定时器的代码添加到队列中，如果有的话，则不会添加，造成堵塞，这个也与 JS 的事件循环有关\\n 未被激活的tabs的定时最小延迟 >= 1000ms\\n为了优化后台 tab 的加载损耗（以及降低耗电量），在未被激活的 tab 中定时器的最小延时限制为1s(1000ms)，具体时间在不同的浏览器实现中也有差别\\n  JS 的事件循环机制\\n`setTimeout`和`setInterval`中的时间并不是到点就立即执行，而是到点将其回调函数加入异步事件队列中，按照队列先进先出的性质，该回调函数到点之后是否能执行还得取决于是否属于队列首位，如果前头还有其他事件在等待，则不能按点执行，如果没有，则将其放入同步队列执行。具体事件循环机制，可以参考这篇文章：[动图学习-EventLoop](https://juejin.cn/post/6969028296893792286 \"https://juejin.cn/post/6969028296893792286\")\\n## 四、解决方案\\n1、在浏览器中实现一个 0ms 延时的定时器\\n可以参考如下代码（来自于国外的一篇博客，也是 MDN 推荐的方法），主要是使用了 postMessage 方法，异步的执行了回调函数，并且速度要比 setTimeout(0) 要快的多。具体比较可以参照原文：[setTimeout with a shorter delay](https://link.juejin.cn?target=https%3A%2F%2Fdbaron.org%2Flog%2F20100309-faster-timeouts \"https://dbaron.org/log/20100309-faster-timeouts\")\\n使用 setTimeout(0) 得到的时间：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8994a7da32e549cd9d06c34d1ac0bbc8~tplv-k3u1fbpfcp-zoom-1.image)\\n将 setTimeout 改成 setZeroTimeout 后得到的时间，时间几乎都在 0～1，至于为什么不是绝对的 0，猜测可能与性能有关，总的来说，时间确实缩短了：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dced5471b7fc422d9f9eb28259b26ce2~tplv-k3u1fbpfcp-zoom-1.image)\\n购物网站的秒杀活动\\n一般情况下，从服务器拿到倒数时间后，前端的执行倒计时程序持续运行，事实上，显示时间相比实际时间会越来越慢的\\n究其原因，倒计时通常是使用定时器实现，而 JS 的单线程特性使得同步任务执行过程中出现阻塞时，任务队列中的异步任务并不能及时执行，因此浏览器并不能保证在定时器设置的时间结束后代码总是被准时执行，从而造成了倒计时的偏差\\n一般的解决方法是前端定时向服务器发送请求获取最新的时间差来校准倒计时时间，和用户一直按 F5 刷新没啥区别，比较简单粗暴，下面的方法可以一定程度上解决这个问题，纯前端控制，不依赖于后端。源地址已忘\\n 五、使用 setTimeout 替代 setInterval\\n定时器指定的时间间隔，表示的是何时将定时器的代码添加到消息队列，而不是何时执行代码。所以真正何时执行代码的时间是不能保证的，它取决于何时被主线程的事件循环获取到，并执行\\n假设有 `setInterval(function, 100)`，它的执行可能是这样的：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/30346ef998214cabb6c95141b19ad25f~tplv-k3u1fbpfcp-zoom-1.image)\\n上图可见，setInterval 每隔 100ms 往队列中添加一个事件；100ms 后，添加 T1 定时器代码至队列中，主线程中还有任务在执行，所以等待，some event 执行结束后执行 T1 定时器代码；又过了100ms，T2定时器被添加到队列中，主线程还在执行 T1 代码，所以等待；又过了 100ms，理论上又要往队列里推一个定时器代码，但由于此时 T2 还在队列中，所以 T3 不会被添加，结果就是此时被跳过；然后，T1 定时器执行结束后马上执行了 T2 代码，所以并没有达到定时器间隔的效果\\n综上所述，serInterval 有两个问题：\\n-   可能多个定时器会连续执行（会导致后续的间隔误差）\\n-   某些间隔会被跳过（这么设计也可能是为了尽量避免第一个问题）\\n因而一般会使用 setTimeout 模拟 setInterval，来规避掉上面的缺点\\n```\\nsetTimeout(function fn() {\\n// do something\\nsetTimeout(fn, delay)\\n}, delay)\\n```\\n这样的话，在前一个定时器代码执行完成前，不会向队列中插入新的定时器（不会连续执行），而且保证了定时器间隔\\n注：有些说法，可能对当队列中存在定时器实例时，是否会跳过添加实例，存在质疑；还有的说法是，在 Node 环境中会跳过，在浏览器环境中会累加；不过我这边实测，不管在 Node 还是在 web 中，当队列中存在定时器实例时，都会跳过添加的；当然也有可能是浏览器版本或内核不同，表现不同，没有细测；感兴趣的小伙伴可以使用一下代码实测下，看是会一次性输出，还是会间隔性输出\\n**这边顺便一提，涉及到做动画的场景可能会使用定时器**\\n-   由于定时器的种种误差问题，以及固定时间间隔不一定与屏幕刷新时间相同，可能会引起丢帧；而且定时器在后台仍会继续执行，也会造成资源的浪费\\n-   一般情况下，还是推荐使用 requestAnimationFrame，RAF 重绘或回流（重排）的时间间隔是紧紧跟随浏览器的刷新频率的；并且在页面未激活时，该页面的屏幕刷新任务也会被暂停，当页面被激活时，任务会从上次停留的地方继续执行，这也就意味着将耗费更少的资源，提升了性能\\n### 总结\\n-   setTimeout 和 setInterval 都存在计时误差，不会严格按照既定时间执行\\n-   一般情况下，这些误差不会造成太大影响，只对于某些特殊场景，对时间要求比较严格的情况下，需要特殊处理\\n-   对于 setInterval，个人建议能不用尽量不用，使用 setTimeout 的嵌套实现，可以规避掉一些潜在问题的发生\\n'\n      },{\n        id: 11,\n        name: '望舟',\n        day: '1',\n        category: '面试',\n        title: '让“作用域和闭包”说人话！ ',\n        intro: '让作用域和闭包说人话，面试时候有话可讲！',\n        imgsrc: require('../assets/image/ArticleImg1.webp'),\n        content:\n        '# 一、作用域是什么\\n作用域与编译原理息息相关，但是我们暂时还不用管编译原理的复杂过程，它的作用可以简单看下面这张图： \\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2dc72d14948848159ed01ab7af90a090~tplv-k3u1fbpfcp-zoom-1.image)\\n简单来说就是“我得知道这些变量在哪里，不然我怎么取到它们再进行下一步操作呀！”\\n***\\nJavaScript的编译发生代码执行前的几微妙内，并不是发生在构建之前。\\n引擎根据作用域进行变量查询，存在两种影响结果的查找方式——LHS/RHS。\\nRHS（谁是源头【获取变量的值】）：需要找到这个变量的值才可以进行下一步操作。如console.log(a)，即得到a的值后执行操作。查询操作失败报ReferenceError异常，不合理操作报TypeError异常。\\nLHS（目标是谁【对变量赋值】）：为操作找到一个容器，如var a = 2，即找到一个a，给它赋值为2。查询操作失败在非严格模式下会创建变量。*这个特性可以解释变量提升这个东西，也就是“赋值可以跑到声明前”。为了完成赋值这个动作，我可以自己声明一下嘛。现在可以暂时放一下这句话，等到提升时再想。*\\n> ~~不推荐使用with/eval~~\\n# 二、函数作用域和块作用域\\n> 函数作用域含义：属于这个函数的全部变量都可以在整个函数的范围内使用或复用。\\nfunction 开头的就是函数声明，其余则是函数表达式。 **正常函数声明被绑定在作用域中，函数表达式则绑定在函数自身中。** 这句话不理解可以先埋下一个伏笔，等下面看到闭包的时候再回头看会回味无穷。\\n```\\n// 函数声明\\nfunction foo(){\\nvar a = 2;\\nconsole.log(a);\\n}\\nfoo()\\n// 函数表达式\\n(function foo(){\\nvar a = 2;\\nconsole.log(a);\\n})()\\nvar a = 2;\\n(function IIFE(global){\\nvar a = 3;\\nconsole.log(a, global.a)// 3,2\\n})(window)\\n// 函数表达式\\nvar foo = function(){\\nconsole.log(1)\\n}\\n```\\n那么怎么搞出一个块作用域呢？块作用域的声明方式有：\\n1.  with 仅在with声明中有效\\n1.  try/catch catch内的变量仅在catch内使用\\n1.  let 劫持所在块的作用域\\n1.  const 与let类似，变量不可修改\\n块作用域的优势：1. 有利于垃圾回收（块作用域内代码执行后可以直接回收）；2. 解决 var 循环问题。\\n# 三、提升\\n> 没有赋值只有声明的变量是会报错 undefined，提升也只是提升了个声明而已；再换句话说，赋值可以跑在声明的前面。光说不干假把式~\\n第一段代码可以顺利执行，因为对于 a 的声明会提升到最顶部，因此在作用域内能够找到a。但是这第二段代码中，`var a = 2;`会被拆分为两步，第一步是声明 a ，然后就执行了输出语句，还没有进行赋值呢，因此会出现报错。 这个例子恰好说明了“赋值可以跑在声明前面”。\\n***\\n例二：\\n```\\nfoo()\\nfunction foo(){\\nconsole.log(a); //undefined\\nvar a;\\n}\\n```\\n这里也是和例一一样，a会提升声明（作用域在foo内），但是只有声明，没有赋值，所以仍然会报错。\\n***\\n同样是声明提升，***函数的优先级高于变量***。这里的例子我们可以把函数表达式当作是一个变量的声明，相当于给foo2 这个变量赋值了一个函数。那么由于函数的优先级更高，这个foo2无法覆盖之前的foo1，所以输出仍然是1。\\n# 四、闭包\\n## 1. 闭包是什么\\n首先我们得知道闭包是什么，来看看书里是怎么说的：\\n> 函数在 定义时的词法作用域以外的地方 被调用，闭包使得函数可以继续访问定义时的词法作用域。\\n这句话的形容使闭包看起来像一种_访问作用域的方法_。我们继续看下一句：\\n> 无论通过何种手段将内部函数传递到所在的词法作用域以外，它都会持有对原始定义作用域的引用，无论在何处执行这个函数都会使用闭包。\\n**因此，不应该把比较理解成一种现象或者原理，应该作为一种工具方便我们使用来解决 JavaScript 中的一些问题。这是一个重要的理解点。** 用自己的话再来说一下闭包是什么吧：\\n一个函数（A）引用着另一个函数的变量（B），即使 B 已经顺利执行结束了也不会被回收，因为 A 还引用着呢，所以 B 的各种变量也要被保存。\\n'\n      },{\n        id:12,\n        name: '望舟',\n        day: '1',\n        category: '面试',\n        title: '让“作用域和闭包”说人话！ ',\n        intro: '让作用域和闭包说人话，面试时候有话可讲！',\n        imgsrc: require('../assets/image/ArticleImg1.webp'),\n        content:\n        '# 一、作用域是什么\\n作用域与编译原理息息相关，但是我们暂时还不用管编译原理的复杂过程，它的作用可以简单看下面这张图： \\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2dc72d14948848159ed01ab7af90a090~tplv-k3u1fbpfcp-zoom-1.image)\\n简单来说就是“我得知道这些变量在哪里，不然我怎么取到它们再进行下一步操作呀！”\\n***\\nJavaScript的编译发生代码执行前的几微妙内，并不是发生在构建之前。\\n引擎根据作用域进行变量查询，存在两种影响结果的查找方式——LHS/RHS。\\nRHS（谁是源头【获取变量的值】）：需要找到这个变量的值才可以进行下一步操作。如console.log(a)，即得到a的值后执行操作。查询操作失败报ReferenceError异常，不合理操作报TypeError异常。\\nLHS（目标是谁【对变量赋值】）：为操作找到一个容器，如var a = 2，即找到一个a，给它赋值为2。查询操作失败在非严格模式下会创建变量。*这个特性可以解释变量提升这个东西，也就是“赋值可以跑到声明前”。为了完成赋值这个动作，我可以自己声明一下嘛。现在可以暂时放一下这句话，等到提升时再想。*\\n> ~~不推荐使用with/eval~~\\n# 二、函数作用域和块作用域\\n> 函数作用域含义：属于这个函数的全部变量都可以在整个函数的范围内使用或复用。\\nfunction 开头的就是函数声明，其余则是函数表达式。 **正常函数声明被绑定在作用域中，函数表达式则绑定在函数自身中。** 这句话不理解可以先埋下一个伏笔，等下面看到闭包的时候再回头看会回味无穷。\\n```\\n// 函数声明\\nfunction foo(){\\nvar a = 2;\\nconsole.log(a);\\n}\\nfoo()\\n// 函数表达式\\n(function foo(){\\nvar a = 2;\\nconsole.log(a);\\n})()\\nvar a = 2;\\n(function IIFE(global){\\nvar a = 3;\\nconsole.log(a, global.a)// 3,2\\n})(window)\\n// 函数表达式\\nvar foo = function(){\\nconsole.log(1)\\n}\\n```\\n那么怎么搞出一个块作用域呢？块作用域的声明方式有：\\n1.  with 仅在with声明中有效\\n1.  try/catch catch内的变量仅在catch内使用\\n1.  let 劫持所在块的作用域\\n1.  const 与let类似，变量不可修改\\n块作用域的优势：1. 有利于垃圾回收（块作用域内代码执行后可以直接回收）；2. 解决 var 循环问题。\\n# 三、提升\\n> 没有赋值只有声明的变量是会报错 undefined，提升也只是提升了个声明而已；再换句话说，赋值可以跑在声明的前面。光说不干假把式~\\n第一段代码可以顺利执行，因为对于 a 的声明会提升到最顶部，因此在作用域内能够找到a。但是这第二段代码中，`var a = 2;`会被拆分为两步，第一步是声明 a ，然后就执行了输出语句，还没有进行赋值呢，因此会出现报错。 这个例子恰好说明了“赋值可以跑在声明前面”。\\n***\\n例二：\\n```\\nfoo()\\nfunction foo(){\\nconsole.log(a); //undefined\\nvar a;\\n}\\n```\\n这里也是和例一一样，a会提升声明（作用域在foo内），但是只有声明，没有赋值，所以仍然会报错。\\n***\\n同样是声明提升，***函数的优先级高于变量***。这里的例子我们可以把函数表达式当作是一个变量的声明，相当于给foo2 这个变量赋值了一个函数。那么由于函数的优先级更高，这个foo2无法覆盖之前的foo1，所以输出仍然是1。\\n# 四、闭包\\n## 1. 闭包是什么\\n首先我们得知道闭包是什么，来看看书里是怎么说的：\\n> 函数在 定义时的词法作用域以外的地方 被调用，闭包使得函数可以继续访问定义时的词法作用域。\\n这句话的形容使闭包看起来像一种_访问作用域的方法_。我们继续看下一句：\\n> 无论通过何种手段将内部函数传递到所在的词法作用域以外，它都会持有对原始定义作用域的引用，无论在何处执行这个函数都会使用闭包。\\n**因此，不应该把比较理解成一种现象或者原理，应该作为一种工具方便我们使用来解决 JavaScript 中的一些问题。这是一个重要的理解点。** 用自己的话再来说一下闭包是什么吧：\\n一个函数（A）引用着另一个函数的变量（B），即使 B 已经顺利执行结束了也不会被回收，因为 A 还引用着呢，所以 B 的各种变量也要被保存。\\n'\n      },{\n        id: 13,\n        name: 'ZEROL',\n        day: '22',\n        category: 'JavaScript',\n        title: 'setTimeout 和 setInterval，你们两位同学注意点时间~ ',\n        intro: '你们两位同学注意点时间~',\n        imgsrc: require('../assets/image/ArticleImg2.webp'),\n        content:\n        '## 一、基本定义与用法 \\n### 1、定义\\n-   `setTimeout()`方法用于在指定的时间（单位毫秒）后执行回调函数或指定的一段代码\\n-   `setInterval()`方法可按照指定的时间间隔（单位毫秒）来调用回调函数或指定的一段代码\\n### 2、参数\\n-   第一个参数 function，必填，回调函数。或者是一段字符串代码，但是这种方式不建议使用，就和使用`eval()`一样，有安全风险；而且还有作用域问题（字符串会在全局作用域内被解释执行）\\n```\\nsetTimeout(\\'console.log(123);fn()\\', 2000)\\n```\\n-   第二个参数 delay，可选，单位是 ms，对于`setTimeout`是延迟时间，对于`setInterval`是间隔时间，默认都是 0\\n-   第三个参数 param1,param2,param3...，可选，是传递给回调函数的参数，不大常用\\n ```\\nsetTimeout(function (a, b) {\\nconsole.log(a, b)\\n}, 2000, \\'我是\\', \\'定时器\\')\\n```\\n### 3、返回值\\n-   返回一个 ID（数字），可以将这个 ID 传递给`clearTimeout()`或`clearInterval()`来取消执行\\n-   PS: `setTimeout()`和`setInterval()`共用一个编号池，技术上，`clearTimeout()`和`clearInterval()`可以互换使用，但是为了避免混淆，一般不这么做\\n## 二、setTimeout 和 setInterval 的实际表现\\n### 1、使用 setInterval 实现计时\\n```\\nconst startTime = new Date().getTime()\\nlet count = 0\\nconst interval = setInterval(function () {\\ncount++\\nconsole.log(new Date().getTime() - (startTime + count * 1000) + \\'ms\\')\\nif(count === 10){\\nclearInterval(interval);\\n}\\n}, 1000)\\n```\\n`new Date().getTime() - (startTime + count * 1000)`理想情况下应该是 0ms，然而事实并不是这样，而是存在着误差：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ba8397cf6a184ed6a32b285693cff3c0~tplv-k3u1fbpfcp-zoom-1.image)\\n### 2、使用 setTimeout 实现计时\\n```\\nconst startTime = new Date().getTime(), delay = 1000\\nlet count = 0\\nlet timer = setTimeout(doFunc, delay)\\nfunction doFunc(){\\ncount++\\nconsole.log(new Date().getTime() - (startTime + count * 1000) + \\'ms\\')\\nif(count < 10){\\ntimer = setTimeout(doFunc, delay)\\n}\\n}\\n```\\nsetTimeout 也同样存在着误差，而且时间越来越大（setTimeout 需要在同步代码执行完成后才重新开始计时）：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c59850b3ac2a475eb718b5492630d88e~tplv-k3u1fbpfcp-zoom-1.image)\\n## 三、为什么会出现误差\\n### 1、setTimeout 的最短延迟时间\\n`setTimeout`遵循的规范由 whatwg 来维护，在 [HTML Standard - 8.6 Timers](https://link.juejin.cn?target=https%3A%2F%2Fhtml.spec.whatwg.org%2Fmultipage%2Ftimers-and-user-prompts.html%23dom-settimeout \"https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-settimeout\") 中写到了定义定时器的详细步骤，其中有两条：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ffbfbab446fe494fb44c54181f48aa31~tplv-k3u1fbpfcp-zoom-1.image)\\n上面的意思就是说，如果设置的 timeout 小于 0，则设置为 0，如果嵌套的层级超过了 5 层（计时器嵌套），并且 timeout 小于 4ms，则设置 timeout 为 4ms。并且，在不同浏览器中出现这种最小延迟的情况有所不同\\n具体的源代码实现以及各大浏览器实现的不同，大家可以参考这篇文章：[为什么 setTimeout 有最小延时 4ms ？](https://link.juejin.cn?target=https%3A%2F%2Fwww.bruceyj.com%2Ffront-end-interview-summary%2Fsystem-design%2Fwhy-is-the-design%2F2-why-setTimeout-4ms.html \"https://www.bruceyj.com/front-end-interview-summary/system-design/why-is-the-design/2-why-setTimeout-4ms.html\")\\n这里只看结论，定时器本身的定义步骤是造成其出现误差的原因之一\\n### 2、setInterval 的最小间隔时间\\n在 HTML5 标准中，setInterval 的最小间隔为 10ms，虽然我在规范文档中并未找到其相关说明，但是经过实际测试，也确实存在最小间隔时间，例如以下代码：\\n```\\nlet startTime = new Date().getTime()\\nlet count = 0\\nconst interval = setInterval(function () {\\ncount++\\n console.log(new Date().getTime() - startTime + \\'ms\\')\\nstartTime = new Date().getTime()\\nif(count === 10) {\\nclearInterval(interval)\\n}\\n}, 0)\\n```\\n测试结果：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9bcffa807d384a7ab542fd1174186b12~tplv-k3u1fbpfcp-zoom-1.image)\\n虽然没有 10ms 那么大的间隔，但是间隔仍然存在，猜测具体的间隔时间是和浏览器实现以及设备性能有关，无论如何，间隔是确实存在的\\n另外，当使用 setInterval 时间间隔到点后，仅当队列中没有该定时器的任何其他代码实例时，才会将定时器的代码添加到队列中，如果有的话，则不会添加，造成堵塞，这个也与 JS 的事件循环有关\\n 未被激活的tabs的定时最小延迟 >= 1000ms\\n为了优化后台 tab 的加载损耗（以及降低耗电量），在未被激活的 tab 中定时器的最小延时限制为1s(1000ms)，具体时间在不同的浏览器实现中也有差别\\n  JS 的事件循环机制\\n`setTimeout`和`setInterval`中的时间并不是到点就立即执行，而是到点将其回调函数加入异步事件队列中，按照队列先进先出的性质，该回调函数到点之后是否能执行还得取决于是否属于队列首位，如果前头还有其他事件在等待，则不能按点执行，如果没有，则将其放入同步队列执行。具体事件循环机制，可以参考这篇文章：[动图学习-EventLoop](https://juejin.cn/post/6969028296893792286 \"https://juejin.cn/post/6969028296893792286\")\\n## 四、解决方案\\n1、在浏览器中实现一个 0ms 延时的定时器\\n可以参考如下代码（来自于国外的一篇博客，也是 MDN 推荐的方法），主要是使用了 postMessage 方法，异步的执行了回调函数，并且速度要比 setTimeout(0) 要快的多。具体比较可以参照原文：[setTimeout with a shorter delay](https://link.juejin.cn?target=https%3A%2F%2Fdbaron.org%2Flog%2F20100309-faster-timeouts \"https://dbaron.org/log/20100309-faster-timeouts\")\\n使用 setTimeout(0) 得到的时间：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8994a7da32e549cd9d06c34d1ac0bbc8~tplv-k3u1fbpfcp-zoom-1.image)\\n将 setTimeout 改成 setZeroTimeout 后得到的时间，时间几乎都在 0～1，至于为什么不是绝对的 0，猜测可能与性能有关，总的来说，时间确实缩短了：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dced5471b7fc422d9f9eb28259b26ce2~tplv-k3u1fbpfcp-zoom-1.image)\\n购物网站的秒杀活动\\n一般情况下，从服务器拿到倒数时间后，前端的执行倒计时程序持续运行，事实上，显示时间相比实际时间会越来越慢的\\n究其原因，倒计时通常是使用定时器实现，而 JS 的单线程特性使得同步任务执行过程中出现阻塞时，任务队列中的异步任务并不能及时执行，因此浏览器并不能保证在定时器设置的时间结束后代码总是被准时执行，从而造成了倒计时的偏差\\n一般的解决方法是前端定时向服务器发送请求获取最新的时间差来校准倒计时时间，和用户一直按 F5 刷新没啥区别，比较简单粗暴，下面的方法可以一定程度上解决这个问题，纯前端控制，不依赖于后端。源地址已忘\\n 五、使用 setTimeout 替代 setInterval\\n定时器指定的时间间隔，表示的是何时将定时器的代码添加到消息队列，而不是何时执行代码。所以真正何时执行代码的时间是不能保证的，它取决于何时被主线程的事件循环获取到，并执行\\n假设有 `setInterval(function, 100)`，它的执行可能是这样的：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/30346ef998214cabb6c95141b19ad25f~tplv-k3u1fbpfcp-zoom-1.image)\\n上图可见，setInterval 每隔 100ms 往队列中添加一个事件；100ms 后，添加 T1 定时器代码至队列中，主线程中还有任务在执行，所以等待，some event 执行结束后执行 T1 定时器代码；又过了100ms，T2定时器被添加到队列中，主线程还在执行 T1 代码，所以等待；又过了 100ms，理论上又要往队列里推一个定时器代码，但由于此时 T2 还在队列中，所以 T3 不会被添加，结果就是此时被跳过；然后，T1 定时器执行结束后马上执行了 T2 代码，所以并没有达到定时器间隔的效果\\n综上所述，serInterval 有两个问题：\\n-   可能多个定时器会连续执行（会导致后续的间隔误差）\\n-   某些间隔会被跳过（这么设计也可能是为了尽量避免第一个问题）\\n因而一般会使用 setTimeout 模拟 setInterval，来规避掉上面的缺点\\n```\\nsetTimeout(function fn() {\\n// do something\\nsetTimeout(fn, delay)\\n}, delay)\\n```\\n这样的话，在前一个定时器代码执行完成前，不会向队列中插入新的定时器（不会连续执行），而且保证了定时器间隔\\n注：有些说法，可能对当队列中存在定时器实例时，是否会跳过添加实例，存在质疑；还有的说法是，在 Node 环境中会跳过，在浏览器环境中会累加；不过我这边实测，不管在 Node 还是在 web 中，当队列中存在定时器实例时，都会跳过添加的；当然也有可能是浏览器版本或内核不同，表现不同，没有细测；感兴趣的小伙伴可以使用一下代码实测下，看是会一次性输出，还是会间隔性输出\\n**这边顺便一提，涉及到做动画的场景可能会使用定时器**\\n-   由于定时器的种种误差问题，以及固定时间间隔不一定与屏幕刷新时间相同，可能会引起丢帧；而且定时器在后台仍会继续执行，也会造成资源的浪费\\n-   一般情况下，还是推荐使用 requestAnimationFrame，RAF 重绘或回流（重排）的时间间隔是紧紧跟随浏览器的刷新频率的；并且在页面未激活时，该页面的屏幕刷新任务也会被暂停，当页面被激活时，任务会从上次停留的地方继续执行，这也就意味着将耗费更少的资源，提升了性能\\n### 总结\\n-   setTimeout 和 setInterval 都存在计时误差，不会严格按照既定时间执行\\n-   一般情况下，这些误差不会造成太大影响，只对于某些特殊场景，对时间要求比较严格的情况下，需要特殊处理\\n-   对于 setInterval，个人建议能不用尽量不用，使用 setTimeout 的嵌套实现，可以规避掉一些潜在问题的发生\\n'\n      },{\n        id: 14,\n        name: '望舟',\n        day: '1',\n        category: '面试',\n        title: '让“作用域和闭包”说人话！ ',\n        intro: '让作用域和闭包说人话，面试时候有话可讲！',\n        imgsrc: require('../assets/image/ArticleImg1.webp'),\n        content:\n        '# 一、作用域是什么\\n作用域与编译原理息息相关，但是我们暂时还不用管编译原理的复杂过程，它的作用可以简单看下面这张图： \\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2dc72d14948848159ed01ab7af90a090~tplv-k3u1fbpfcp-zoom-1.image)\\n简单来说就是“我得知道这些变量在哪里，不然我怎么取到它们再进行下一步操作呀！”\\n***\\nJavaScript的编译发生代码执行前的几微妙内，并不是发生在构建之前。\\n引擎根据作用域进行变量查询，存在两种影响结果的查找方式——LHS/RHS。\\nRHS（谁是源头【获取变量的值】）：需要找到这个变量的值才可以进行下一步操作。如console.log(a)，即得到a的值后执行操作。查询操作失败报ReferenceError异常，不合理操作报TypeError异常。\\nLHS（目标是谁【对变量赋值】）：为操作找到一个容器，如var a = 2，即找到一个a，给它赋值为2。查询操作失败在非严格模式下会创建变量。*这个特性可以解释变量提升这个东西，也就是“赋值可以跑到声明前”。为了完成赋值这个动作，我可以自己声明一下嘛。现在可以暂时放一下这句话，等到提升时再想。*\\n> ~~不推荐使用with/eval~~\\n# 二、函数作用域和块作用域\\n> 函数作用域含义：属于这个函数的全部变量都可以在整个函数的范围内使用或复用。\\nfunction 开头的就是函数声明，其余则是函数表达式。 **正常函数声明被绑定在作用域中，函数表达式则绑定在函数自身中。** 这句话不理解可以先埋下一个伏笔，等下面看到闭包的时候再回头看会回味无穷。\\n```\\n// 函数声明\\nfunction foo(){\\nvar a = 2;\\nconsole.log(a);\\n}\\nfoo()\\n// 函数表达式\\n(function foo(){\\nvar a = 2;\\nconsole.log(a);\\n})()\\nvar a = 2;\\n(function IIFE(global){\\nvar a = 3;\\nconsole.log(a, global.a)// 3,2\\n})(window)\\n// 函数表达式\\nvar foo = function(){\\nconsole.log(1)\\n}\\n```\\n那么怎么搞出一个块作用域呢？块作用域的声明方式有：\\n1.  with 仅在with声明中有效\\n1.  try/catch catch内的变量仅在catch内使用\\n1.  let 劫持所在块的作用域\\n1.  const 与let类似，变量不可修改\\n块作用域的优势：1. 有利于垃圾回收（块作用域内代码执行后可以直接回收）；2. 解决 var 循环问题。\\n# 三、提升\\n> 没有赋值只有声明的变量是会报错 undefined，提升也只是提升了个声明而已；再换句话说，赋值可以跑在声明的前面。光说不干假把式~\\n第一段代码可以顺利执行，因为对于 a 的声明会提升到最顶部，因此在作用域内能够找到a。但是这第二段代码中，`var a = 2;`会被拆分为两步，第一步是声明 a ，然后就执行了输出语句，还没有进行赋值呢，因此会出现报错。 这个例子恰好说明了“赋值可以跑在声明前面”。\\n***\\n例二：\\n```\\nfoo()\\nfunction foo(){\\nconsole.log(a); //undefined\\nvar a;\\n}\\n```\\n这里也是和例一一样，a会提升声明（作用域在foo内），但是只有声明，没有赋值，所以仍然会报错。\\n***\\n同样是声明提升，***函数的优先级高于变量***。这里的例子我们可以把函数表达式当作是一个变量的声明，相当于给foo2 这个变量赋值了一个函数。那么由于函数的优先级更高，这个foo2无法覆盖之前的foo1，所以输出仍然是1。\\n# 四、闭包\\n## 1. 闭包是什么\\n首先我们得知道闭包是什么，来看看书里是怎么说的：\\n> 函数在 定义时的词法作用域以外的地方 被调用，闭包使得函数可以继续访问定义时的词法作用域。\\n这句话的形容使闭包看起来像一种_访问作用域的方法_。我们继续看下一句：\\n> 无论通过何种手段将内部函数传递到所在的词法作用域以外，它都会持有对原始定义作用域的引用，无论在何处执行这个函数都会使用闭包。\\n**因此，不应该把比较理解成一种现象或者原理，应该作为一种工具方便我们使用来解决 JavaScript 中的一些问题。这是一个重要的理解点。** 用自己的话再来说一下闭包是什么吧：\\n一个函数（A）引用着另一个函数的变量（B），即使 B 已经顺利执行结束了也不会被回收，因为 A 还引用着呢，所以 B 的各种变量也要被保存。\\n'\n      },{\n        id: 15,\n        name: 'ZEROL',\n        day: '22',\n        category: 'JavaScript',\n        title: 'setTimeout 和 setInterval，你们两位同学注意点时间~ ',\n        intro: '你们两位同学注意点时间~',\n        imgsrc: require('../assets/image/ArticleImg2.webp'),\n        content:\n        '## 一、基本定义与用法 \\n### 1、定义\\n-   `setTimeout()`方法用于在指定的时间（单位毫秒）后执行回调函数或指定的一段代码\\n-   `setInterval()`方法可按照指定的时间间隔（单位毫秒）来调用回调函数或指定的一段代码\\n### 2、参数\\n-   第一个参数 function，必填，回调函数。或者是一段字符串代码，但是这种方式不建议使用，就和使用`eval()`一样，有安全风险；而且还有作用域问题（字符串会在全局作用域内被解释执行）\\n```\\nsetTimeout(\\'console.log(123);fn()\\', 2000)\\n```\\n-   第二个参数 delay，可选，单位是 ms，对于`setTimeout`是延迟时间，对于`setInterval`是间隔时间，默认都是 0\\n-   第三个参数 param1,param2,param3...，可选，是传递给回调函数的参数，不大常用\\n ```\\nsetTimeout(function (a, b) {\\nconsole.log(a, b)\\n}, 2000, \\'我是\\', \\'定时器\\')\\n```\\n### 3、返回值\\n-   返回一个 ID（数字），可以将这个 ID 传递给`clearTimeout()`或`clearInterval()`来取消执行\\n-   PS: `setTimeout()`和`setInterval()`共用一个编号池，技术上，`clearTimeout()`和`clearInterval()`可以互换使用，但是为了避免混淆，一般不这么做\\n## 二、setTimeout 和 setInterval 的实际表现\\n### 1、使用 setInterval 实现计时\\n```\\nconst startTime = new Date().getTime()\\nlet count = 0\\nconst interval = setInterval(function () {\\ncount++\\nconsole.log(new Date().getTime() - (startTime + count * 1000) + \\'ms\\')\\nif(count === 10){\\nclearInterval(interval);\\n}\\n}, 1000)\\n```\\n`new Date().getTime() - (startTime + count * 1000)`理想情况下应该是 0ms，然而事实并不是这样，而是存在着误差：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ba8397cf6a184ed6a32b285693cff3c0~tplv-k3u1fbpfcp-zoom-1.image)\\n### 2、使用 setTimeout 实现计时\\n```\\nconst startTime = new Date().getTime(), delay = 1000\\nlet count = 0\\nlet timer = setTimeout(doFunc, delay)\\nfunction doFunc(){\\ncount++\\nconsole.log(new Date().getTime() - (startTime + count * 1000) + \\'ms\\')\\nif(count < 10){\\ntimer = setTimeout(doFunc, delay)\\n}\\n}\\n```\\nsetTimeout 也同样存在着误差，而且时间越来越大（setTimeout 需要在同步代码执行完成后才重新开始计时）：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c59850b3ac2a475eb718b5492630d88e~tplv-k3u1fbpfcp-zoom-1.image)\\n## 三、为什么会出现误差\\n### 1、setTimeout 的最短延迟时间\\n`setTimeout`遵循的规范由 whatwg 来维护，在 [HTML Standard - 8.6 Timers](https://link.juejin.cn?target=https%3A%2F%2Fhtml.spec.whatwg.org%2Fmultipage%2Ftimers-and-user-prompts.html%23dom-settimeout \"https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-settimeout\") 中写到了定义定时器的详细步骤，其中有两条：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ffbfbab446fe494fb44c54181f48aa31~tplv-k3u1fbpfcp-zoom-1.image)\\n上面的意思就是说，如果设置的 timeout 小于 0，则设置为 0，如果嵌套的层级超过了 5 层（计时器嵌套），并且 timeout 小于 4ms，则设置 timeout 为 4ms。并且，在不同浏览器中出现这种最小延迟的情况有所不同\\n具体的源代码实现以及各大浏览器实现的不同，大家可以参考这篇文章：[为什么 setTimeout 有最小延时 4ms ？](https://link.juejin.cn?target=https%3A%2F%2Fwww.bruceyj.com%2Ffront-end-interview-summary%2Fsystem-design%2Fwhy-is-the-design%2F2-why-setTimeout-4ms.html \"https://www.bruceyj.com/front-end-interview-summary/system-design/why-is-the-design/2-why-setTimeout-4ms.html\")\\n这里只看结论，定时器本身的定义步骤是造成其出现误差的原因之一\\n### 2、setInterval 的最小间隔时间\\n在 HTML5 标准中，setInterval 的最小间隔为 10ms，虽然我在规范文档中并未找到其相关说明，但是经过实际测试，也确实存在最小间隔时间，例如以下代码：\\n```\\nlet startTime = new Date().getTime()\\nlet count = 0\\nconst interval = setInterval(function () {\\ncount++\\n console.log(new Date().getTime() - startTime + \\'ms\\')\\nstartTime = new Date().getTime()\\nif(count === 10) {\\nclearInterval(interval)\\n}\\n}, 0)\\n```\\n测试结果：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9bcffa807d384a7ab542fd1174186b12~tplv-k3u1fbpfcp-zoom-1.image)\\n虽然没有 10ms 那么大的间隔，但是间隔仍然存在，猜测具体的间隔时间是和浏览器实现以及设备性能有关，无论如何，间隔是确实存在的\\n另外，当使用 setInterval 时间间隔到点后，仅当队列中没有该定时器的任何其他代码实例时，才会将定时器的代码添加到队列中，如果有的话，则不会添加，造成堵塞，这个也与 JS 的事件循环有关\\n 未被激活的tabs的定时最小延迟 >= 1000ms\\n为了优化后台 tab 的加载损耗（以及降低耗电量），在未被激活的 tab 中定时器的最小延时限制为1s(1000ms)，具体时间在不同的浏览器实现中也有差别\\n  JS 的事件循环机制\\n`setTimeout`和`setInterval`中的时间并不是到点就立即执行，而是到点将其回调函数加入异步事件队列中，按照队列先进先出的性质，该回调函数到点之后是否能执行还得取决于是否属于队列首位，如果前头还有其他事件在等待，则不能按点执行，如果没有，则将其放入同步队列执行。具体事件循环机制，可以参考这篇文章：[动图学习-EventLoop](https://juejin.cn/post/6969028296893792286 \"https://juejin.cn/post/6969028296893792286\")\\n## 四、解决方案\\n1、在浏览器中实现一个 0ms 延时的定时器\\n可以参考如下代码（来自于国外的一篇博客，也是 MDN 推荐的方法），主要是使用了 postMessage 方法，异步的执行了回调函数，并且速度要比 setTimeout(0) 要快的多。具体比较可以参照原文：[setTimeout with a shorter delay](https://link.juejin.cn?target=https%3A%2F%2Fdbaron.org%2Flog%2F20100309-faster-timeouts \"https://dbaron.org/log/20100309-faster-timeouts\")\\n使用 setTimeout(0) 得到的时间：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8994a7da32e549cd9d06c34d1ac0bbc8~tplv-k3u1fbpfcp-zoom-1.image)\\n将 setTimeout 改成 setZeroTimeout 后得到的时间，时间几乎都在 0～1，至于为什么不是绝对的 0，猜测可能与性能有关，总的来说，时间确实缩短了：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dced5471b7fc422d9f9eb28259b26ce2~tplv-k3u1fbpfcp-zoom-1.image)\\n购物网站的秒杀活动\\n一般情况下，从服务器拿到倒数时间后，前端的执行倒计时程序持续运行，事实上，显示时间相比实际时间会越来越慢的\\n究其原因，倒计时通常是使用定时器实现，而 JS 的单线程特性使得同步任务执行过程中出现阻塞时，任务队列中的异步任务并不能及时执行，因此浏览器并不能保证在定时器设置的时间结束后代码总是被准时执行，从而造成了倒计时的偏差\\n一般的解决方法是前端定时向服务器发送请求获取最新的时间差来校准倒计时时间，和用户一直按 F5 刷新没啥区别，比较简单粗暴，下面的方法可以一定程度上解决这个问题，纯前端控制，不依赖于后端。源地址已忘\\n 五、使用 setTimeout 替代 setInterval\\n定时器指定的时间间隔，表示的是何时将定时器的代码添加到消息队列，而不是何时执行代码。所以真正何时执行代码的时间是不能保证的，它取决于何时被主线程的事件循环获取到，并执行\\n假设有 `setInterval(function, 100)`，它的执行可能是这样的：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/30346ef998214cabb6c95141b19ad25f~tplv-k3u1fbpfcp-zoom-1.image)\\n上图可见，setInterval 每隔 100ms 往队列中添加一个事件；100ms 后，添加 T1 定时器代码至队列中，主线程中还有任务在执行，所以等待，some event 执行结束后执行 T1 定时器代码；又过了100ms，T2定时器被添加到队列中，主线程还在执行 T1 代码，所以等待；又过了 100ms，理论上又要往队列里推一个定时器代码，但由于此时 T2 还在队列中，所以 T3 不会被添加，结果就是此时被跳过；然后，T1 定时器执行结束后马上执行了 T2 代码，所以并没有达到定时器间隔的效果\\n综上所述，serInterval 有两个问题：\\n-   可能多个定时器会连续执行（会导致后续的间隔误差）\\n-   某些间隔会被跳过（这么设计也可能是为了尽量避免第一个问题）\\n因而一般会使用 setTimeout 模拟 setInterval，来规避掉上面的缺点\\n```\\nsetTimeout(function fn() {\\n// do something\\nsetTimeout(fn, delay)\\n}, delay)\\n```\\n这样的话，在前一个定时器代码执行完成前，不会向队列中插入新的定时器（不会连续执行），而且保证了定时器间隔\\n注：有些说法，可能对当队列中存在定时器实例时，是否会跳过添加实例，存在质疑；还有的说法是，在 Node 环境中会跳过，在浏览器环境中会累加；不过我这边实测，不管在 Node 还是在 web 中，当队列中存在定时器实例时，都会跳过添加的；当然也有可能是浏览器版本或内核不同，表现不同，没有细测；感兴趣的小伙伴可以使用一下代码实测下，看是会一次性输出，还是会间隔性输出\\n**这边顺便一提，涉及到做动画的场景可能会使用定时器**\\n-   由于定时器的种种误差问题，以及固定时间间隔不一定与屏幕刷新时间相同，可能会引起丢帧；而且定时器在后台仍会继续执行，也会造成资源的浪费\\n-   一般情况下，还是推荐使用 requestAnimationFrame，RAF 重绘或回流（重排）的时间间隔是紧紧跟随浏览器的刷新频率的；并且在页面未激活时，该页面的屏幕刷新任务也会被暂停，当页面被激活时，任务会从上次停留的地方继续执行，这也就意味着将耗费更少的资源，提升了性能\\n### 总结\\n-   setTimeout 和 setInterval 都存在计时误差，不会严格按照既定时间执行\\n-   一般情况下，这些误差不会造成太大影响，只对于某些特殊场景，对时间要求比较严格的情况下，需要特殊处理\\n-   对于 setInterval，个人建议能不用尽量不用，使用 setTimeout 的嵌套实现，可以规避掉一些潜在问题的发生\\n'\n      },{\n        id: 16,\n        name: 'ZEROL',\n        day: '22',\n        category: 'JavaScript',\n        title: 'setTimeout 和 setInterval，你们两位同学注意点时间~ ',\n        intro: '你们两位同学注意点时间~',\n        imgsrc: require('../assets/image/ArticleImg2.webp'),\n        content:\n        '## 一、基本定义与用法 \\n### 1、定义\\n-   `setTimeout()`方法用于在指定的时间（单位毫秒）后执行回调函数或指定的一段代码\\n-   `setInterval()`方法可按照指定的时间间隔（单位毫秒）来调用回调函数或指定的一段代码\\n### 2、参数\\n-   第一个参数 function，必填，回调函数。或者是一段字符串代码，但是这种方式不建议使用，就和使用`eval()`一样，有安全风险；而且还有作用域问题（字符串会在全局作用域内被解释执行）\\n```\\nsetTimeout(\\'console.log(123);fn()\\', 2000)\\n```\\n-   第二个参数 delay，可选，单位是 ms，对于`setTimeout`是延迟时间，对于`setInterval`是间隔时间，默认都是 0\\n-   第三个参数 param1,param2,param3...，可选，是传递给回调函数的参数，不大常用\\n ```\\nsetTimeout(function (a, b) {\\nconsole.log(a, b)\\n}, 2000, \\'我是\\', \\'定时器\\')\\n```\\n### 3、返回值\\n-   返回一个 ID（数字），可以将这个 ID 传递给`clearTimeout()`或`clearInterval()`来取消执行\\n-   PS: `setTimeout()`和`setInterval()`共用一个编号池，技术上，`clearTimeout()`和`clearInterval()`可以互换使用，但是为了避免混淆，一般不这么做\\n## 二、setTimeout 和 setInterval 的实际表现\\n### 1、使用 setInterval 实现计时\\n```\\nconst startTime = new Date().getTime()\\nlet count = 0\\nconst interval = setInterval(function () {\\ncount++\\nconsole.log(new Date().getTime() - (startTime + count * 1000) + \\'ms\\')\\nif(count === 10){\\nclearInterval(interval);\\n}\\n}, 1000)\\n```\\n`new Date().getTime() - (startTime + count * 1000)`理想情况下应该是 0ms，然而事实并不是这样，而是存在着误差：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ba8397cf6a184ed6a32b285693cff3c0~tplv-k3u1fbpfcp-zoom-1.image)\\n### 2、使用 setTimeout 实现计时\\n```\\nconst startTime = new Date().getTime(), delay = 1000\\nlet count = 0\\nlet timer = setTimeout(doFunc, delay)\\nfunction doFunc(){\\ncount++\\nconsole.log(new Date().getTime() - (startTime + count * 1000) + \\'ms\\')\\nif(count < 10){\\ntimer = setTimeout(doFunc, delay)\\n}\\n}\\n```\\nsetTimeout 也同样存在着误差，而且时间越来越大（setTimeout 需要在同步代码执行完成后才重新开始计时）：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c59850b3ac2a475eb718b5492630d88e~tplv-k3u1fbpfcp-zoom-1.image)\\n## 三、为什么会出现误差\\n### 1、setTimeout 的最短延迟时间\\n`setTimeout`遵循的规范由 whatwg 来维护，在 [HTML Standard - 8.6 Timers](https://link.juejin.cn?target=https%3A%2F%2Fhtml.spec.whatwg.org%2Fmultipage%2Ftimers-and-user-prompts.html%23dom-settimeout \"https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-settimeout\") 中写到了定义定时器的详细步骤，其中有两条：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ffbfbab446fe494fb44c54181f48aa31~tplv-k3u1fbpfcp-zoom-1.image)\\n上面的意思就是说，如果设置的 timeout 小于 0，则设置为 0，如果嵌套的层级超过了 5 层（计时器嵌套），并且 timeout 小于 4ms，则设置 timeout 为 4ms。并且，在不同浏览器中出现这种最小延迟的情况有所不同\\n具体的源代码实现以及各大浏览器实现的不同，大家可以参考这篇文章：[为什么 setTimeout 有最小延时 4ms ？](https://link.juejin.cn?target=https%3A%2F%2Fwww.bruceyj.com%2Ffront-end-interview-summary%2Fsystem-design%2Fwhy-is-the-design%2F2-why-setTimeout-4ms.html \"https://www.bruceyj.com/front-end-interview-summary/system-design/why-is-the-design/2-why-setTimeout-4ms.html\")\\n这里只看结论，定时器本身的定义步骤是造成其出现误差的原因之一\\n### 2、setInterval 的最小间隔时间\\n在 HTML5 标准中，setInterval 的最小间隔为 10ms，虽然我在规范文档中并未找到其相关说明，但是经过实际测试，也确实存在最小间隔时间，例如以下代码：\\n```\\nlet startTime = new Date().getTime()\\nlet count = 0\\nconst interval = setInterval(function () {\\ncount++\\n console.log(new Date().getTime() - startTime + \\'ms\\')\\nstartTime = new Date().getTime()\\nif(count === 10) {\\nclearInterval(interval)\\n}\\n}, 0)\\n```\\n测试结果：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9bcffa807d384a7ab542fd1174186b12~tplv-k3u1fbpfcp-zoom-1.image)\\n虽然没有 10ms 那么大的间隔，但是间隔仍然存在，猜测具体的间隔时间是和浏览器实现以及设备性能有关，无论如何，间隔是确实存在的\\n另外，当使用 setInterval 时间间隔到点后，仅当队列中没有该定时器的任何其他代码实例时，才会将定时器的代码添加到队列中，如果有的话，则不会添加，造成堵塞，这个也与 JS 的事件循环有关\\n 未被激活的tabs的定时最小延迟 >= 1000ms\\n为了优化后台 tab 的加载损耗（以及降低耗电量），在未被激活的 tab 中定时器的最小延时限制为1s(1000ms)，具体时间在不同的浏览器实现中也有差别\\n  JS 的事件循环机制\\n`setTimeout`和`setInterval`中的时间并不是到点就立即执行，而是到点将其回调函数加入异步事件队列中，按照队列先进先出的性质，该回调函数到点之后是否能执行还得取决于是否属于队列首位，如果前头还有其他事件在等待，则不能按点执行，如果没有，则将其放入同步队列执行。具体事件循环机制，可以参考这篇文章：[动图学习-EventLoop](https://juejin.cn/post/6969028296893792286 \"https://juejin.cn/post/6969028296893792286\")\\n## 四、解决方案\\n1、在浏览器中实现一个 0ms 延时的定时器\\n可以参考如下代码（来自于国外的一篇博客，也是 MDN 推荐的方法），主要是使用了 postMessage 方法，异步的执行了回调函数，并且速度要比 setTimeout(0) 要快的多。具体比较可以参照原文：[setTimeout with a shorter delay](https://link.juejin.cn?target=https%3A%2F%2Fdbaron.org%2Flog%2F20100309-faster-timeouts \"https://dbaron.org/log/20100309-faster-timeouts\")\\n使用 setTimeout(0) 得到的时间：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8994a7da32e549cd9d06c34d1ac0bbc8~tplv-k3u1fbpfcp-zoom-1.image)\\n将 setTimeout 改成 setZeroTimeout 后得到的时间，时间几乎都在 0～1，至于为什么不是绝对的 0，猜测可能与性能有关，总的来说，时间确实缩短了：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dced5471b7fc422d9f9eb28259b26ce2~tplv-k3u1fbpfcp-zoom-1.image)\\n购物网站的秒杀活动\\n一般情况下，从服务器拿到倒数时间后，前端的执行倒计时程序持续运行，事实上，显示时间相比实际时间会越来越慢的\\n究其原因，倒计时通常是使用定时器实现，而 JS 的单线程特性使得同步任务执行过程中出现阻塞时，任务队列中的异步任务并不能及时执行，因此浏览器并不能保证在定时器设置的时间结束后代码总是被准时执行，从而造成了倒计时的偏差\\n一般的解决方法是前端定时向服务器发送请求获取最新的时间差来校准倒计时时间，和用户一直按 F5 刷新没啥区别，比较简单粗暴，下面的方法可以一定程度上解决这个问题，纯前端控制，不依赖于后端。源地址已忘\\n 五、使用 setTimeout 替代 setInterval\\n定时器指定的时间间隔，表示的是何时将定时器的代码添加到消息队列，而不是何时执行代码。所以真正何时执行代码的时间是不能保证的，它取决于何时被主线程的事件循环获取到，并执行\\n假设有 `setInterval(function, 100)`，它的执行可能是这样的：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/30346ef998214cabb6c95141b19ad25f~tplv-k3u1fbpfcp-zoom-1.image)\\n上图可见，setInterval 每隔 100ms 往队列中添加一个事件；100ms 后，添加 T1 定时器代码至队列中，主线程中还有任务在执行，所以等待，some event 执行结束后执行 T1 定时器代码；又过了100ms，T2定时器被添加到队列中，主线程还在执行 T1 代码，所以等待；又过了 100ms，理论上又要往队列里推一个定时器代码，但由于此时 T2 还在队列中，所以 T3 不会被添加，结果就是此时被跳过；然后，T1 定时器执行结束后马上执行了 T2 代码，所以并没有达到定时器间隔的效果\\n综上所述，serInterval 有两个问题：\\n-   可能多个定时器会连续执行（会导致后续的间隔误差）\\n-   某些间隔会被跳过（这么设计也可能是为了尽量避免第一个问题）\\n因而一般会使用 setTimeout 模拟 setInterval，来规避掉上面的缺点\\n```\\nsetTimeout(function fn() {\\n// do something\\nsetTimeout(fn, delay)\\n}, delay)\\n```\\n这样的话，在前一个定时器代码执行完成前，不会向队列中插入新的定时器（不会连续执行），而且保证了定时器间隔\\n注：有些说法，可能对当队列中存在定时器实例时，是否会跳过添加实例，存在质疑；还有的说法是，在 Node 环境中会跳过，在浏览器环境中会累加；不过我这边实测，不管在 Node 还是在 web 中，当队列中存在定时器实例时，都会跳过添加的；当然也有可能是浏览器版本或内核不同，表现不同，没有细测；感兴趣的小伙伴可以使用一下代码实测下，看是会一次性输出，还是会间隔性输出\\n**这边顺便一提，涉及到做动画的场景可能会使用定时器**\\n-   由于定时器的种种误差问题，以及固定时间间隔不一定与屏幕刷新时间相同，可能会引起丢帧；而且定时器在后台仍会继续执行，也会造成资源的浪费\\n-   一般情况下，还是推荐使用 requestAnimationFrame，RAF 重绘或回流（重排）的时间间隔是紧紧跟随浏览器的刷新频率的；并且在页面未激活时，该页面的屏幕刷新任务也会被暂停，当页面被激活时，任务会从上次停留的地方继续执行，这也就意味着将耗费更少的资源，提升了性能\\n### 总结\\n-   setTimeout 和 setInterval 都存在计时误差，不会严格按照既定时间执行\\n-   一般情况下，这些误差不会造成太大影响，只对于某些特殊场景，对时间要求比较严格的情况下，需要特殊处理\\n-   对于 setInterval，个人建议能不用尽量不用，使用 setTimeout 的嵌套实现，可以规避掉一些潜在问题的发生\\n'\n      },{\n        id: 17,\n        name: 'ZEROL',\n        day: '22',\n        category: 'JavaScript',\n        title: 'setTimeout 和 setInterval，你们两位同学注意点时间~ ',\n        intro: '你们两位同学注意点时间~',\n        imgsrc: require('../assets/image/ArticleImg2.webp'),\n        content:\n        '## 一、基本定义与用法 \\n### 1、定义\\n-   `setTimeout()`方法用于在指定的时间（单位毫秒）后执行回调函数或指定的一段代码\\n-   `setInterval()`方法可按照指定的时间间隔（单位毫秒）来调用回调函数或指定的一段代码\\n### 2、参数\\n-   第一个参数 function，必填，回调函数。或者是一段字符串代码，但是这种方式不建议使用，就和使用`eval()`一样，有安全风险；而且还有作用域问题（字符串会在全局作用域内被解释执行）\\n```\\nsetTimeout(\\'console.log(123);fn()\\', 2000)\\n```\\n-   第二个参数 delay，可选，单位是 ms，对于`setTimeout`是延迟时间，对于`setInterval`是间隔时间，默认都是 0\\n-   第三个参数 param1,param2,param3...，可选，是传递给回调函数的参数，不大常用\\n ```\\nsetTimeout(function (a, b) {\\nconsole.log(a, b)\\n}, 2000, \\'我是\\', \\'定时器\\')\\n```\\n### 3、返回值\\n-   返回一个 ID（数字），可以将这个 ID 传递给`clearTimeout()`或`clearInterval()`来取消执行\\n-   PS: `setTimeout()`和`setInterval()`共用一个编号池，技术上，`clearTimeout()`和`clearInterval()`可以互换使用，但是为了避免混淆，一般不这么做\\n## 二、setTimeout 和 setInterval 的实际表现\\n### 1、使用 setInterval 实现计时\\n```\\nconst startTime = new Date().getTime()\\nlet count = 0\\nconst interval = setInterval(function () {\\ncount++\\nconsole.log(new Date().getTime() - (startTime + count * 1000) + \\'ms\\')\\nif(count === 10){\\nclearInterval(interval);\\n}\\n}, 1000)\\n```\\n`new Date().getTime() - (startTime + count * 1000)`理想情况下应该是 0ms，然而事实并不是这样，而是存在着误差：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ba8397cf6a184ed6a32b285693cff3c0~tplv-k3u1fbpfcp-zoom-1.image)\\n### 2、使用 setTimeout 实现计时\\n```\\nconst startTime = new Date().getTime(), delay = 1000\\nlet count = 0\\nlet timer = setTimeout(doFunc, delay)\\nfunction doFunc(){\\ncount++\\nconsole.log(new Date().getTime() - (startTime + count * 1000) + \\'ms\\')\\nif(count < 10){\\ntimer = setTimeout(doFunc, delay)\\n}\\n}\\n```\\nsetTimeout 也同样存在着误差，而且时间越来越大（setTimeout 需要在同步代码执行完成后才重新开始计时）：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c59850b3ac2a475eb718b5492630d88e~tplv-k3u1fbpfcp-zoom-1.image)\\n## 三、为什么会出现误差\\n### 1、setTimeout 的最短延迟时间\\n`setTimeout`遵循的规范由 whatwg 来维护，在 [HTML Standard - 8.6 Timers](https://link.juejin.cn?target=https%3A%2F%2Fhtml.spec.whatwg.org%2Fmultipage%2Ftimers-and-user-prompts.html%23dom-settimeout \"https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-settimeout\") 中写到了定义定时器的详细步骤，其中有两条：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ffbfbab446fe494fb44c54181f48aa31~tplv-k3u1fbpfcp-zoom-1.image)\\n上面的意思就是说，如果设置的 timeout 小于 0，则设置为 0，如果嵌套的层级超过了 5 层（计时器嵌套），并且 timeout 小于 4ms，则设置 timeout 为 4ms。并且，在不同浏览器中出现这种最小延迟的情况有所不同\\n具体的源代码实现以及各大浏览器实现的不同，大家可以参考这篇文章：[为什么 setTimeout 有最小延时 4ms ？](https://link.juejin.cn?target=https%3A%2F%2Fwww.bruceyj.com%2Ffront-end-interview-summary%2Fsystem-design%2Fwhy-is-the-design%2F2-why-setTimeout-4ms.html \"https://www.bruceyj.com/front-end-interview-summary/system-design/why-is-the-design/2-why-setTimeout-4ms.html\")\\n这里只看结论，定时器本身的定义步骤是造成其出现误差的原因之一\\n### 2、setInterval 的最小间隔时间\\n在 HTML5 标准中，setInterval 的最小间隔为 10ms，虽然我在规范文档中并未找到其相关说明，但是经过实际测试，也确实存在最小间隔时间，例如以下代码：\\n```\\nlet startTime = new Date().getTime()\\nlet count = 0\\nconst interval = setInterval(function () {\\ncount++\\n console.log(new Date().getTime() - startTime + \\'ms\\')\\nstartTime = new Date().getTime()\\nif(count === 10) {\\nclearInterval(interval)\\n}\\n}, 0)\\n```\\n测试结果：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9bcffa807d384a7ab542fd1174186b12~tplv-k3u1fbpfcp-zoom-1.image)\\n虽然没有 10ms 那么大的间隔，但是间隔仍然存在，猜测具体的间隔时间是和浏览器实现以及设备性能有关，无论如何，间隔是确实存在的\\n另外，当使用 setInterval 时间间隔到点后，仅当队列中没有该定时器的任何其他代码实例时，才会将定时器的代码添加到队列中，如果有的话，则不会添加，造成堵塞，这个也与 JS 的事件循环有关\\n 未被激活的tabs的定时最小延迟 >= 1000ms\\n为了优化后台 tab 的加载损耗（以及降低耗电量），在未被激活的 tab 中定时器的最小延时限制为1s(1000ms)，具体时间在不同的浏览器实现中也有差别\\n  JS 的事件循环机制\\n`setTimeout`和`setInterval`中的时间并不是到点就立即执行，而是到点将其回调函数加入异步事件队列中，按照队列先进先出的性质，该回调函数到点之后是否能执行还得取决于是否属于队列首位，如果前头还有其他事件在等待，则不能按点执行，如果没有，则将其放入同步队列执行。具体事件循环机制，可以参考这篇文章：[动图学习-EventLoop](https://juejin.cn/post/6969028296893792286 \"https://juejin.cn/post/6969028296893792286\")\\n## 四、解决方案\\n1、在浏览器中实现一个 0ms 延时的定时器\\n可以参考如下代码（来自于国外的一篇博客，也是 MDN 推荐的方法），主要是使用了 postMessage 方法，异步的执行了回调函数，并且速度要比 setTimeout(0) 要快的多。具体比较可以参照原文：[setTimeout with a shorter delay](https://link.juejin.cn?target=https%3A%2F%2Fdbaron.org%2Flog%2F20100309-faster-timeouts \"https://dbaron.org/log/20100309-faster-timeouts\")\\n使用 setTimeout(0) 得到的时间：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8994a7da32e549cd9d06c34d1ac0bbc8~tplv-k3u1fbpfcp-zoom-1.image)\\n将 setTimeout 改成 setZeroTimeout 后得到的时间，时间几乎都在 0～1，至于为什么不是绝对的 0，猜测可能与性能有关，总的来说，时间确实缩短了：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dced5471b7fc422d9f9eb28259b26ce2~tplv-k3u1fbpfcp-zoom-1.image)\\n购物网站的秒杀活动\\n一般情况下，从服务器拿到倒数时间后，前端的执行倒计时程序持续运行，事实上，显示时间相比实际时间会越来越慢的\\n究其原因，倒计时通常是使用定时器实现，而 JS 的单线程特性使得同步任务执行过程中出现阻塞时，任务队列中的异步任务并不能及时执行，因此浏览器并不能保证在定时器设置的时间结束后代码总是被准时执行，从而造成了倒计时的偏差\\n一般的解决方法是前端定时向服务器发送请求获取最新的时间差来校准倒计时时间，和用户一直按 F5 刷新没啥区别，比较简单粗暴，下面的方法可以一定程度上解决这个问题，纯前端控制，不依赖于后端。源地址已忘\\n 五、使用 setTimeout 替代 setInterval\\n定时器指定的时间间隔，表示的是何时将定时器的代码添加到消息队列，而不是何时执行代码。所以真正何时执行代码的时间是不能保证的，它取决于何时被主线程的事件循环获取到，并执行\\n假设有 `setInterval(function, 100)`，它的执行可能是这样的：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/30346ef998214cabb6c95141b19ad25f~tplv-k3u1fbpfcp-zoom-1.image)\\n上图可见，setInterval 每隔 100ms 往队列中添加一个事件；100ms 后，添加 T1 定时器代码至队列中，主线程中还有任务在执行，所以等待，some event 执行结束后执行 T1 定时器代码；又过了100ms，T2定时器被添加到队列中，主线程还在执行 T1 代码，所以等待；又过了 100ms，理论上又要往队列里推一个定时器代码，但由于此时 T2 还在队列中，所以 T3 不会被添加，结果就是此时被跳过；然后，T1 定时器执行结束后马上执行了 T2 代码，所以并没有达到定时器间隔的效果\\n综上所述，serInterval 有两个问题：\\n-   可能多个定时器会连续执行（会导致后续的间隔误差）\\n-   某些间隔会被跳过（这么设计也可能是为了尽量避免第一个问题）\\n因而一般会使用 setTimeout 模拟 setInterval，来规避掉上面的缺点\\n```\\nsetTimeout(function fn() {\\n// do something\\nsetTimeout(fn, delay)\\n}, delay)\\n```\\n这样的话，在前一个定时器代码执行完成前，不会向队列中插入新的定时器（不会连续执行），而且保证了定时器间隔\\n注：有些说法，可能对当队列中存在定时器实例时，是否会跳过添加实例，存在质疑；还有的说法是，在 Node 环境中会跳过，在浏览器环境中会累加；不过我这边实测，不管在 Node 还是在 web 中，当队列中存在定时器实例时，都会跳过添加的；当然也有可能是浏览器版本或内核不同，表现不同，没有细测；感兴趣的小伙伴可以使用一下代码实测下，看是会一次性输出，还是会间隔性输出\\n**这边顺便一提，涉及到做动画的场景可能会使用定时器**\\n-   由于定时器的种种误差问题，以及固定时间间隔不一定与屏幕刷新时间相同，可能会引起丢帧；而且定时器在后台仍会继续执行，也会造成资源的浪费\\n-   一般情况下，还是推荐使用 requestAnimationFrame，RAF 重绘或回流（重排）的时间间隔是紧紧跟随浏览器的刷新频率的；并且在页面未激活时，该页面的屏幕刷新任务也会被暂停，当页面被激活时，任务会从上次停留的地方继续执行，这也就意味着将耗费更少的资源，提升了性能\\n### 总结\\n-   setTimeout 和 setInterval 都存在计时误差，不会严格按照既定时间执行\\n-   一般情况下，这些误差不会造成太大影响，只对于某些特殊场景，对时间要求比较严格的情况下，需要特殊处理\\n-   对于 setInterval，个人建议能不用尽量不用，使用 setTimeout 的嵌套实现，可以规避掉一些潜在问题的发生\\n'\n      },{\n        id: 18,\n        name: '望舟',\n        day: '1',\n        category: '面试',\n        title: '让“作用域和闭包”说人话！ ',\n        intro: '让作用域和闭包说人话，面试时候有话可讲！',\n        imgsrc: require('../assets/image/ArticleImg1.webp'),\n        content:\n        '# 一、作用域是什么\\n作用域与编译原理息息相关，但是我们暂时还不用管编译原理的复杂过程，它的作用可以简单看下面这张图： \\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2dc72d14948848159ed01ab7af90a090~tplv-k3u1fbpfcp-zoom-1.image)\\n简单来说就是“我得知道这些变量在哪里，不然我怎么取到它们再进行下一步操作呀！”\\n***\\nJavaScript的编译发生代码执行前的几微妙内，并不是发生在构建之前。\\n引擎根据作用域进行变量查询，存在两种影响结果的查找方式——LHS/RHS。\\nRHS（谁是源头【获取变量的值】）：需要找到这个变量的值才可以进行下一步操作。如console.log(a)，即得到a的值后执行操作。查询操作失败报ReferenceError异常，不合理操作报TypeError异常。\\nLHS（目标是谁【对变量赋值】）：为操作找到一个容器，如var a = 2，即找到一个a，给它赋值为2。查询操作失败在非严格模式下会创建变量。*这个特性可以解释变量提升这个东西，也就是“赋值可以跑到声明前”。为了完成赋值这个动作，我可以自己声明一下嘛。现在可以暂时放一下这句话，等到提升时再想。*\\n> ~~不推荐使用with/eval~~\\n# 二、函数作用域和块作用域\\n> 函数作用域含义：属于这个函数的全部变量都可以在整个函数的范围内使用或复用。\\nfunction 开头的就是函数声明，其余则是函数表达式。 **正常函数声明被绑定在作用域中，函数表达式则绑定在函数自身中。** 这句话不理解可以先埋下一个伏笔，等下面看到闭包的时候再回头看会回味无穷。\\n```\\n// 函数声明\\nfunction foo(){\\nvar a = 2;\\nconsole.log(a);\\n}\\nfoo()\\n// 函数表达式\\n(function foo(){\\nvar a = 2;\\nconsole.log(a);\\n})()\\nvar a = 2;\\n(function IIFE(global){\\nvar a = 3;\\nconsole.log(a, global.a)// 3,2\\n})(window)\\n// 函数表达式\\nvar foo = function(){\\nconsole.log(1)\\n}\\n```\\n那么怎么搞出一个块作用域呢？块作用域的声明方式有：\\n1.  with 仅在with声明中有效\\n1.  try/catch catch内的变量仅在catch内使用\\n1.  let 劫持所在块的作用域\\n1.  const 与let类似，变量不可修改\\n块作用域的优势：1. 有利于垃圾回收（块作用域内代码执行后可以直接回收）；2. 解决 var 循环问题。\\n# 三、提升\\n> 没有赋值只有声明的变量是会报错 undefined，提升也只是提升了个声明而已；再换句话说，赋值可以跑在声明的前面。光说不干假把式~\\n第一段代码可以顺利执行，因为对于 a 的声明会提升到最顶部，因此在作用域内能够找到a。但是这第二段代码中，`var a = 2;`会被拆分为两步，第一步是声明 a ，然后就执行了输出语句，还没有进行赋值呢，因此会出现报错。 这个例子恰好说明了“赋值可以跑在声明前面”。\\n***\\n例二：\\n```\\nfoo()\\nfunction foo(){\\nconsole.log(a); //undefined\\nvar a;\\n}\\n```\\n这里也是和例一一样，a会提升声明（作用域在foo内），但是只有声明，没有赋值，所以仍然会报错。\\n***\\n同样是声明提升，***函数的优先级高于变量***。这里的例子我们可以把函数表达式当作是一个变量的声明，相当于给foo2 这个变量赋值了一个函数。那么由于函数的优先级更高，这个foo2无法覆盖之前的foo1，所以输出仍然是1。\\n# 四、闭包\\n## 1. 闭包是什么\\n首先我们得知道闭包是什么，来看看书里是怎么说的：\\n> 函数在 定义时的词法作用域以外的地方 被调用，闭包使得函数可以继续访问定义时的词法作用域。\\n这句话的形容使闭包看起来像一种_访问作用域的方法_。我们继续看下一句：\\n> 无论通过何种手段将内部函数传递到所在的词法作用域以外，它都会持有对原始定义作用域的引用，无论在何处执行这个函数都会使用闭包。\\n**因此，不应该把比较理解成一种现象或者原理，应该作为一种工具方便我们使用来解决 JavaScript 中的一些问题。这是一个重要的理解点。** 用自己的话再来说一下闭包是什么吧：\\n一个函数（A）引用着另一个函数的变量（B），即使 B 已经顺利执行结束了也不会被回收，因为 A 还引用着呢，所以 B 的各种变量也要被保存。\\n'\n      },{\n        id: 19,\n        name: 'ZEROL',\n        day: '22',\n        category: 'JavaScript',\n        title: 'setTimeout 和 setInterval，你们两位同学注意点时间~ ',\n        intro: '你们两位同学注意点时间~',\n        imgsrc: require('../assets/image/ArticleImg2.webp'),\n        content:\n        '## 一、基本定义与用法 \\n### 1、定义\\n-   `setTimeout()`方法用于在指定的时间（单位毫秒）后执行回调函数或指定的一段代码\\n-   `setInterval()`方法可按照指定的时间间隔（单位毫秒）来调用回调函数或指定的一段代码\\n### 2、参数\\n-   第一个参数 function，必填，回调函数。或者是一段字符串代码，但是这种方式不建议使用，就和使用`eval()`一样，有安全风险；而且还有作用域问题（字符串会在全局作用域内被解释执行）\\n```\\nsetTimeout(\\'console.log(123);fn()\\', 2000)\\n```\\n-   第二个参数 delay，可选，单位是 ms，对于`setTimeout`是延迟时间，对于`setInterval`是间隔时间，默认都是 0\\n-   第三个参数 param1,param2,param3...，可选，是传递给回调函数的参数，不大常用\\n ```\\nsetTimeout(function (a, b) {\\nconsole.log(a, b)\\n}, 2000, \\'我是\\', \\'定时器\\')\\n```\\n### 3、返回值\\n-   返回一个 ID（数字），可以将这个 ID 传递给`clearTimeout()`或`clearInterval()`来取消执行\\n-   PS: `setTimeout()`和`setInterval()`共用一个编号池，技术上，`clearTimeout()`和`clearInterval()`可以互换使用，但是为了避免混淆，一般不这么做\\n## 二、setTimeout 和 setInterval 的实际表现\\n### 1、使用 setInterval 实现计时\\n```\\nconst startTime = new Date().getTime()\\nlet count = 0\\nconst interval = setInterval(function () {\\ncount++\\nconsole.log(new Date().getTime() - (startTime + count * 1000) + \\'ms\\')\\nif(count === 10){\\nclearInterval(interval);\\n}\\n}, 1000)\\n```\\n`new Date().getTime() - (startTime + count * 1000)`理想情况下应该是 0ms，然而事实并不是这样，而是存在着误差：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ba8397cf6a184ed6a32b285693cff3c0~tplv-k3u1fbpfcp-zoom-1.image)\\n### 2、使用 setTimeout 实现计时\\n```\\nconst startTime = new Date().getTime(), delay = 1000\\nlet count = 0\\nlet timer = setTimeout(doFunc, delay)\\nfunction doFunc(){\\ncount++\\nconsole.log(new Date().getTime() - (startTime + count * 1000) + \\'ms\\')\\nif(count < 10){\\ntimer = setTimeout(doFunc, delay)\\n}\\n}\\n```\\nsetTimeout 也同样存在着误差，而且时间越来越大（setTimeout 需要在同步代码执行完成后才重新开始计时）：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c59850b3ac2a475eb718b5492630d88e~tplv-k3u1fbpfcp-zoom-1.image)\\n## 三、为什么会出现误差\\n### 1、setTimeout 的最短延迟时间\\n`setTimeout`遵循的规范由 whatwg 来维护，在 [HTML Standard - 8.6 Timers](https://link.juejin.cn?target=https%3A%2F%2Fhtml.spec.whatwg.org%2Fmultipage%2Ftimers-and-user-prompts.html%23dom-settimeout \"https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-settimeout\") 中写到了定义定时器的详细步骤，其中有两条：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ffbfbab446fe494fb44c54181f48aa31~tplv-k3u1fbpfcp-zoom-1.image)\\n上面的意思就是说，如果设置的 timeout 小于 0，则设置为 0，如果嵌套的层级超过了 5 层（计时器嵌套），并且 timeout 小于 4ms，则设置 timeout 为 4ms。并且，在不同浏览器中出现这种最小延迟的情况有所不同\\n具体的源代码实现以及各大浏览器实现的不同，大家可以参考这篇文章：[为什么 setTimeout 有最小延时 4ms ？](https://link.juejin.cn?target=https%3A%2F%2Fwww.bruceyj.com%2Ffront-end-interview-summary%2Fsystem-design%2Fwhy-is-the-design%2F2-why-setTimeout-4ms.html \"https://www.bruceyj.com/front-end-interview-summary/system-design/why-is-the-design/2-why-setTimeout-4ms.html\")\\n这里只看结论，定时器本身的定义步骤是造成其出现误差的原因之一\\n### 2、setInterval 的最小间隔时间\\n在 HTML5 标准中，setInterval 的最小间隔为 10ms，虽然我在规范文档中并未找到其相关说明，但是经过实际测试，也确实存在最小间隔时间，例如以下代码：\\n```\\nlet startTime = new Date().getTime()\\nlet count = 0\\nconst interval = setInterval(function () {\\ncount++\\n console.log(new Date().getTime() - startTime + \\'ms\\')\\nstartTime = new Date().getTime()\\nif(count === 10) {\\nclearInterval(interval)\\n}\\n}, 0)\\n```\\n测试结果：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9bcffa807d384a7ab542fd1174186b12~tplv-k3u1fbpfcp-zoom-1.image)\\n虽然没有 10ms 那么大的间隔，但是间隔仍然存在，猜测具体的间隔时间是和浏览器实现以及设备性能有关，无论如何，间隔是确实存在的\\n另外，当使用 setInterval 时间间隔到点后，仅当队列中没有该定时器的任何其他代码实例时，才会将定时器的代码添加到队列中，如果有的话，则不会添加，造成堵塞，这个也与 JS 的事件循环有关\\n 未被激活的tabs的定时最小延迟 >= 1000ms\\n为了优化后台 tab 的加载损耗（以及降低耗电量），在未被激活的 tab 中定时器的最小延时限制为1s(1000ms)，具体时间在不同的浏览器实现中也有差别\\n  JS 的事件循环机制\\n`setTimeout`和`setInterval`中的时间并不是到点就立即执行，而是到点将其回调函数加入异步事件队列中，按照队列先进先出的性质，该回调函数到点之后是否能执行还得取决于是否属于队列首位，如果前头还有其他事件在等待，则不能按点执行，如果没有，则将其放入同步队列执行。具体事件循环机制，可以参考这篇文章：[动图学习-EventLoop](https://juejin.cn/post/6969028296893792286 \"https://juejin.cn/post/6969028296893792286\")\\n## 四、解决方案\\n1、在浏览器中实现一个 0ms 延时的定时器\\n可以参考如下代码（来自于国外的一篇博客，也是 MDN 推荐的方法），主要是使用了 postMessage 方法，异步的执行了回调函数，并且速度要比 setTimeout(0) 要快的多。具体比较可以参照原文：[setTimeout with a shorter delay](https://link.juejin.cn?target=https%3A%2F%2Fdbaron.org%2Flog%2F20100309-faster-timeouts \"https://dbaron.org/log/20100309-faster-timeouts\")\\n使用 setTimeout(0) 得到的时间：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8994a7da32e549cd9d06c34d1ac0bbc8~tplv-k3u1fbpfcp-zoom-1.image)\\n将 setTimeout 改成 setZeroTimeout 后得到的时间，时间几乎都在 0～1，至于为什么不是绝对的 0，猜测可能与性能有关，总的来说，时间确实缩短了：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dced5471b7fc422d9f9eb28259b26ce2~tplv-k3u1fbpfcp-zoom-1.image)\\n购物网站的秒杀活动\\n一般情况下，从服务器拿到倒数时间后，前端的执行倒计时程序持续运行，事实上，显示时间相比实际时间会越来越慢的\\n究其原因，倒计时通常是使用定时器实现，而 JS 的单线程特性使得同步任务执行过程中出现阻塞时，任务队列中的异步任务并不能及时执行，因此浏览器并不能保证在定时器设置的时间结束后代码总是被准时执行，从而造成了倒计时的偏差\\n一般的解决方法是前端定时向服务器发送请求获取最新的时间差来校准倒计时时间，和用户一直按 F5 刷新没啥区别，比较简单粗暴，下面的方法可以一定程度上解决这个问题，纯前端控制，不依赖于后端。源地址已忘\\n 五、使用 setTimeout 替代 setInterval\\n定时器指定的时间间隔，表示的是何时将定时器的代码添加到消息队列，而不是何时执行代码。所以真正何时执行代码的时间是不能保证的，它取决于何时被主线程的事件循环获取到，并执行\\n假设有 `setInterval(function, 100)`，它的执行可能是这样的：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/30346ef998214cabb6c95141b19ad25f~tplv-k3u1fbpfcp-zoom-1.image)\\n上图可见，setInterval 每隔 100ms 往队列中添加一个事件；100ms 后，添加 T1 定时器代码至队列中，主线程中还有任务在执行，所以等待，some event 执行结束后执行 T1 定时器代码；又过了100ms，T2定时器被添加到队列中，主线程还在执行 T1 代码，所以等待；又过了 100ms，理论上又要往队列里推一个定时器代码，但由于此时 T2 还在队列中，所以 T3 不会被添加，结果就是此时被跳过；然后，T1 定时器执行结束后马上执行了 T2 代码，所以并没有达到定时器间隔的效果\\n综上所述，serInterval 有两个问题：\\n-   可能多个定时器会连续执行（会导致后续的间隔误差）\\n-   某些间隔会被跳过（这么设计也可能是为了尽量避免第一个问题）\\n因而一般会使用 setTimeout 模拟 setInterval，来规避掉上面的缺点\\n```\\nsetTimeout(function fn() {\\n// do something\\nsetTimeout(fn, delay)\\n}, delay)\\n```\\n这样的话，在前一个定时器代码执行完成前，不会向队列中插入新的定时器（不会连续执行），而且保证了定时器间隔\\n注：有些说法，可能对当队列中存在定时器实例时，是否会跳过添加实例，存在质疑；还有的说法是，在 Node 环境中会跳过，在浏览器环境中会累加；不过我这边实测，不管在 Node 还是在 web 中，当队列中存在定时器实例时，都会跳过添加的；当然也有可能是浏览器版本或内核不同，表现不同，没有细测；感兴趣的小伙伴可以使用一下代码实测下，看是会一次性输出，还是会间隔性输出\\n**这边顺便一提，涉及到做动画的场景可能会使用定时器**\\n-   由于定时器的种种误差问题，以及固定时间间隔不一定与屏幕刷新时间相同，可能会引起丢帧；而且定时器在后台仍会继续执行，也会造成资源的浪费\\n-   一般情况下，还是推荐使用 requestAnimationFrame，RAF 重绘或回流（重排）的时间间隔是紧紧跟随浏览器的刷新频率的；并且在页面未激活时，该页面的屏幕刷新任务也会被暂停，当页面被激活时，任务会从上次停留的地方继续执行，这也就意味着将耗费更少的资源，提升了性能\\n### 总结\\n-   setTimeout 和 setInterval 都存在计时误差，不会严格按照既定时间执行\\n-   一般情况下，这些误差不会造成太大影响，只对于某些特殊场景，对时间要求比较严格的情况下，需要特殊处理\\n-   对于 setInterval，个人建议能不用尽量不用，使用 setTimeout 的嵌套实现，可以规避掉一些潜在问题的发生\\n'\n      },{\n        id: 20,\n        name: '望舟',\n        day: '1',\n        category: '面试',\n        title: '让“作用域和闭包”说人话！ ',\n        intro: '让作用域和闭包说人话，面试时候有话可讲！',\n        imgsrc: require('../assets/image/ArticleImg1.webp'),\n        content:\n        '# 一、作用域是什么\\n作用域与编译原理息息相关，但是我们暂时还不用管编译原理的复杂过程，它的作用可以简单看下面这张图： \\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2dc72d14948848159ed01ab7af90a090~tplv-k3u1fbpfcp-zoom-1.image)\\n简单来说就是“我得知道这些变量在哪里，不然我怎么取到它们再进行下一步操作呀！”\\n***\\nJavaScript的编译发生代码执行前的几微妙内，并不是发生在构建之前。\\n引擎根据作用域进行变量查询，存在两种影响结果的查找方式——LHS/RHS。\\nRHS（谁是源头【获取变量的值】）：需要找到这个变量的值才可以进行下一步操作。如console.log(a)，即得到a的值后执行操作。查询操作失败报ReferenceError异常，不合理操作报TypeError异常。\\nLHS（目标是谁【对变量赋值】）：为操作找到一个容器，如var a = 2，即找到一个a，给它赋值为2。查询操作失败在非严格模式下会创建变量。*这个特性可以解释变量提升这个东西，也就是“赋值可以跑到声明前”。为了完成赋值这个动作，我可以自己声明一下嘛。现在可以暂时放一下这句话，等到提升时再想。*\\n> ~~不推荐使用with/eval~~\\n# 二、函数作用域和块作用域\\n> 函数作用域含义：属于这个函数的全部变量都可以在整个函数的范围内使用或复用。\\nfunction 开头的就是函数声明，其余则是函数表达式。 **正常函数声明被绑定在作用域中，函数表达式则绑定在函数自身中。** 这句话不理解可以先埋下一个伏笔，等下面看到闭包的时候再回头看会回味无穷。\\n```\\n// 函数声明\\nfunction foo(){\\nvar a = 2;\\nconsole.log(a);\\n}\\nfoo()\\n// 函数表达式\\n(function foo(){\\nvar a = 2;\\nconsole.log(a);\\n})()\\nvar a = 2;\\n(function IIFE(global){\\nvar a = 3;\\nconsole.log(a, global.a)// 3,2\\n})(window)\\n// 函数表达式\\nvar foo = function(){\\nconsole.log(1)\\n}\\n```\\n那么怎么搞出一个块作用域呢？块作用域的声明方式有：\\n1.  with 仅在with声明中有效\\n1.  try/catch catch内的变量仅在catch内使用\\n1.  let 劫持所在块的作用域\\n1.  const 与let类似，变量不可修改\\n块作用域的优势：1. 有利于垃圾回收（块作用域内代码执行后可以直接回收）；2. 解决 var 循环问题。\\n# 三、提升\\n> 没有赋值只有声明的变量是会报错 undefined，提升也只是提升了个声明而已；再换句话说，赋值可以跑在声明的前面。光说不干假把式~\\n第一段代码可以顺利执行，因为对于 a 的声明会提升到最顶部，因此在作用域内能够找到a。但是这第二段代码中，`var a = 2;`会被拆分为两步，第一步是声明 a ，然后就执行了输出语句，还没有进行赋值呢，因此会出现报错。 这个例子恰好说明了“赋值可以跑在声明前面”。\\n***\\n例二：\\n```\\nfoo()\\nfunction foo(){\\nconsole.log(a); //undefined\\nvar a;\\n}\\n```\\n这里也是和例一一样，a会提升声明（作用域在foo内），但是只有声明，没有赋值，所以仍然会报错。\\n***\\n同样是声明提升，***函数的优先级高于变量***。这里的例子我们可以把函数表达式当作是一个变量的声明，相当于给foo2 这个变量赋值了一个函数。那么由于函数的优先级更高，这个foo2无法覆盖之前的foo1，所以输出仍然是1。\\n# 四、闭包\\n## 1. 闭包是什么\\n首先我们得知道闭包是什么，来看看书里是怎么说的：\\n> 函数在 定义时的词法作用域以外的地方 被调用，闭包使得函数可以继续访问定义时的词法作用域。\\n这句话的形容使闭包看起来像一种_访问作用域的方法_。我们继续看下一句：\\n> 无论通过何种手段将内部函数传递到所在的词法作用域以外，它都会持有对原始定义作用域的引用，无论在何处执行这个函数都会使用闭包。\\n**因此，不应该把比较理解成一种现象或者原理，应该作为一种工具方便我们使用来解决 JavaScript 中的一些问题。这是一个重要的理解点。** 用自己的话再来说一下闭包是什么吧：\\n一个函数（A）引用着另一个函数的变量（B），即使 B 已经顺利执行结束了也不会被回收，因为 A 还引用着呢，所以 B 的各种变量也要被保存。\\n'\n      },{\n        id: 21,\n        name: 'ZEROL',\n        day: '22',\n        category: 'JavaScript',\n        title: 'setTimeout 和 setInterval，你们两位同学注意点时间~ ',\n        intro: '你们两位同学注意点时间~',\n        imgsrc: require('../assets/image/ArticleImg2.webp'),\n        content:\n        '## 一、基本定义与用法 \\n### 1、定义\\n-   `setTimeout()`方法用于在指定的时间（单位毫秒）后执行回调函数或指定的一段代码\\n-   `setInterval()`方法可按照指定的时间间隔（单位毫秒）来调用回调函数或指定的一段代码\\n### 2、参数\\n-   第一个参数 function，必填，回调函数。或者是一段字符串代码，但是这种方式不建议使用，就和使用`eval()`一样，有安全风险；而且还有作用域问题（字符串会在全局作用域内被解释执行）\\n```\\nsetTimeout(\\'console.log(123);fn()\\', 2000)\\n```\\n-   第二个参数 delay，可选，单位是 ms，对于`setTimeout`是延迟时间，对于`setInterval`是间隔时间，默认都是 0\\n-   第三个参数 param1,param2,param3...，可选，是传递给回调函数的参数，不大常用\\n ```\\nsetTimeout(function (a, b) {\\nconsole.log(a, b)\\n}, 2000, \\'我是\\', \\'定时器\\')\\n```\\n### 3、返回值\\n-   返回一个 ID（数字），可以将这个 ID 传递给`clearTimeout()`或`clearInterval()`来取消执行\\n-   PS: `setTimeout()`和`setInterval()`共用一个编号池，技术上，`clearTimeout()`和`clearInterval()`可以互换使用，但是为了避免混淆，一般不这么做\\n## 二、setTimeout 和 setInterval 的实际表现\\n### 1、使用 setInterval 实现计时\\n```\\nconst startTime = new Date().getTime()\\nlet count = 0\\nconst interval = setInterval(function () {\\ncount++\\nconsole.log(new Date().getTime() - (startTime + count * 1000) + \\'ms\\')\\nif(count === 10){\\nclearInterval(interval);\\n}\\n}, 1000)\\n```\\n`new Date().getTime() - (startTime + count * 1000)`理想情况下应该是 0ms，然而事实并不是这样，而是存在着误差：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ba8397cf6a184ed6a32b285693cff3c0~tplv-k3u1fbpfcp-zoom-1.image)\\n### 2、使用 setTimeout 实现计时\\n```\\nconst startTime = new Date().getTime(), delay = 1000\\nlet count = 0\\nlet timer = setTimeout(doFunc, delay)\\nfunction doFunc(){\\ncount++\\nconsole.log(new Date().getTime() - (startTime + count * 1000) + \\'ms\\')\\nif(count < 10){\\ntimer = setTimeout(doFunc, delay)\\n}\\n}\\n```\\nsetTimeout 也同样存在着误差，而且时间越来越大（setTimeout 需要在同步代码执行完成后才重新开始计时）：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c59850b3ac2a475eb718b5492630d88e~tplv-k3u1fbpfcp-zoom-1.image)\\n## 三、为什么会出现误差\\n### 1、setTimeout 的最短延迟时间\\n`setTimeout`遵循的规范由 whatwg 来维护，在 [HTML Standard - 8.6 Timers](https://link.juejin.cn?target=https%3A%2F%2Fhtml.spec.whatwg.org%2Fmultipage%2Ftimers-and-user-prompts.html%23dom-settimeout \"https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-settimeout\") 中写到了定义定时器的详细步骤，其中有两条：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ffbfbab446fe494fb44c54181f48aa31~tplv-k3u1fbpfcp-zoom-1.image)\\n上面的意思就是说，如果设置的 timeout 小于 0，则设置为 0，如果嵌套的层级超过了 5 层（计时器嵌套），并且 timeout 小于 4ms，则设置 timeout 为 4ms。并且，在不同浏览器中出现这种最小延迟的情况有所不同\\n具体的源代码实现以及各大浏览器实现的不同，大家可以参考这篇文章：[为什么 setTimeout 有最小延时 4ms ？](https://link.juejin.cn?target=https%3A%2F%2Fwww.bruceyj.com%2Ffront-end-interview-summary%2Fsystem-design%2Fwhy-is-the-design%2F2-why-setTimeout-4ms.html \"https://www.bruceyj.com/front-end-interview-summary/system-design/why-is-the-design/2-why-setTimeout-4ms.html\")\\n这里只看结论，定时器本身的定义步骤是造成其出现误差的原因之一\\n### 2、setInterval 的最小间隔时间\\n在 HTML5 标准中，setInterval 的最小间隔为 10ms，虽然我在规范文档中并未找到其相关说明，但是经过实际测试，也确实存在最小间隔时间，例如以下代码：\\n```\\nlet startTime = new Date().getTime()\\nlet count = 0\\nconst interval = setInterval(function () {\\ncount++\\n console.log(new Date().getTime() - startTime + \\'ms\\')\\nstartTime = new Date().getTime()\\nif(count === 10) {\\nclearInterval(interval)\\n}\\n}, 0)\\n```\\n测试结果：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9bcffa807d384a7ab542fd1174186b12~tplv-k3u1fbpfcp-zoom-1.image)\\n虽然没有 10ms 那么大的间隔，但是间隔仍然存在，猜测具体的间隔时间是和浏览器实现以及设备性能有关，无论如何，间隔是确实存在的\\n另外，当使用 setInterval 时间间隔到点后，仅当队列中没有该定时器的任何其他代码实例时，才会将定时器的代码添加到队列中，如果有的话，则不会添加，造成堵塞，这个也与 JS 的事件循环有关\\n 未被激活的tabs的定时最小延迟 >= 1000ms\\n为了优化后台 tab 的加载损耗（以及降低耗电量），在未被激活的 tab 中定时器的最小延时限制为1s(1000ms)，具体时间在不同的浏览器实现中也有差别\\n  JS 的事件循环机制\\n`setTimeout`和`setInterval`中的时间并不是到点就立即执行，而是到点将其回调函数加入异步事件队列中，按照队列先进先出的性质，该回调函数到点之后是否能执行还得取决于是否属于队列首位，如果前头还有其他事件在等待，则不能按点执行，如果没有，则将其放入同步队列执行。具体事件循环机制，可以参考这篇文章：[动图学习-EventLoop](https://juejin.cn/post/6969028296893792286 \"https://juejin.cn/post/6969028296893792286\")\\n## 四、解决方案\\n1、在浏览器中实现一个 0ms 延时的定时器\\n可以参考如下代码（来自于国外的一篇博客，也是 MDN 推荐的方法），主要是使用了 postMessage 方法，异步的执行了回调函数，并且速度要比 setTimeout(0) 要快的多。具体比较可以参照原文：[setTimeout with a shorter delay](https://link.juejin.cn?target=https%3A%2F%2Fdbaron.org%2Flog%2F20100309-faster-timeouts \"https://dbaron.org/log/20100309-faster-timeouts\")\\n使用 setTimeout(0) 得到的时间：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8994a7da32e549cd9d06c34d1ac0bbc8~tplv-k3u1fbpfcp-zoom-1.image)\\n将 setTimeout 改成 setZeroTimeout 后得到的时间，时间几乎都在 0～1，至于为什么不是绝对的 0，猜测可能与性能有关，总的来说，时间确实缩短了：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dced5471b7fc422d9f9eb28259b26ce2~tplv-k3u1fbpfcp-zoom-1.image)\\n购物网站的秒杀活动\\n一般情况下，从服务器拿到倒数时间后，前端的执行倒计时程序持续运行，事实上，显示时间相比实际时间会越来越慢的\\n究其原因，倒计时通常是使用定时器实现，而 JS 的单线程特性使得同步任务执行过程中出现阻塞时，任务队列中的异步任务并不能及时执行，因此浏览器并不能保证在定时器设置的时间结束后代码总是被准时执行，从而造成了倒计时的偏差\\n一般的解决方法是前端定时向服务器发送请求获取最新的时间差来校准倒计时时间，和用户一直按 F5 刷新没啥区别，比较简单粗暴，下面的方法可以一定程度上解决这个问题，纯前端控制，不依赖于后端。源地址已忘\\n 五、使用 setTimeout 替代 setInterval\\n定时器指定的时间间隔，表示的是何时将定时器的代码添加到消息队列，而不是何时执行代码。所以真正何时执行代码的时间是不能保证的，它取决于何时被主线程的事件循环获取到，并执行\\n假设有 `setInterval(function, 100)`，它的执行可能是这样的：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/30346ef998214cabb6c95141b19ad25f~tplv-k3u1fbpfcp-zoom-1.image)\\n上图可见，setInterval 每隔 100ms 往队列中添加一个事件；100ms 后，添加 T1 定时器代码至队列中，主线程中还有任务在执行，所以等待，some event 执行结束后执行 T1 定时器代码；又过了100ms，T2定时器被添加到队列中，主线程还在执行 T1 代码，所以等待；又过了 100ms，理论上又要往队列里推一个定时器代码，但由于此时 T2 还在队列中，所以 T3 不会被添加，结果就是此时被跳过；然后，T1 定时器执行结束后马上执行了 T2 代码，所以并没有达到定时器间隔的效果\\n综上所述，serInterval 有两个问题：\\n-   可能多个定时器会连续执行（会导致后续的间隔误差）\\n-   某些间隔会被跳过（这么设计也可能是为了尽量避免第一个问题）\\n因而一般会使用 setTimeout 模拟 setInterval，来规避掉上面的缺点\\n```\\nsetTimeout(function fn() {\\n// do something\\nsetTimeout(fn, delay)\\n}, delay)\\n```\\n这样的话，在前一个定时器代码执行完成前，不会向队列中插入新的定时器（不会连续执行），而且保证了定时器间隔\\n注：有些说法，可能对当队列中存在定时器实例时，是否会跳过添加实例，存在质疑；还有的说法是，在 Node 环境中会跳过，在浏览器环境中会累加；不过我这边实测，不管在 Node 还是在 web 中，当队列中存在定时器实例时，都会跳过添加的；当然也有可能是浏览器版本或内核不同，表现不同，没有细测；感兴趣的小伙伴可以使用一下代码实测下，看是会一次性输出，还是会间隔性输出\\n**这边顺便一提，涉及到做动画的场景可能会使用定时器**\\n-   由于定时器的种种误差问题，以及固定时间间隔不一定与屏幕刷新时间相同，可能会引起丢帧；而且定时器在后台仍会继续执行，也会造成资源的浪费\\n-   一般情况下，还是推荐使用 requestAnimationFrame，RAF 重绘或回流（重排）的时间间隔是紧紧跟随浏览器的刷新频率的；并且在页面未激活时，该页面的屏幕刷新任务也会被暂停，当页面被激活时，任务会从上次停留的地方继续执行，这也就意味着将耗费更少的资源，提升了性能\\n### 总结\\n-   setTimeout 和 setInterval 都存在计时误差，不会严格按照既定时间执行\\n-   一般情况下，这些误差不会造成太大影响，只对于某些特殊场景，对时间要求比较严格的情况下，需要特殊处理\\n-   对于 setInterval，个人建议能不用尽量不用，使用 setTimeout 的嵌套实现，可以规避掉一些潜在问题的发生\\n'\n      },{\n        id: 22,\n        name: '望舟',\n        day: '1',\n        category: '面试',\n        title: '让“作用域和闭包”说人话！ ',\n        intro: '让作用域和闭包说人话，面试时候有话可讲！',\n        imgsrc: require('../assets/image/ArticleImg1.webp'),\n        content:\n        '# 一、作用域是什么\\n作用域与编译原理息息相关，但是我们暂时还不用管编译原理的复杂过程，它的作用可以简单看下面这张图： \\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2dc72d14948848159ed01ab7af90a090~tplv-k3u1fbpfcp-zoom-1.image)\\n简单来说就是“我得知道这些变量在哪里，不然我怎么取到它们再进行下一步操作呀！”\\n***\\nJavaScript的编译发生代码执行前的几微妙内，并不是发生在构建之前。\\n引擎根据作用域进行变量查询，存在两种影响结果的查找方式——LHS/RHS。\\nRHS（谁是源头【获取变量的值】）：需要找到这个变量的值才可以进行下一步操作。如console.log(a)，即得到a的值后执行操作。查询操作失败报ReferenceError异常，不合理操作报TypeError异常。\\nLHS（目标是谁【对变量赋值】）：为操作找到一个容器，如var a = 2，即找到一个a，给它赋值为2。查询操作失败在非严格模式下会创建变量。*这个特性可以解释变量提升这个东西，也就是“赋值可以跑到声明前”。为了完成赋值这个动作，我可以自己声明一下嘛。现在可以暂时放一下这句话，等到提升时再想。*\\n> ~~不推荐使用with/eval~~\\n# 二、函数作用域和块作用域\\n> 函数作用域含义：属于这个函数的全部变量都可以在整个函数的范围内使用或复用。\\nfunction 开头的就是函数声明，其余则是函数表达式。 **正常函数声明被绑定在作用域中，函数表达式则绑定在函数自身中。** 这句话不理解可以先埋下一个伏笔，等下面看到闭包的时候再回头看会回味无穷。\\n```\\n// 函数声明\\nfunction foo(){\\nvar a = 2;\\nconsole.log(a);\\n}\\nfoo()\\n// 函数表达式\\n(function foo(){\\nvar a = 2;\\nconsole.log(a);\\n})()\\nvar a = 2;\\n(function IIFE(global){\\nvar a = 3;\\nconsole.log(a, global.a)// 3,2\\n})(window)\\n// 函数表达式\\nvar foo = function(){\\nconsole.log(1)\\n}\\n```\\n那么怎么搞出一个块作用域呢？块作用域的声明方式有：\\n1.  with 仅在with声明中有效\\n1.  try/catch catch内的变量仅在catch内使用\\n1.  let 劫持所在块的作用域\\n1.  const 与let类似，变量不可修改\\n块作用域的优势：1. 有利于垃圾回收（块作用域内代码执行后可以直接回收）；2. 解决 var 循环问题。\\n# 三、提升\\n> 没有赋值只有声明的变量是会报错 undefined，提升也只是提升了个声明而已；再换句话说，赋值可以跑在声明的前面。光说不干假把式~\\n第一段代码可以顺利执行，因为对于 a 的声明会提升到最顶部，因此在作用域内能够找到a。但是这第二段代码中，`var a = 2;`会被拆分为两步，第一步是声明 a ，然后就执行了输出语句，还没有进行赋值呢，因此会出现报错。 这个例子恰好说明了“赋值可以跑在声明前面”。\\n***\\n例二：\\n```\\nfoo()\\nfunction foo(){\\nconsole.log(a); //undefined\\nvar a;\\n}\\n```\\n这里也是和例一一样，a会提升声明（作用域在foo内），但是只有声明，没有赋值，所以仍然会报错。\\n***\\n同样是声明提升，***函数的优先级高于变量***。这里的例子我们可以把函数表达式当作是一个变量的声明，相当于给foo2 这个变量赋值了一个函数。那么由于函数的优先级更高，这个foo2无法覆盖之前的foo1，所以输出仍然是1。\\n# 四、闭包\\n## 1. 闭包是什么\\n首先我们得知道闭包是什么，来看看书里是怎么说的：\\n> 函数在 定义时的词法作用域以外的地方 被调用，闭包使得函数可以继续访问定义时的词法作用域。\\n这句话的形容使闭包看起来像一种_访问作用域的方法_。我们继续看下一句：\\n> 无论通过何种手段将内部函数传递到所在的词法作用域以外，它都会持有对原始定义作用域的引用，无论在何处执行这个函数都会使用闭包。\\n**因此，不应该把比较理解成一种现象或者原理，应该作为一种工具方便我们使用来解决 JavaScript 中的一些问题。这是一个重要的理解点。** 用自己的话再来说一下闭包是什么吧：\\n一个函数（A）引用着另一个函数的变量（B），即使 B 已经顺利执行结束了也不会被回收，因为 A 还引用着呢，所以 B 的各种变量也要被保存。\\n'\n      },{\n        id: 23,\n        name: 'ZEROL',\n        day: '22',\n        category: 'JavaScript',\n        title: 'setTimeout 和 setInterval，你们两位同学注意点时间~ ',\n        intro: '你们两位同学注意点时间~',\n        imgsrc: require('../assets/image/ArticleImg2.webp'),\n        content:\n        '## 一、基本定义与用法 \\n### 1、定义\\n-   `setTimeout()`方法用于在指定的时间（单位毫秒）后执行回调函数或指定的一段代码\\n-   `setInterval()`方法可按照指定的时间间隔（单位毫秒）来调用回调函数或指定的一段代码\\n### 2、参数\\n-   第一个参数 function，必填，回调函数。或者是一段字符串代码，但是这种方式不建议使用，就和使用`eval()`一样，有安全风险；而且还有作用域问题（字符串会在全局作用域内被解释执行）\\n```\\nsetTimeout(\\'console.log(123);fn()\\', 2000)\\n```\\n-   第二个参数 delay，可选，单位是 ms，对于`setTimeout`是延迟时间，对于`setInterval`是间隔时间，默认都是 0\\n-   第三个参数 param1,param2,param3...，可选，是传递给回调函数的参数，不大常用\\n ```\\nsetTimeout(function (a, b) {\\nconsole.log(a, b)\\n}, 2000, \\'我是\\', \\'定时器\\')\\n```\\n### 3、返回值\\n-   返回一个 ID（数字），可以将这个 ID 传递给`clearTimeout()`或`clearInterval()`来取消执行\\n-   PS: `setTimeout()`和`setInterval()`共用一个编号池，技术上，`clearTimeout()`和`clearInterval()`可以互换使用，但是为了避免混淆，一般不这么做\\n## 二、setTimeout 和 setInterval 的实际表现\\n### 1、使用 setInterval 实现计时\\n```\\nconst startTime = new Date().getTime()\\nlet count = 0\\nconst interval = setInterval(function () {\\ncount++\\nconsole.log(new Date().getTime() - (startTime + count * 1000) + \\'ms\\')\\nif(count === 10){\\nclearInterval(interval);\\n}\\n}, 1000)\\n```\\n`new Date().getTime() - (startTime + count * 1000)`理想情况下应该是 0ms，然而事实并不是这样，而是存在着误差：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ba8397cf6a184ed6a32b285693cff3c0~tplv-k3u1fbpfcp-zoom-1.image)\\n### 2、使用 setTimeout 实现计时\\n```\\nconst startTime = new Date().getTime(), delay = 1000\\nlet count = 0\\nlet timer = setTimeout(doFunc, delay)\\nfunction doFunc(){\\ncount++\\nconsole.log(new Date().getTime() - (startTime + count * 1000) + \\'ms\\')\\nif(count < 10){\\ntimer = setTimeout(doFunc, delay)\\n}\\n}\\n```\\nsetTimeout 也同样存在着误差，而且时间越来越大（setTimeout 需要在同步代码执行完成后才重新开始计时）：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c59850b3ac2a475eb718b5492630d88e~tplv-k3u1fbpfcp-zoom-1.image)\\n## 三、为什么会出现误差\\n### 1、setTimeout 的最短延迟时间\\n`setTimeout`遵循的规范由 whatwg 来维护，在 [HTML Standard - 8.6 Timers](https://link.juejin.cn?target=https%3A%2F%2Fhtml.spec.whatwg.org%2Fmultipage%2Ftimers-and-user-prompts.html%23dom-settimeout \"https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-settimeout\") 中写到了定义定时器的详细步骤，其中有两条：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ffbfbab446fe494fb44c54181f48aa31~tplv-k3u1fbpfcp-zoom-1.image)\\n上面的意思就是说，如果设置的 timeout 小于 0，则设置为 0，如果嵌套的层级超过了 5 层（计时器嵌套），并且 timeout 小于 4ms，则设置 timeout 为 4ms。并且，在不同浏览器中出现这种最小延迟的情况有所不同\\n具体的源代码实现以及各大浏览器实现的不同，大家可以参考这篇文章：[为什么 setTimeout 有最小延时 4ms ？](https://link.juejin.cn?target=https%3A%2F%2Fwww.bruceyj.com%2Ffront-end-interview-summary%2Fsystem-design%2Fwhy-is-the-design%2F2-why-setTimeout-4ms.html \"https://www.bruceyj.com/front-end-interview-summary/system-design/why-is-the-design/2-why-setTimeout-4ms.html\")\\n这里只看结论，定时器本身的定义步骤是造成其出现误差的原因之一\\n### 2、setInterval 的最小间隔时间\\n在 HTML5 标准中，setInterval 的最小间隔为 10ms，虽然我在规范文档中并未找到其相关说明，但是经过实际测试，也确实存在最小间隔时间，例如以下代码：\\n```\\nlet startTime = new Date().getTime()\\nlet count = 0\\nconst interval = setInterval(function () {\\ncount++\\n console.log(new Date().getTime() - startTime + \\'ms\\')\\nstartTime = new Date().getTime()\\nif(count === 10) {\\nclearInterval(interval)\\n}\\n}, 0)\\n```\\n测试结果：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9bcffa807d384a7ab542fd1174186b12~tplv-k3u1fbpfcp-zoom-1.image)\\n虽然没有 10ms 那么大的间隔，但是间隔仍然存在，猜测具体的间隔时间是和浏览器实现以及设备性能有关，无论如何，间隔是确实存在的\\n另外，当使用 setInterval 时间间隔到点后，仅当队列中没有该定时器的任何其他代码实例时，才会将定时器的代码添加到队列中，如果有的话，则不会添加，造成堵塞，这个也与 JS 的事件循环有关\\n 未被激活的tabs的定时最小延迟 >= 1000ms\\n为了优化后台 tab 的加载损耗（以及降低耗电量），在未被激活的 tab 中定时器的最小延时限制为1s(1000ms)，具体时间在不同的浏览器实现中也有差别\\n  JS 的事件循环机制\\n`setTimeout`和`setInterval`中的时间并不是到点就立即执行，而是到点将其回调函数加入异步事件队列中，按照队列先进先出的性质，该回调函数到点之后是否能执行还得取决于是否属于队列首位，如果前头还有其他事件在等待，则不能按点执行，如果没有，则将其放入同步队列执行。具体事件循环机制，可以参考这篇文章：[动图学习-EventLoop](https://juejin.cn/post/6969028296893792286 \"https://juejin.cn/post/6969028296893792286\")\\n## 四、解决方案\\n1、在浏览器中实现一个 0ms 延时的定时器\\n可以参考如下代码（来自于国外的一篇博客，也是 MDN 推荐的方法），主要是使用了 postMessage 方法，异步的执行了回调函数，并且速度要比 setTimeout(0) 要快的多。具体比较可以参照原文：[setTimeout with a shorter delay](https://link.juejin.cn?target=https%3A%2F%2Fdbaron.org%2Flog%2F20100309-faster-timeouts \"https://dbaron.org/log/20100309-faster-timeouts\")\\n使用 setTimeout(0) 得到的时间：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8994a7da32e549cd9d06c34d1ac0bbc8~tplv-k3u1fbpfcp-zoom-1.image)\\n将 setTimeout 改成 setZeroTimeout 后得到的时间，时间几乎都在 0～1，至于为什么不是绝对的 0，猜测可能与性能有关，总的来说，时间确实缩短了：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dced5471b7fc422d9f9eb28259b26ce2~tplv-k3u1fbpfcp-zoom-1.image)\\n购物网站的秒杀活动\\n一般情况下，从服务器拿到倒数时间后，前端的执行倒计时程序持续运行，事实上，显示时间相比实际时间会越来越慢的\\n究其原因，倒计时通常是使用定时器实现，而 JS 的单线程特性使得同步任务执行过程中出现阻塞时，任务队列中的异步任务并不能及时执行，因此浏览器并不能保证在定时器设置的时间结束后代码总是被准时执行，从而造成了倒计时的偏差\\n一般的解决方法是前端定时向服务器发送请求获取最新的时间差来校准倒计时时间，和用户一直按 F5 刷新没啥区别，比较简单粗暴，下面的方法可以一定程度上解决这个问题，纯前端控制，不依赖于后端。源地址已忘\\n 五、使用 setTimeout 替代 setInterval\\n定时器指定的时间间隔，表示的是何时将定时器的代码添加到消息队列，而不是何时执行代码。所以真正何时执行代码的时间是不能保证的，它取决于何时被主线程的事件循环获取到，并执行\\n假设有 `setInterval(function, 100)`，它的执行可能是这样的：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/30346ef998214cabb6c95141b19ad25f~tplv-k3u1fbpfcp-zoom-1.image)\\n上图可见，setInterval 每隔 100ms 往队列中添加一个事件；100ms 后，添加 T1 定时器代码至队列中，主线程中还有任务在执行，所以等待，some event 执行结束后执行 T1 定时器代码；又过了100ms，T2定时器被添加到队列中，主线程还在执行 T1 代码，所以等待；又过了 100ms，理论上又要往队列里推一个定时器代码，但由于此时 T2 还在队列中，所以 T3 不会被添加，结果就是此时被跳过；然后，T1 定时器执行结束后马上执行了 T2 代码，所以并没有达到定时器间隔的效果\\n综上所述，serInterval 有两个问题：\\n-   可能多个定时器会连续执行（会导致后续的间隔误差）\\n-   某些间隔会被跳过（这么设计也可能是为了尽量避免第一个问题）\\n因而一般会使用 setTimeout 模拟 setInterval，来规避掉上面的缺点\\n```\\nsetTimeout(function fn() {\\n// do something\\nsetTimeout(fn, delay)\\n}, delay)\\n```\\n这样的话，在前一个定时器代码执行完成前，不会向队列中插入新的定时器（不会连续执行），而且保证了定时器间隔\\n注：有些说法，可能对当队列中存在定时器实例时，是否会跳过添加实例，存在质疑；还有的说法是，在 Node 环境中会跳过，在浏览器环境中会累加；不过我这边实测，不管在 Node 还是在 web 中，当队列中存在定时器实例时，都会跳过添加的；当然也有可能是浏览器版本或内核不同，表现不同，没有细测；感兴趣的小伙伴可以使用一下代码实测下，看是会一次性输出，还是会间隔性输出\\n**这边顺便一提，涉及到做动画的场景可能会使用定时器**\\n-   由于定时器的种种误差问题，以及固定时间间隔不一定与屏幕刷新时间相同，可能会引起丢帧；而且定时器在后台仍会继续执行，也会造成资源的浪费\\n-   一般情况下，还是推荐使用 requestAnimationFrame，RAF 重绘或回流（重排）的时间间隔是紧紧跟随浏览器的刷新频率的；并且在页面未激活时，该页面的屏幕刷新任务也会被暂停，当页面被激活时，任务会从上次停留的地方继续执行，这也就意味着将耗费更少的资源，提升了性能\\n### 总结\\n-   setTimeout 和 setInterval 都存在计时误差，不会严格按照既定时间执行\\n-   一般情况下，这些误差不会造成太大影响，只对于某些特殊场景，对时间要求比较严格的情况下，需要特殊处理\\n-   对于 setInterval，个人建议能不用尽量不用，使用 setTimeout 的嵌套实现，可以规避掉一些潜在问题的发生\\n'\n      },{\n        id: 24,\n        name: '望舟',\n        day: '1',\n        category: '面试',\n        title: '让“作用域和闭包”说人话！ ',\n        intro: '让作用域和闭包说人话，面试时候有话可讲！',\n        imgsrc: require('../assets/image/ArticleImg1.webp'),\n        content:\n        '# 一、作用域是什么\\n作用域与编译原理息息相关，但是我们暂时还不用管编译原理的复杂过程，它的作用可以简单看下面这张图： \\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2dc72d14948848159ed01ab7af90a090~tplv-k3u1fbpfcp-zoom-1.image)\\n简单来说就是“我得知道这些变量在哪里，不然我怎么取到它们再进行下一步操作呀！”\\n***\\nJavaScript的编译发生代码执行前的几微妙内，并不是发生在构建之前。\\n引擎根据作用域进行变量查询，存在两种影响结果的查找方式——LHS/RHS。\\nRHS（谁是源头【获取变量的值】）：需要找到这个变量的值才可以进行下一步操作。如console.log(a)，即得到a的值后执行操作。查询操作失败报ReferenceError异常，不合理操作报TypeError异常。\\nLHS（目标是谁【对变量赋值】）：为操作找到一个容器，如var a = 2，即找到一个a，给它赋值为2。查询操作失败在非严格模式下会创建变量。*这个特性可以解释变量提升这个东西，也就是“赋值可以跑到声明前”。为了完成赋值这个动作，我可以自己声明一下嘛。现在可以暂时放一下这句话，等到提升时再想。*\\n> ~~不推荐使用with/eval~~\\n# 二、函数作用域和块作用域\\n> 函数作用域含义：属于这个函数的全部变量都可以在整个函数的范围内使用或复用。\\nfunction 开头的就是函数声明，其余则是函数表达式。 **正常函数声明被绑定在作用域中，函数表达式则绑定在函数自身中。** 这句话不理解可以先埋下一个伏笔，等下面看到闭包的时候再回头看会回味无穷。\\n```\\n// 函数声明\\nfunction foo(){\\nvar a = 2;\\nconsole.log(a);\\n}\\nfoo()\\n// 函数表达式\\n(function foo(){\\nvar a = 2;\\nconsole.log(a);\\n})()\\nvar a = 2;\\n(function IIFE(global){\\nvar a = 3;\\nconsole.log(a, global.a)// 3,2\\n})(window)\\n// 函数表达式\\nvar foo = function(){\\nconsole.log(1)\\n}\\n```\\n那么怎么搞出一个块作用域呢？块作用域的声明方式有：\\n1.  with 仅在with声明中有效\\n1.  try/catch catch内的变量仅在catch内使用\\n1.  let 劫持所在块的作用域\\n1.  const 与let类似，变量不可修改\\n块作用域的优势：1. 有利于垃圾回收（块作用域内代码执行后可以直接回收）；2. 解决 var 循环问题。\\n# 三、提升\\n> 没有赋值只有声明的变量是会报错 undefined，提升也只是提升了个声明而已；再换句话说，赋值可以跑在声明的前面。光说不干假把式~\\n第一段代码可以顺利执行，因为对于 a 的声明会提升到最顶部，因此在作用域内能够找到a。但是这第二段代码中，`var a = 2;`会被拆分为两步，第一步是声明 a ，然后就执行了输出语句，还没有进行赋值呢，因此会出现报错。 这个例子恰好说明了“赋值可以跑在声明前面”。\\n***\\n例二：\\n```\\nfoo()\\nfunction foo(){\\nconsole.log(a); //undefined\\nvar a;\\n}\\n```\\n这里也是和例一一样，a会提升声明（作用域在foo内），但是只有声明，没有赋值，所以仍然会报错。\\n***\\n同样是声明提升，***函数的优先级高于变量***。这里的例子我们可以把函数表达式当作是一个变量的声明，相当于给foo2 这个变量赋值了一个函数。那么由于函数的优先级更高，这个foo2无法覆盖之前的foo1，所以输出仍然是1。\\n# 四、闭包\\n## 1. 闭包是什么\\n首先我们得知道闭包是什么，来看看书里是怎么说的：\\n> 函数在 定义时的词法作用域以外的地方 被调用，闭包使得函数可以继续访问定义时的词法作用域。\\n这句话的形容使闭包看起来像一种_访问作用域的方法_。我们继续看下一句：\\n> 无论通过何种手段将内部函数传递到所在的词法作用域以外，它都会持有对原始定义作用域的引用，无论在何处执行这个函数都会使用闭包。\\n**因此，不应该把比较理解成一种现象或者原理，应该作为一种工具方便我们使用来解决 JavaScript 中的一些问题。这是一个重要的理解点。** 用自己的话再来说一下闭包是什么吧：\\n一个函数（A）引用着另一个函数的变量（B），即使 B 已经顺利执行结束了也不会被回收，因为 A 还引用着呢，所以 B 的各种变量也要被保存。\\n'\n      },{\n        id: 25,\n        name: 'ZEROL',\n        day: '22',\n        category: 'JavaScript',\n        title: 'setTimeout 和 setInterval，你们两位同学注意点时间~ ',\n        intro: '你们两位同学注意点时间~',\n        imgsrc: require('../assets/image/ArticleImg2.webp'),\n        content:\n        '## 一、基本定义与用法 \\n### 1、定义\\n-   `setTimeout()`方法用于在指定的时间（单位毫秒）后执行回调函数或指定的一段代码\\n-   `setInterval()`方法可按照指定的时间间隔（单位毫秒）来调用回调函数或指定的一段代码\\n### 2、参数\\n-   第一个参数 function，必填，回调函数。或者是一段字符串代码，但是这种方式不建议使用，就和使用`eval()`一样，有安全风险；而且还有作用域问题（字符串会在全局作用域内被解释执行）\\n```\\nsetTimeout(\\'console.log(123);fn()\\', 2000)\\n```\\n-   第二个参数 delay，可选，单位是 ms，对于`setTimeout`是延迟时间，对于`setInterval`是间隔时间，默认都是 0\\n-   第三个参数 param1,param2,param3...，可选，是传递给回调函数的参数，不大常用\\n ```\\nsetTimeout(function (a, b) {\\nconsole.log(a, b)\\n}, 2000, \\'我是\\', \\'定时器\\')\\n```\\n### 3、返回值\\n-   返回一个 ID（数字），可以将这个 ID 传递给`clearTimeout()`或`clearInterval()`来取消执行\\n-   PS: `setTimeout()`和`setInterval()`共用一个编号池，技术上，`clearTimeout()`和`clearInterval()`可以互换使用，但是为了避免混淆，一般不这么做\\n## 二、setTimeout 和 setInterval 的实际表现\\n### 1、使用 setInterval 实现计时\\n```\\nconst startTime = new Date().getTime()\\nlet count = 0\\nconst interval = setInterval(function () {\\ncount++\\nconsole.log(new Date().getTime() - (startTime + count * 1000) + \\'ms\\')\\nif(count === 10){\\nclearInterval(interval);\\n}\\n}, 1000)\\n```\\n`new Date().getTime() - (startTime + count * 1000)`理想情况下应该是 0ms，然而事实并不是这样，而是存在着误差：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ba8397cf6a184ed6a32b285693cff3c0~tplv-k3u1fbpfcp-zoom-1.image)\\n### 2、使用 setTimeout 实现计时\\n```\\nconst startTime = new Date().getTime(), delay = 1000\\nlet count = 0\\nlet timer = setTimeout(doFunc, delay)\\nfunction doFunc(){\\ncount++\\nconsole.log(new Date().getTime() - (startTime + count * 1000) + \\'ms\\')\\nif(count < 10){\\ntimer = setTimeout(doFunc, delay)\\n}\\n}\\n```\\nsetTimeout 也同样存在着误差，而且时间越来越大（setTimeout 需要在同步代码执行完成后才重新开始计时）：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c59850b3ac2a475eb718b5492630d88e~tplv-k3u1fbpfcp-zoom-1.image)\\n## 三、为什么会出现误差\\n### 1、setTimeout 的最短延迟时间\\n`setTimeout`遵循的规范由 whatwg 来维护，在 [HTML Standard - 8.6 Timers](https://link.juejin.cn?target=https%3A%2F%2Fhtml.spec.whatwg.org%2Fmultipage%2Ftimers-and-user-prompts.html%23dom-settimeout \"https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-settimeout\") 中写到了定义定时器的详细步骤，其中有两条：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ffbfbab446fe494fb44c54181f48aa31~tplv-k3u1fbpfcp-zoom-1.image)\\n上面的意思就是说，如果设置的 timeout 小于 0，则设置为 0，如果嵌套的层级超过了 5 层（计时器嵌套），并且 timeout 小于 4ms，则设置 timeout 为 4ms。并且，在不同浏览器中出现这种最小延迟的情况有所不同\\n具体的源代码实现以及各大浏览器实现的不同，大家可以参考这篇文章：[为什么 setTimeout 有最小延时 4ms ？](https://link.juejin.cn?target=https%3A%2F%2Fwww.bruceyj.com%2Ffront-end-interview-summary%2Fsystem-design%2Fwhy-is-the-design%2F2-why-setTimeout-4ms.html \"https://www.bruceyj.com/front-end-interview-summary/system-design/why-is-the-design/2-why-setTimeout-4ms.html\")\\n这里只看结论，定时器本身的定义步骤是造成其出现误差的原因之一\\n### 2、setInterval 的最小间隔时间\\n在 HTML5 标准中，setInterval 的最小间隔为 10ms，虽然我在规范文档中并未找到其相关说明，但是经过实际测试，也确实存在最小间隔时间，例如以下代码：\\n```\\nlet startTime = new Date().getTime()\\nlet count = 0\\nconst interval = setInterval(function () {\\ncount++\\n console.log(new Date().getTime() - startTime + \\'ms\\')\\nstartTime = new Date().getTime()\\nif(count === 10) {\\nclearInterval(interval)\\n}\\n}, 0)\\n```\\n测试结果：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9bcffa807d384a7ab542fd1174186b12~tplv-k3u1fbpfcp-zoom-1.image)\\n虽然没有 10ms 那么大的间隔，但是间隔仍然存在，猜测具体的间隔时间是和浏览器实现以及设备性能有关，无论如何，间隔是确实存在的\\n另外，当使用 setInterval 时间间隔到点后，仅当队列中没有该定时器的任何其他代码实例时，才会将定时器的代码添加到队列中，如果有的话，则不会添加，造成堵塞，这个也与 JS 的事件循环有关\\n 未被激活的tabs的定时最小延迟 >= 1000ms\\n为了优化后台 tab 的加载损耗（以及降低耗电量），在未被激活的 tab 中定时器的最小延时限制为1s(1000ms)，具体时间在不同的浏览器实现中也有差别\\n  JS 的事件循环机制\\n`setTimeout`和`setInterval`中的时间并不是到点就立即执行，而是到点将其回调函数加入异步事件队列中，按照队列先进先出的性质，该回调函数到点之后是否能执行还得取决于是否属于队列首位，如果前头还有其他事件在等待，则不能按点执行，如果没有，则将其放入同步队列执行。具体事件循环机制，可以参考这篇文章：[动图学习-EventLoop](https://juejin.cn/post/6969028296893792286 \"https://juejin.cn/post/6969028296893792286\")\\n## 四、解决方案\\n1、在浏览器中实现一个 0ms 延时的定时器\\n可以参考如下代码（来自于国外的一篇博客，也是 MDN 推荐的方法），主要是使用了 postMessage 方法，异步的执行了回调函数，并且速度要比 setTimeout(0) 要快的多。具体比较可以参照原文：[setTimeout with a shorter delay](https://link.juejin.cn?target=https%3A%2F%2Fdbaron.org%2Flog%2F20100309-faster-timeouts \"https://dbaron.org/log/20100309-faster-timeouts\")\\n使用 setTimeout(0) 得到的时间：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8994a7da32e549cd9d06c34d1ac0bbc8~tplv-k3u1fbpfcp-zoom-1.image)\\n将 setTimeout 改成 setZeroTimeout 后得到的时间，时间几乎都在 0～1，至于为什么不是绝对的 0，猜测可能与性能有关，总的来说，时间确实缩短了：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dced5471b7fc422d9f9eb28259b26ce2~tplv-k3u1fbpfcp-zoom-1.image)\\n购物网站的秒杀活动\\n一般情况下，从服务器拿到倒数时间后，前端的执行倒计时程序持续运行，事实上，显示时间相比实际时间会越来越慢的\\n究其原因，倒计时通常是使用定时器实现，而 JS 的单线程特性使得同步任务执行过程中出现阻塞时，任务队列中的异步任务并不能及时执行，因此浏览器并不能保证在定时器设置的时间结束后代码总是被准时执行，从而造成了倒计时的偏差\\n一般的解决方法是前端定时向服务器发送请求获取最新的时间差来校准倒计时时间，和用户一直按 F5 刷新没啥区别，比较简单粗暴，下面的方法可以一定程度上解决这个问题，纯前端控制，不依赖于后端。源地址已忘\\n 五、使用 setTimeout 替代 setInterval\\n定时器指定的时间间隔，表示的是何时将定时器的代码添加到消息队列，而不是何时执行代码。所以真正何时执行代码的时间是不能保证的，它取决于何时被主线程的事件循环获取到，并执行\\n假设有 `setInterval(function, 100)`，它的执行可能是这样的：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/30346ef998214cabb6c95141b19ad25f~tplv-k3u1fbpfcp-zoom-1.image)\\n上图可见，setInterval 每隔 100ms 往队列中添加一个事件；100ms 后，添加 T1 定时器代码至队列中，主线程中还有任务在执行，所以等待，some event 执行结束后执行 T1 定时器代码；又过了100ms，T2定时器被添加到队列中，主线程还在执行 T1 代码，所以等待；又过了 100ms，理论上又要往队列里推一个定时器代码，但由于此时 T2 还在队列中，所以 T3 不会被添加，结果就是此时被跳过；然后，T1 定时器执行结束后马上执行了 T2 代码，所以并没有达到定时器间隔的效果\\n综上所述，serInterval 有两个问题：\\n-   可能多个定时器会连续执行（会导致后续的间隔误差）\\n-   某些间隔会被跳过（这么设计也可能是为了尽量避免第一个问题）\\n因而一般会使用 setTimeout 模拟 setInterval，来规避掉上面的缺点\\n```\\nsetTimeout(function fn() {\\n// do something\\nsetTimeout(fn, delay)\\n}, delay)\\n```\\n这样的话，在前一个定时器代码执行完成前，不会向队列中插入新的定时器（不会连续执行），而且保证了定时器间隔\\n注：有些说法，可能对当队列中存在定时器实例时，是否会跳过添加实例，存在质疑；还有的说法是，在 Node 环境中会跳过，在浏览器环境中会累加；不过我这边实测，不管在 Node 还是在 web 中，当队列中存在定时器实例时，都会跳过添加的；当然也有可能是浏览器版本或内核不同，表现不同，没有细测；感兴趣的小伙伴可以使用一下代码实测下，看是会一次性输出，还是会间隔性输出\\n**这边顺便一提，涉及到做动画的场景可能会使用定时器**\\n-   由于定时器的种种误差问题，以及固定时间间隔不一定与屏幕刷新时间相同，可能会引起丢帧；而且定时器在后台仍会继续执行，也会造成资源的浪费\\n-   一般情况下，还是推荐使用 requestAnimationFrame，RAF 重绘或回流（重排）的时间间隔是紧紧跟随浏览器的刷新频率的；并且在页面未激活时，该页面的屏幕刷新任务也会被暂停，当页面被激活时，任务会从上次停留的地方继续执行，这也就意味着将耗费更少的资源，提升了性能\\n### 总结\\n-   setTimeout 和 setInterval 都存在计时误差，不会严格按照既定时间执行\\n-   一般情况下，这些误差不会造成太大影响，只对于某些特殊场景，对时间要求比较严格的情况下，需要特殊处理\\n-   对于 setInterval，个人建议能不用尽量不用，使用 setTimeout 的嵌套实现，可以规避掉一些潜在问题的发生\\n'\n      },{\n        id: 26,\n        name: '望舟',\n        day: '1',\n        category: '面试',\n        title: '让“作用域和闭包”说人话！ ',\n        intro: '让作用域和闭包说人话，面试时候有话可讲！',\n        imgsrc: require('../assets/image/ArticleImg1.webp'),\n        content:\n        '# 一、作用域是什么\\n作用域与编译原理息息相关，但是我们暂时还不用管编译原理的复杂过程，它的作用可以简单看下面这张图： \\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2dc72d14948848159ed01ab7af90a090~tplv-k3u1fbpfcp-zoom-1.image)\\n简单来说就是“我得知道这些变量在哪里，不然我怎么取到它们再进行下一步操作呀！”\\n***\\nJavaScript的编译发生代码执行前的几微妙内，并不是发生在构建之前。\\n引擎根据作用域进行变量查询，存在两种影响结果的查找方式——LHS/RHS。\\nRHS（谁是源头【获取变量的值】）：需要找到这个变量的值才可以进行下一步操作。如console.log(a)，即得到a的值后执行操作。查询操作失败报ReferenceError异常，不合理操作报TypeError异常。\\nLHS（目标是谁【对变量赋值】）：为操作找到一个容器，如var a = 2，即找到一个a，给它赋值为2。查询操作失败在非严格模式下会创建变量。*这个特性可以解释变量提升这个东西，也就是“赋值可以跑到声明前”。为了完成赋值这个动作，我可以自己声明一下嘛。现在可以暂时放一下这句话，等到提升时再想。*\\n> ~~不推荐使用with/eval~~\\n# 二、函数作用域和块作用域\\n> 函数作用域含义：属于这个函数的全部变量都可以在整个函数的范围内使用或复用。\\nfunction 开头的就是函数声明，其余则是函数表达式。 **正常函数声明被绑定在作用域中，函数表达式则绑定在函数自身中。** 这句话不理解可以先埋下一个伏笔，等下面看到闭包的时候再回头看会回味无穷。\\n```\\n// 函数声明\\nfunction foo(){\\nvar a = 2;\\nconsole.log(a);\\n}\\nfoo()\\n// 函数表达式\\n(function foo(){\\nvar a = 2;\\nconsole.log(a);\\n})()\\nvar a = 2;\\n(function IIFE(global){\\nvar a = 3;\\nconsole.log(a, global.a)// 3,2\\n})(window)\\n// 函数表达式\\nvar foo = function(){\\nconsole.log(1)\\n}\\n```\\n那么怎么搞出一个块作用域呢？块作用域的声明方式有：\\n1.  with 仅在with声明中有效\\n1.  try/catch catch内的变量仅在catch内使用\\n1.  let 劫持所在块的作用域\\n1.  const 与let类似，变量不可修改\\n块作用域的优势：1. 有利于垃圾回收（块作用域内代码执行后可以直接回收）；2. 解决 var 循环问题。\\n# 三、提升\\n> 没有赋值只有声明的变量是会报错 undefined，提升也只是提升了个声明而已；再换句话说，赋值可以跑在声明的前面。光说不干假把式~\\n第一段代码可以顺利执行，因为对于 a 的声明会提升到最顶部，因此在作用域内能够找到a。但是这第二段代码中，`var a = 2;`会被拆分为两步，第一步是声明 a ，然后就执行了输出语句，还没有进行赋值呢，因此会出现报错。 这个例子恰好说明了“赋值可以跑在声明前面”。\\n***\\n例二：\\n```\\nfoo()\\nfunction foo(){\\nconsole.log(a); //undefined\\nvar a;\\n}\\n```\\n这里也是和例一一样，a会提升声明（作用域在foo内），但是只有声明，没有赋值，所以仍然会报错。\\n***\\n同样是声明提升，***函数的优先级高于变量***。这里的例子我们可以把函数表达式当作是一个变量的声明，相当于给foo2 这个变量赋值了一个函数。那么由于函数的优先级更高，这个foo2无法覆盖之前的foo1，所以输出仍然是1。\\n# 四、闭包\\n## 1. 闭包是什么\\n首先我们得知道闭包是什么，来看看书里是怎么说的：\\n> 函数在 定义时的词法作用域以外的地方 被调用，闭包使得函数可以继续访问定义时的词法作用域。\\n这句话的形容使闭包看起来像一种_访问作用域的方法_。我们继续看下一句：\\n> 无论通过何种手段将内部函数传递到所在的词法作用域以外，它都会持有对原始定义作用域的引用，无论在何处执行这个函数都会使用闭包。\\n**因此，不应该把比较理解成一种现象或者原理，应该作为一种工具方便我们使用来解决 JavaScript 中的一些问题。这是一个重要的理解点。** 用自己的话再来说一下闭包是什么吧：\\n一个函数（A）引用着另一个函数的变量（B），即使 B 已经顺利执行结束了也不会被回收，因为 A 还引用着呢，所以 B 的各种变量也要被保存。\\n'\n      },{\n        id: 27,\n        name: 'ZEROL',\n        day: '22',\n        category: 'JavaScript',\n        title: 'setTimeout 和 setInterval，你们两位同学注意点时间~ ',\n        intro: '你们两位同学注意点时间~',\n        imgsrc: require('../assets/image/ArticleImg2.webp'),\n        content:\n        '## 一、基本定义与用法 \\n### 1、定义\\n-   `setTimeout()`方法用于在指定的时间（单位毫秒）后执行回调函数或指定的一段代码\\n-   `setInterval()`方法可按照指定的时间间隔（单位毫秒）来调用回调函数或指定的一段代码\\n### 2、参数\\n-   第一个参数 function，必填，回调函数。或者是一段字符串代码，但是这种方式不建议使用，就和使用`eval()`一样，有安全风险；而且还有作用域问题（字符串会在全局作用域内被解释执行）\\n```\\nsetTimeout(\\'console.log(123);fn()\\', 2000)\\n```\\n-   第二个参数 delay，可选，单位是 ms，对于`setTimeout`是延迟时间，对于`setInterval`是间隔时间，默认都是 0\\n-   第三个参数 param1,param2,param3...，可选，是传递给回调函数的参数，不大常用\\n ```\\nsetTimeout(function (a, b) {\\nconsole.log(a, b)\\n}, 2000, \\'我是\\', \\'定时器\\')\\n```\\n### 3、返回值\\n-   返回一个 ID（数字），可以将这个 ID 传递给`clearTimeout()`或`clearInterval()`来取消执行\\n-   PS: `setTimeout()`和`setInterval()`共用一个编号池，技术上，`clearTimeout()`和`clearInterval()`可以互换使用，但是为了避免混淆，一般不这么做\\n## 二、setTimeout 和 setInterval 的实际表现\\n### 1、使用 setInterval 实现计时\\n```\\nconst startTime = new Date().getTime()\\nlet count = 0\\nconst interval = setInterval(function () {\\ncount++\\nconsole.log(new Date().getTime() - (startTime + count * 1000) + \\'ms\\')\\nif(count === 10){\\nclearInterval(interval);\\n}\\n}, 1000)\\n```\\n`new Date().getTime() - (startTime + count * 1000)`理想情况下应该是 0ms，然而事实并不是这样，而是存在着误差：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ba8397cf6a184ed6a32b285693cff3c0~tplv-k3u1fbpfcp-zoom-1.image)\\n### 2、使用 setTimeout 实现计时\\n```\\nconst startTime = new Date().getTime(), delay = 1000\\nlet count = 0\\nlet timer = setTimeout(doFunc, delay)\\nfunction doFunc(){\\ncount++\\nconsole.log(new Date().getTime() - (startTime + count * 1000) + \\'ms\\')\\nif(count < 10){\\ntimer = setTimeout(doFunc, delay)\\n}\\n}\\n```\\nsetTimeout 也同样存在着误差，而且时间越来越大（setTimeout 需要在同步代码执行完成后才重新开始计时）：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c59850b3ac2a475eb718b5492630d88e~tplv-k3u1fbpfcp-zoom-1.image)\\n## 三、为什么会出现误差\\n### 1、setTimeout 的最短延迟时间\\n`setTimeout`遵循的规范由 whatwg 来维护，在 [HTML Standard - 8.6 Timers](https://link.juejin.cn?target=https%3A%2F%2Fhtml.spec.whatwg.org%2Fmultipage%2Ftimers-and-user-prompts.html%23dom-settimeout \"https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-settimeout\") 中写到了定义定时器的详细步骤，其中有两条：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ffbfbab446fe494fb44c54181f48aa31~tplv-k3u1fbpfcp-zoom-1.image)\\n上面的意思就是说，如果设置的 timeout 小于 0，则设置为 0，如果嵌套的层级超过了 5 层（计时器嵌套），并且 timeout 小于 4ms，则设置 timeout 为 4ms。并且，在不同浏览器中出现这种最小延迟的情况有所不同\\n具体的源代码实现以及各大浏览器实现的不同，大家可以参考这篇文章：[为什么 setTimeout 有最小延时 4ms ？](https://link.juejin.cn?target=https%3A%2F%2Fwww.bruceyj.com%2Ffront-end-interview-summary%2Fsystem-design%2Fwhy-is-the-design%2F2-why-setTimeout-4ms.html \"https://www.bruceyj.com/front-end-interview-summary/system-design/why-is-the-design/2-why-setTimeout-4ms.html\")\\n这里只看结论，定时器本身的定义步骤是造成其出现误差的原因之一\\n### 2、setInterval 的最小间隔时间\\n在 HTML5 标准中，setInterval 的最小间隔为 10ms，虽然我在规范文档中并未找到其相关说明，但是经过实际测试，也确实存在最小间隔时间，例如以下代码：\\n```\\nlet startTime = new Date().getTime()\\nlet count = 0\\nconst interval = setInterval(function () {\\ncount++\\n console.log(new Date().getTime() - startTime + \\'ms\\')\\nstartTime = new Date().getTime()\\nif(count === 10) {\\nclearInterval(interval)\\n}\\n}, 0)\\n```\\n测试结果：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9bcffa807d384a7ab542fd1174186b12~tplv-k3u1fbpfcp-zoom-1.image)\\n虽然没有 10ms 那么大的间隔，但是间隔仍然存在，猜测具体的间隔时间是和浏览器实现以及设备性能有关，无论如何，间隔是确实存在的\\n另外，当使用 setInterval 时间间隔到点后，仅当队列中没有该定时器的任何其他代码实例时，才会将定时器的代码添加到队列中，如果有的话，则不会添加，造成堵塞，这个也与 JS 的事件循环有关\\n 未被激活的tabs的定时最小延迟 >= 1000ms\\n为了优化后台 tab 的加载损耗（以及降低耗电量），在未被激活的 tab 中定时器的最小延时限制为1s(1000ms)，具体时间在不同的浏览器实现中也有差别\\n  JS 的事件循环机制\\n`setTimeout`和`setInterval`中的时间并不是到点就立即执行，而是到点将其回调函数加入异步事件队列中，按照队列先进先出的性质，该回调函数到点之后是否能执行还得取决于是否属于队列首位，如果前头还有其他事件在等待，则不能按点执行，如果没有，则将其放入同步队列执行。具体事件循环机制，可以参考这篇文章：[动图学习-EventLoop](https://juejin.cn/post/6969028296893792286 \"https://juejin.cn/post/6969028296893792286\")\\n## 四、解决方案\\n1、在浏览器中实现一个 0ms 延时的定时器\\n可以参考如下代码（来自于国外的一篇博客，也是 MDN 推荐的方法），主要是使用了 postMessage 方法，异步的执行了回调函数，并且速度要比 setTimeout(0) 要快的多。具体比较可以参照原文：[setTimeout with a shorter delay](https://link.juejin.cn?target=https%3A%2F%2Fdbaron.org%2Flog%2F20100309-faster-timeouts \"https://dbaron.org/log/20100309-faster-timeouts\")\\n使用 setTimeout(0) 得到的时间：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8994a7da32e549cd9d06c34d1ac0bbc8~tplv-k3u1fbpfcp-zoom-1.image)\\n将 setTimeout 改成 setZeroTimeout 后得到的时间，时间几乎都在 0～1，至于为什么不是绝对的 0，猜测可能与性能有关，总的来说，时间确实缩短了：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dced5471b7fc422d9f9eb28259b26ce2~tplv-k3u1fbpfcp-zoom-1.image)\\n购物网站的秒杀活动\\n一般情况下，从服务器拿到倒数时间后，前端的执行倒计时程序持续运行，事实上，显示时间相比实际时间会越来越慢的\\n究其原因，倒计时通常是使用定时器实现，而 JS 的单线程特性使得同步任务执行过程中出现阻塞时，任务队列中的异步任务并不能及时执行，因此浏览器并不能保证在定时器设置的时间结束后代码总是被准时执行，从而造成了倒计时的偏差\\n一般的解决方法是前端定时向服务器发送请求获取最新的时间差来校准倒计时时间，和用户一直按 F5 刷新没啥区别，比较简单粗暴，下面的方法可以一定程度上解决这个问题，纯前端控制，不依赖于后端。源地址已忘\\n 五、使用 setTimeout 替代 setInterval\\n定时器指定的时间间隔，表示的是何时将定时器的代码添加到消息队列，而不是何时执行代码。所以真正何时执行代码的时间是不能保证的，它取决于何时被主线程的事件循环获取到，并执行\\n假设有 `setInterval(function, 100)`，它的执行可能是这样的：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/30346ef998214cabb6c95141b19ad25f~tplv-k3u1fbpfcp-zoom-1.image)\\n上图可见，setInterval 每隔 100ms 往队列中添加一个事件；100ms 后，添加 T1 定时器代码至队列中，主线程中还有任务在执行，所以等待，some event 执行结束后执行 T1 定时器代码；又过了100ms，T2定时器被添加到队列中，主线程还在执行 T1 代码，所以等待；又过了 100ms，理论上又要往队列里推一个定时器代码，但由于此时 T2 还在队列中，所以 T3 不会被添加，结果就是此时被跳过；然后，T1 定时器执行结束后马上执行了 T2 代码，所以并没有达到定时器间隔的效果\\n综上所述，serInterval 有两个问题：\\n-   可能多个定时器会连续执行（会导致后续的间隔误差）\\n-   某些间隔会被跳过（这么设计也可能是为了尽量避免第一个问题）\\n因而一般会使用 setTimeout 模拟 setInterval，来规避掉上面的缺点\\n```\\nsetTimeout(function fn() {\\n// do something\\nsetTimeout(fn, delay)\\n}, delay)\\n```\\n这样的话，在前一个定时器代码执行完成前，不会向队列中插入新的定时器（不会连续执行），而且保证了定时器间隔\\n注：有些说法，可能对当队列中存在定时器实例时，是否会跳过添加实例，存在质疑；还有的说法是，在 Node 环境中会跳过，在浏览器环境中会累加；不过我这边实测，不管在 Node 还是在 web 中，当队列中存在定时器实例时，都会跳过添加的；当然也有可能是浏览器版本或内核不同，表现不同，没有细测；感兴趣的小伙伴可以使用一下代码实测下，看是会一次性输出，还是会间隔性输出\\n**这边顺便一提，涉及到做动画的场景可能会使用定时器**\\n-   由于定时器的种种误差问题，以及固定时间间隔不一定与屏幕刷新时间相同，可能会引起丢帧；而且定时器在后台仍会继续执行，也会造成资源的浪费\\n-   一般情况下，还是推荐使用 requestAnimationFrame，RAF 重绘或回流（重排）的时间间隔是紧紧跟随浏览器的刷新频率的；并且在页面未激活时，该页面的屏幕刷新任务也会被暂停，当页面被激活时，任务会从上次停留的地方继续执行，这也就意味着将耗费更少的资源，提升了性能\\n### 总结\\n-   setTimeout 和 setInterval 都存在计时误差，不会严格按照既定时间执行\\n-   一般情况下，这些误差不会造成太大影响，只对于某些特殊场景，对时间要求比较严格的情况下，需要特殊处理\\n-   对于 setInterval，个人建议能不用尽量不用，使用 setTimeout 的嵌套实现，可以规避掉一些潜在问题的发生\\n'\n      },{\n        id: 28,\n        name: 'ZEROL',\n        day: '22',\n        category: 'JavaScript',\n        title: 'setTimeout 和 setInterval，你们两位同学注意点时间~ ',\n        intro: '你们两位同学注意点时间~',\n        imgsrc: require('../assets/image/ArticleImg2.webp'),\n        content:\n        '## 一、基本定义与用法 \\n### 1、定义\\n-   `setTimeout()`方法用于在指定的时间（单位毫秒）后执行回调函数或指定的一段代码\\n-   `setInterval()`方法可按照指定的时间间隔（单位毫秒）来调用回调函数或指定的一段代码\\n### 2、参数\\n-   第一个参数 function，必填，回调函数。或者是一段字符串代码，但是这种方式不建议使用，就和使用`eval()`一样，有安全风险；而且还有作用域问题（字符串会在全局作用域内被解释执行）\\n```\\nsetTimeout(\\'console.log(123);fn()\\', 2000)\\n```\\n-   第二个参数 delay，可选，单位是 ms，对于`setTimeout`是延迟时间，对于`setInterval`是间隔时间，默认都是 0\\n-   第三个参数 param1,param2,param3...，可选，是传递给回调函数的参数，不大常用\\n ```\\nsetTimeout(function (a, b) {\\nconsole.log(a, b)\\n}, 2000, \\'我是\\', \\'定时器\\')\\n```\\n### 3、返回值\\n-   返回一个 ID（数字），可以将这个 ID 传递给`clearTimeout()`或`clearInterval()`来取消执行\\n-   PS: `setTimeout()`和`setInterval()`共用一个编号池，技术上，`clearTimeout()`和`clearInterval()`可以互换使用，但是为了避免混淆，一般不这么做\\n## 二、setTimeout 和 setInterval 的实际表现\\n### 1、使用 setInterval 实现计时\\n```\\nconst startTime = new Date().getTime()\\nlet count = 0\\nconst interval = setInterval(function () {\\ncount++\\nconsole.log(new Date().getTime() - (startTime + count * 1000) + \\'ms\\')\\nif(count === 10){\\nclearInterval(interval);\\n}\\n}, 1000)\\n```\\n`new Date().getTime() - (startTime + count * 1000)`理想情况下应该是 0ms，然而事实并不是这样，而是存在着误差：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ba8397cf6a184ed6a32b285693cff3c0~tplv-k3u1fbpfcp-zoom-1.image)\\n### 2、使用 setTimeout 实现计时\\n```\\nconst startTime = new Date().getTime(), delay = 1000\\nlet count = 0\\nlet timer = setTimeout(doFunc, delay)\\nfunction doFunc(){\\ncount++\\nconsole.log(new Date().getTime() - (startTime + count * 1000) + \\'ms\\')\\nif(count < 10){\\ntimer = setTimeout(doFunc, delay)\\n}\\n}\\n```\\nsetTimeout 也同样存在着误差，而且时间越来越大（setTimeout 需要在同步代码执行完成后才重新开始计时）：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c59850b3ac2a475eb718b5492630d88e~tplv-k3u1fbpfcp-zoom-1.image)\\n## 三、为什么会出现误差\\n### 1、setTimeout 的最短延迟时间\\n`setTimeout`遵循的规范由 whatwg 来维护，在 [HTML Standard - 8.6 Timers](https://link.juejin.cn?target=https%3A%2F%2Fhtml.spec.whatwg.org%2Fmultipage%2Ftimers-and-user-prompts.html%23dom-settimeout \"https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-settimeout\") 中写到了定义定时器的详细步骤，其中有两条：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ffbfbab446fe494fb44c54181f48aa31~tplv-k3u1fbpfcp-zoom-1.image)\\n上面的意思就是说，如果设置的 timeout 小于 0，则设置为 0，如果嵌套的层级超过了 5 层（计时器嵌套），并且 timeout 小于 4ms，则设置 timeout 为 4ms。并且，在不同浏览器中出现这种最小延迟的情况有所不同\\n具体的源代码实现以及各大浏览器实现的不同，大家可以参考这篇文章：[为什么 setTimeout 有最小延时 4ms ？](https://link.juejin.cn?target=https%3A%2F%2Fwww.bruceyj.com%2Ffront-end-interview-summary%2Fsystem-design%2Fwhy-is-the-design%2F2-why-setTimeout-4ms.html \"https://www.bruceyj.com/front-end-interview-summary/system-design/why-is-the-design/2-why-setTimeout-4ms.html\")\\n这里只看结论，定时器本身的定义步骤是造成其出现误差的原因之一\\n### 2、setInterval 的最小间隔时间\\n在 HTML5 标准中，setInterval 的最小间隔为 10ms，虽然我在规范文档中并未找到其相关说明，但是经过实际测试，也确实存在最小间隔时间，例如以下代码：\\n```\\nlet startTime = new Date().getTime()\\nlet count = 0\\nconst interval = setInterval(function () {\\ncount++\\n console.log(new Date().getTime() - startTime + \\'ms\\')\\nstartTime = new Date().getTime()\\nif(count === 10) {\\nclearInterval(interval)\\n}\\n}, 0)\\n```\\n测试结果：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9bcffa807d384a7ab542fd1174186b12~tplv-k3u1fbpfcp-zoom-1.image)\\n虽然没有 10ms 那么大的间隔，但是间隔仍然存在，猜测具体的间隔时间是和浏览器实现以及设备性能有关，无论如何，间隔是确实存在的\\n另外，当使用 setInterval 时间间隔到点后，仅当队列中没有该定时器的任何其他代码实例时，才会将定时器的代码添加到队列中，如果有的话，则不会添加，造成堵塞，这个也与 JS 的事件循环有关\\n 未被激活的tabs的定时最小延迟 >= 1000ms\\n为了优化后台 tab 的加载损耗（以及降低耗电量），在未被激活的 tab 中定时器的最小延时限制为1s(1000ms)，具体时间在不同的浏览器实现中也有差别\\n  JS 的事件循环机制\\n`setTimeout`和`setInterval`中的时间并不是到点就立即执行，而是到点将其回调函数加入异步事件队列中，按照队列先进先出的性质，该回调函数到点之后是否能执行还得取决于是否属于队列首位，如果前头还有其他事件在等待，则不能按点执行，如果没有，则将其放入同步队列执行。具体事件循环机制，可以参考这篇文章：[动图学习-EventLoop](https://juejin.cn/post/6969028296893792286 \"https://juejin.cn/post/6969028296893792286\")\\n## 四、解决方案\\n1、在浏览器中实现一个 0ms 延时的定时器\\n可以参考如下代码（来自于国外的一篇博客，也是 MDN 推荐的方法），主要是使用了 postMessage 方法，异步的执行了回调函数，并且速度要比 setTimeout(0) 要快的多。具体比较可以参照原文：[setTimeout with a shorter delay](https://link.juejin.cn?target=https%3A%2F%2Fdbaron.org%2Flog%2F20100309-faster-timeouts \"https://dbaron.org/log/20100309-faster-timeouts\")\\n使用 setTimeout(0) 得到的时间：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8994a7da32e549cd9d06c34d1ac0bbc8~tplv-k3u1fbpfcp-zoom-1.image)\\n将 setTimeout 改成 setZeroTimeout 后得到的时间，时间几乎都在 0～1，至于为什么不是绝对的 0，猜测可能与性能有关，总的来说，时间确实缩短了：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dced5471b7fc422d9f9eb28259b26ce2~tplv-k3u1fbpfcp-zoom-1.image)\\n购物网站的秒杀活动\\n一般情况下，从服务器拿到倒数时间后，前端的执行倒计时程序持续运行，事实上，显示时间相比实际时间会越来越慢的\\n究其原因，倒计时通常是使用定时器实现，而 JS 的单线程特性使得同步任务执行过程中出现阻塞时，任务队列中的异步任务并不能及时执行，因此浏览器并不能保证在定时器设置的时间结束后代码总是被准时执行，从而造成了倒计时的偏差\\n一般的解决方法是前端定时向服务器发送请求获取最新的时间差来校准倒计时时间，和用户一直按 F5 刷新没啥区别，比较简单粗暴，下面的方法可以一定程度上解决这个问题，纯前端控制，不依赖于后端。源地址已忘\\n 五、使用 setTimeout 替代 setInterval\\n定时器指定的时间间隔，表示的是何时将定时器的代码添加到消息队列，而不是何时执行代码。所以真正何时执行代码的时间是不能保证的，它取决于何时被主线程的事件循环获取到，并执行\\n假设有 `setInterval(function, 100)`，它的执行可能是这样的：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/30346ef998214cabb6c95141b19ad25f~tplv-k3u1fbpfcp-zoom-1.image)\\n上图可见，setInterval 每隔 100ms 往队列中添加一个事件；100ms 后，添加 T1 定时器代码至队列中，主线程中还有任务在执行，所以等待，some event 执行结束后执行 T1 定时器代码；又过了100ms，T2定时器被添加到队列中，主线程还在执行 T1 代码，所以等待；又过了 100ms，理论上又要往队列里推一个定时器代码，但由于此时 T2 还在队列中，所以 T3 不会被添加，结果就是此时被跳过；然后，T1 定时器执行结束后马上执行了 T2 代码，所以并没有达到定时器间隔的效果\\n综上所述，serInterval 有两个问题：\\n-   可能多个定时器会连续执行（会导致后续的间隔误差）\\n-   某些间隔会被跳过（这么设计也可能是为了尽量避免第一个问题）\\n因而一般会使用 setTimeout 模拟 setInterval，来规避掉上面的缺点\\n```\\nsetTimeout(function fn() {\\n// do something\\nsetTimeout(fn, delay)\\n}, delay)\\n```\\n这样的话，在前一个定时器代码执行完成前，不会向队列中插入新的定时器（不会连续执行），而且保证了定时器间隔\\n注：有些说法，可能对当队列中存在定时器实例时，是否会跳过添加实例，存在质疑；还有的说法是，在 Node 环境中会跳过，在浏览器环境中会累加；不过我这边实测，不管在 Node 还是在 web 中，当队列中存在定时器实例时，都会跳过添加的；当然也有可能是浏览器版本或内核不同，表现不同，没有细测；感兴趣的小伙伴可以使用一下代码实测下，看是会一次性输出，还是会间隔性输出\\n**这边顺便一提，涉及到做动画的场景可能会使用定时器**\\n-   由于定时器的种种误差问题，以及固定时间间隔不一定与屏幕刷新时间相同，可能会引起丢帧；而且定时器在后台仍会继续执行，也会造成资源的浪费\\n-   一般情况下，还是推荐使用 requestAnimationFrame，RAF 重绘或回流（重排）的时间间隔是紧紧跟随浏览器的刷新频率的；并且在页面未激活时，该页面的屏幕刷新任务也会被暂停，当页面被激活时，任务会从上次停留的地方继续执行，这也就意味着将耗费更少的资源，提升了性能\\n### 总结\\n-   setTimeout 和 setInterval 都存在计时误差，不会严格按照既定时间执行\\n-   一般情况下，这些误差不会造成太大影响，只对于某些特殊场景，对时间要求比较严格的情况下，需要特殊处理\\n-   对于 setInterval，个人建议能不用尽量不用，使用 setTimeout 的嵌套实现，可以规避掉一些潜在问题的发生\\n'\n      },{\n        id: 29,\n        name: '望舟',\n        day: '1',\n        category: '面试',\n        title: '让“作用域和闭包”说人话！ ',\n        intro: '让作用域和闭包说人话，面试时候有话可讲！',\n        imgsrc: require('../assets/image/ArticleImg1.webp'),\n        content:\n        '# 一、作用域是什么\\n作用域与编译原理息息相关，但是我们暂时还不用管编译原理的复杂过程，它的作用可以简单看下面这张图： \\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2dc72d14948848159ed01ab7af90a090~tplv-k3u1fbpfcp-zoom-1.image)\\n简单来说就是“我得知道这些变量在哪里，不然我怎么取到它们再进行下一步操作呀！”\\n***\\nJavaScript的编译发生代码执行前的几微妙内，并不是发生在构建之前。\\n引擎根据作用域进行变量查询，存在两种影响结果的查找方式——LHS/RHS。\\nRHS（谁是源头【获取变量的值】）：需要找到这个变量的值才可以进行下一步操作。如console.log(a)，即得到a的值后执行操作。查询操作失败报ReferenceError异常，不合理操作报TypeError异常。\\nLHS（目标是谁【对变量赋值】）：为操作找到一个容器，如var a = 2，即找到一个a，给它赋值为2。查询操作失败在非严格模式下会创建变量。*这个特性可以解释变量提升这个东西，也就是“赋值可以跑到声明前”。为了完成赋值这个动作，我可以自己声明一下嘛。现在可以暂时放一下这句话，等到提升时再想。*\\n> ~~不推荐使用with/eval~~\\n# 二、函数作用域和块作用域\\n> 函数作用域含义：属于这个函数的全部变量都可以在整个函数的范围内使用或复用。\\nfunction 开头的就是函数声明，其余则是函数表达式。 **正常函数声明被绑定在作用域中，函数表达式则绑定在函数自身中。** 这句话不理解可以先埋下一个伏笔，等下面看到闭包的时候再回头看会回味无穷。\\n```\\n// 函数声明\\nfunction foo(){\\nvar a = 2;\\nconsole.log(a);\\n}\\nfoo()\\n// 函数表达式\\n(function foo(){\\nvar a = 2;\\nconsole.log(a);\\n})()\\nvar a = 2;\\n(function IIFE(global){\\nvar a = 3;\\nconsole.log(a, global.a)// 3,2\\n})(window)\\n// 函数表达式\\nvar foo = function(){\\nconsole.log(1)\\n}\\n```\\n那么怎么搞出一个块作用域呢？块作用域的声明方式有：\\n1.  with 仅在with声明中有效\\n1.  try/catch catch内的变量仅在catch内使用\\n1.  let 劫持所在块的作用域\\n1.  const 与let类似，变量不可修改\\n块作用域的优势：1. 有利于垃圾回收（块作用域内代码执行后可以直接回收）；2. 解决 var 循环问题。\\n# 三、提升\\n> 没有赋值只有声明的变量是会报错 undefined，提升也只是提升了个声明而已；再换句话说，赋值可以跑在声明的前面。光说不干假把式~\\n第一段代码可以顺利执行，因为对于 a 的声明会提升到最顶部，因此在作用域内能够找到a。但是这第二段代码中，`var a = 2;`会被拆分为两步，第一步是声明 a ，然后就执行了输出语句，还没有进行赋值呢，因此会出现报错。 这个例子恰好说明了“赋值可以跑在声明前面”。\\n***\\n例二：\\n```\\nfoo()\\nfunction foo(){\\nconsole.log(a); //undefined\\nvar a;\\n}\\n```\\n这里也是和例一一样，a会提升声明（作用域在foo内），但是只有声明，没有赋值，所以仍然会报错。\\n***\\n同样是声明提升，***函数的优先级高于变量***。这里的例子我们可以把函数表达式当作是一个变量的声明，相当于给foo2 这个变量赋值了一个函数。那么由于函数的优先级更高，这个foo2无法覆盖之前的foo1，所以输出仍然是1。\\n# 四、闭包\\n## 1. 闭包是什么\\n首先我们得知道闭包是什么，来看看书里是怎么说的：\\n> 函数在 定义时的词法作用域以外的地方 被调用，闭包使得函数可以继续访问定义时的词法作用域。\\n这句话的形容使闭包看起来像一种_访问作用域的方法_。我们继续看下一句：\\n> 无论通过何种手段将内部函数传递到所在的词法作用域以外，它都会持有对原始定义作用域的引用，无论在何处执行这个函数都会使用闭包。\\n**因此，不应该把比较理解成一种现象或者原理，应该作为一种工具方便我们使用来解决 JavaScript 中的一些问题。这是一个重要的理解点。** 用自己的话再来说一下闭包是什么吧：\\n一个函数（A）引用着另一个函数的变量（B），即使 B 已经顺利执行结束了也不会被回收，因为 A 还引用着呢，所以 B 的各种变量也要被保存。\\n'\n      },{\n        id: 30,\n        name: 'ZEROL',\n        day: '22',\n        category: 'JavaScript',\n        title: 'setTimeout 和 setInterval，你们两位同学注意点时间~ ',\n        intro: '你们两位同学注意点时间~',\n        imgsrc: require('../assets/image/ArticleImg2.webp'),\n        content:\n        '## 一、基本定义与用法 \\n### 1、定义\\n-   `setTimeout()`方法用于在指定的时间（单位毫秒）后执行回调函数或指定的一段代码\\n-   `setInterval()`方法可按照指定的时间间隔（单位毫秒）来调用回调函数或指定的一段代码\\n### 2、参数\\n-   第一个参数 function，必填，回调函数。或者是一段字符串代码，但是这种方式不建议使用，就和使用`eval()`一样，有安全风险；而且还有作用域问题（字符串会在全局作用域内被解释执行）\\n```\\nsetTimeout(\\'console.log(123);fn()\\', 2000)\\n```\\n-   第二个参数 delay，可选，单位是 ms，对于`setTimeout`是延迟时间，对于`setInterval`是间隔时间，默认都是 0\\n-   第三个参数 param1,param2,param3...，可选，是传递给回调函数的参数，不大常用\\n ```\\nsetTimeout(function (a, b) {\\nconsole.log(a, b)\\n}, 2000, \\'我是\\', \\'定时器\\')\\n```\\n### 3、返回值\\n-   返回一个 ID（数字），可以将这个 ID 传递给`clearTimeout()`或`clearInterval()`来取消执行\\n-   PS: `setTimeout()`和`setInterval()`共用一个编号池，技术上，`clearTimeout()`和`clearInterval()`可以互换使用，但是为了避免混淆，一般不这么做\\n## 二、setTimeout 和 setInterval 的实际表现\\n### 1、使用 setInterval 实现计时\\n```\\nconst startTime = new Date().getTime()\\nlet count = 0\\nconst interval = setInterval(function () {\\ncount++\\nconsole.log(new Date().getTime() - (startTime + count * 1000) + \\'ms\\')\\nif(count === 10){\\nclearInterval(interval);\\n}\\n}, 1000)\\n```\\n`new Date().getTime() - (startTime + count * 1000)`理想情况下应该是 0ms，然而事实并不是这样，而是存在着误差：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ba8397cf6a184ed6a32b285693cff3c0~tplv-k3u1fbpfcp-zoom-1.image)\\n### 2、使用 setTimeout 实现计时\\n```\\nconst startTime = new Date().getTime(), delay = 1000\\nlet count = 0\\nlet timer = setTimeout(doFunc, delay)\\nfunction doFunc(){\\ncount++\\nconsole.log(new Date().getTime() - (startTime + count * 1000) + \\'ms\\')\\nif(count < 10){\\ntimer = setTimeout(doFunc, delay)\\n}\\n}\\n```\\nsetTimeout 也同样存在着误差，而且时间越来越大（setTimeout 需要在同步代码执行完成后才重新开始计时）：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c59850b3ac2a475eb718b5492630d88e~tplv-k3u1fbpfcp-zoom-1.image)\\n## 三、为什么会出现误差\\n### 1、setTimeout 的最短延迟时间\\n`setTimeout`遵循的规范由 whatwg 来维护，在 [HTML Standard - 8.6 Timers](https://link.juejin.cn?target=https%3A%2F%2Fhtml.spec.whatwg.org%2Fmultipage%2Ftimers-and-user-prompts.html%23dom-settimeout \"https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-settimeout\") 中写到了定义定时器的详细步骤，其中有两条：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ffbfbab446fe494fb44c54181f48aa31~tplv-k3u1fbpfcp-zoom-1.image)\\n上面的意思就是说，如果设置的 timeout 小于 0，则设置为 0，如果嵌套的层级超过了 5 层（计时器嵌套），并且 timeout 小于 4ms，则设置 timeout 为 4ms。并且，在不同浏览器中出现这种最小延迟的情况有所不同\\n具体的源代码实现以及各大浏览器实现的不同，大家可以参考这篇文章：[为什么 setTimeout 有最小延时 4ms ？](https://link.juejin.cn?target=https%3A%2F%2Fwww.bruceyj.com%2Ffront-end-interview-summary%2Fsystem-design%2Fwhy-is-the-design%2F2-why-setTimeout-4ms.html \"https://www.bruceyj.com/front-end-interview-summary/system-design/why-is-the-design/2-why-setTimeout-4ms.html\")\\n这里只看结论，定时器本身的定义步骤是造成其出现误差的原因之一\\n### 2、setInterval 的最小间隔时间\\n在 HTML5 标准中，setInterval 的最小间隔为 10ms，虽然我在规范文档中并未找到其相关说明，但是经过实际测试，也确实存在最小间隔时间，例如以下代码：\\n```\\nlet startTime = new Date().getTime()\\nlet count = 0\\nconst interval = setInterval(function () {\\ncount++\\n console.log(new Date().getTime() - startTime + \\'ms\\')\\nstartTime = new Date().getTime()\\nif(count === 10) {\\nclearInterval(interval)\\n}\\n}, 0)\\n```\\n测试结果：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9bcffa807d384a7ab542fd1174186b12~tplv-k3u1fbpfcp-zoom-1.image)\\n虽然没有 10ms 那么大的间隔，但是间隔仍然存在，猜测具体的间隔时间是和浏览器实现以及设备性能有关，无论如何，间隔是确实存在的\\n另外，当使用 setInterval 时间间隔到点后，仅当队列中没有该定时器的任何其他代码实例时，才会将定时器的代码添加到队列中，如果有的话，则不会添加，造成堵塞，这个也与 JS 的事件循环有关\\n 未被激活的tabs的定时最小延迟 >= 1000ms\\n为了优化后台 tab 的加载损耗（以及降低耗电量），在未被激活的 tab 中定时器的最小延时限制为1s(1000ms)，具体时间在不同的浏览器实现中也有差别\\n  JS 的事件循环机制\\n`setTimeout`和`setInterval`中的时间并不是到点就立即执行，而是到点将其回调函数加入异步事件队列中，按照队列先进先出的性质，该回调函数到点之后是否能执行还得取决于是否属于队列首位，如果前头还有其他事件在等待，则不能按点执行，如果没有，则将其放入同步队列执行。具体事件循环机制，可以参考这篇文章：[动图学习-EventLoop](https://juejin.cn/post/6969028296893792286 \"https://juejin.cn/post/6969028296893792286\")\\n## 四、解决方案\\n1、在浏览器中实现一个 0ms 延时的定时器\\n可以参考如下代码（来自于国外的一篇博客，也是 MDN 推荐的方法），主要是使用了 postMessage 方法，异步的执行了回调函数，并且速度要比 setTimeout(0) 要快的多。具体比较可以参照原文：[setTimeout with a shorter delay](https://link.juejin.cn?target=https%3A%2F%2Fdbaron.org%2Flog%2F20100309-faster-timeouts \"https://dbaron.org/log/20100309-faster-timeouts\")\\n使用 setTimeout(0) 得到的时间：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8994a7da32e549cd9d06c34d1ac0bbc8~tplv-k3u1fbpfcp-zoom-1.image)\\n将 setTimeout 改成 setZeroTimeout 后得到的时间，时间几乎都在 0～1，至于为什么不是绝对的 0，猜测可能与性能有关，总的来说，时间确实缩短了：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dced5471b7fc422d9f9eb28259b26ce2~tplv-k3u1fbpfcp-zoom-1.image)\\n购物网站的秒杀活动\\n一般情况下，从服务器拿到倒数时间后，前端的执行倒计时程序持续运行，事实上，显示时间相比实际时间会越来越慢的\\n究其原因，倒计时通常是使用定时器实现，而 JS 的单线程特性使得同步任务执行过程中出现阻塞时，任务队列中的异步任务并不能及时执行，因此浏览器并不能保证在定时器设置的时间结束后代码总是被准时执行，从而造成了倒计时的偏差\\n一般的解决方法是前端定时向服务器发送请求获取最新的时间差来校准倒计时时间，和用户一直按 F5 刷新没啥区别，比较简单粗暴，下面的方法可以一定程度上解决这个问题，纯前端控制，不依赖于后端。源地址已忘\\n 五、使用 setTimeout 替代 setInterval\\n定时器指定的时间间隔，表示的是何时将定时器的代码添加到消息队列，而不是何时执行代码。所以真正何时执行代码的时间是不能保证的，它取决于何时被主线程的事件循环获取到，并执行\\n假设有 `setInterval(function, 100)`，它的执行可能是这样的：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/30346ef998214cabb6c95141b19ad25f~tplv-k3u1fbpfcp-zoom-1.image)\\n上图可见，setInterval 每隔 100ms 往队列中添加一个事件；100ms 后，添加 T1 定时器代码至队列中，主线程中还有任务在执行，所以等待，some event 执行结束后执行 T1 定时器代码；又过了100ms，T2定时器被添加到队列中，主线程还在执行 T1 代码，所以等待；又过了 100ms，理论上又要往队列里推一个定时器代码，但由于此时 T2 还在队列中，所以 T3 不会被添加，结果就是此时被跳过；然后，T1 定时器执行结束后马上执行了 T2 代码，所以并没有达到定时器间隔的效果\\n综上所述，serInterval 有两个问题：\\n-   可能多个定时器会连续执行（会导致后续的间隔误差）\\n-   某些间隔会被跳过（这么设计也可能是为了尽量避免第一个问题）\\n因而一般会使用 setTimeout 模拟 setInterval，来规避掉上面的缺点\\n```\\nsetTimeout(function fn() {\\n// do something\\nsetTimeout(fn, delay)\\n}, delay)\\n```\\n这样的话，在前一个定时器代码执行完成前，不会向队列中插入新的定时器（不会连续执行），而且保证了定时器间隔\\n注：有些说法，可能对当队列中存在定时器实例时，是否会跳过添加实例，存在质疑；还有的说法是，在 Node 环境中会跳过，在浏览器环境中会累加；不过我这边实测，不管在 Node 还是在 web 中，当队列中存在定时器实例时，都会跳过添加的；当然也有可能是浏览器版本或内核不同，表现不同，没有细测；感兴趣的小伙伴可以使用一下代码实测下，看是会一次性输出，还是会间隔性输出\\n**这边顺便一提，涉及到做动画的场景可能会使用定时器**\\n-   由于定时器的种种误差问题，以及固定时间间隔不一定与屏幕刷新时间相同，可能会引起丢帧；而且定时器在后台仍会继续执行，也会造成资源的浪费\\n-   一般情况下，还是推荐使用 requestAnimationFrame，RAF 重绘或回流（重排）的时间间隔是紧紧跟随浏览器的刷新频率的；并且在页面未激活时，该页面的屏幕刷新任务也会被暂停，当页面被激活时，任务会从上次停留的地方继续执行，这也就意味着将耗费更少的资源，提升了性能\\n### 总结\\n-   setTimeout 和 setInterval 都存在计时误差，不会严格按照既定时间执行\\n-   一般情况下，这些误差不会造成太大影响，只对于某些特殊场景，对时间要求比较严格的情况下，需要特殊处理\\n-   对于 setInterval，个人建议能不用尽量不用，使用 setTimeout 的嵌套实现，可以规避掉一些潜在问题的发生\\n'\n      },{\n        id: 31,\n        name: '望舟',\n        day: '1',\n        category: '面试',\n        title: '让“作用域和闭包”说人话！ ',\n        intro: '让作用域和闭包说人话，面试时候有话可讲！',\n        imgsrc: require('../assets/image/ArticleImg1.webp'),\n        content:\n        '# 一、作用域是什么\\n作用域与编译原理息息相关，但是我们暂时还不用管编译原理的复杂过程，它的作用可以简单看下面这张图： \\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2dc72d14948848159ed01ab7af90a090~tplv-k3u1fbpfcp-zoom-1.image)\\n简单来说就是“我得知道这些变量在哪里，不然我怎么取到它们再进行下一步操作呀！”\\n***\\nJavaScript的编译发生代码执行前的几微妙内，并不是发生在构建之前。\\n引擎根据作用域进行变量查询，存在两种影响结果的查找方式——LHS/RHS。\\nRHS（谁是源头【获取变量的值】）：需要找到这个变量的值才可以进行下一步操作。如console.log(a)，即得到a的值后执行操作。查询操作失败报ReferenceError异常，不合理操作报TypeError异常。\\nLHS（目标是谁【对变量赋值】）：为操作找到一个容器，如var a = 2，即找到一个a，给它赋值为2。查询操作失败在非严格模式下会创建变量。*这个特性可以解释变量提升这个东西，也就是“赋值可以跑到声明前”。为了完成赋值这个动作，我可以自己声明一下嘛。现在可以暂时放一下这句话，等到提升时再想。*\\n> ~~不推荐使用with/eval~~\\n# 二、函数作用域和块作用域\\n> 函数作用域含义：属于这个函数的全部变量都可以在整个函数的范围内使用或复用。\\nfunction 开头的就是函数声明，其余则是函数表达式。 **正常函数声明被绑定在作用域中，函数表达式则绑定在函数自身中。** 这句话不理解可以先埋下一个伏笔，等下面看到闭包的时候再回头看会回味无穷。\\n```\\n// 函数声明\\nfunction foo(){\\nvar a = 2;\\nconsole.log(a);\\n}\\nfoo()\\n// 函数表达式\\n(function foo(){\\nvar a = 2;\\nconsole.log(a);\\n})()\\nvar a = 2;\\n(function IIFE(global){\\nvar a = 3;\\nconsole.log(a, global.a)// 3,2\\n})(window)\\n// 函数表达式\\nvar foo = function(){\\nconsole.log(1)\\n}\\n```\\n那么怎么搞出一个块作用域呢？块作用域的声明方式有：\\n1.  with 仅在with声明中有效\\n1.  try/catch catch内的变量仅在catch内使用\\n1.  let 劫持所在块的作用域\\n1.  const 与let类似，变量不可修改\\n块作用域的优势：1. 有利于垃圾回收（块作用域内代码执行后可以直接回收）；2. 解决 var 循环问题。\\n# 三、提升\\n> 没有赋值只有声明的变量是会报错 undefined，提升也只是提升了个声明而已；再换句话说，赋值可以跑在声明的前面。光说不干假把式~\\n第一段代码可以顺利执行，因为对于 a 的声明会提升到最顶部，因此在作用域内能够找到a。但是这第二段代码中，`var a = 2;`会被拆分为两步，第一步是声明 a ，然后就执行了输出语句，还没有进行赋值呢，因此会出现报错。 这个例子恰好说明了“赋值可以跑在声明前面”。\\n***\\n例二：\\n```\\nfoo()\\nfunction foo(){\\nconsole.log(a); //undefined\\nvar a;\\n}\\n```\\n这里也是和例一一样，a会提升声明（作用域在foo内），但是只有声明，没有赋值，所以仍然会报错。\\n***\\n同样是声明提升，***函数的优先级高于变量***。这里的例子我们可以把函数表达式当作是一个变量的声明，相当于给foo2 这个变量赋值了一个函数。那么由于函数的优先级更高，这个foo2无法覆盖之前的foo1，所以输出仍然是1。\\n# 四、闭包\\n## 1. 闭包是什么\\n首先我们得知道闭包是什么，来看看书里是怎么说的：\\n> 函数在 定义时的词法作用域以外的地方 被调用，闭包使得函数可以继续访问定义时的词法作用域。\\n这句话的形容使闭包看起来像一种_访问作用域的方法_。我们继续看下一句：\\n> 无论通过何种手段将内部函数传递到所在的词法作用域以外，它都会持有对原始定义作用域的引用，无论在何处执行这个函数都会使用闭包。\\n**因此，不应该把比较理解成一种现象或者原理，应该作为一种工具方便我们使用来解决 JavaScript 中的一些问题。这是一个重要的理解点。** 用自己的话再来说一下闭包是什么吧：\\n一个函数（A）引用着另一个函数的变量（B），即使 B 已经顺利执行结束了也不会被回收，因为 A 还引用着呢，所以 B 的各种变量也要被保存。\\n'\n      },{\n        id: 32,\n        name: 'ZEROL',\n        day: '22',\n        category: 'JavaScript',\n        title: 'setTimeout 和 setInterval，你们两位同学注意点时间~ ',\n        intro: '你们两位同学注意点时间~',\n        imgsrc: require('../assets/image/ArticleImg2.webp'),\n        content:\n        '## 一、基本定义与用法 \\n### 1、定义\\n-   `setTimeout()`方法用于在指定的时间（单位毫秒）后执行回调函数或指定的一段代码\\n-   `setInterval()`方法可按照指定的时间间隔（单位毫秒）来调用回调函数或指定的一段代码\\n### 2、参数\\n-   第一个参数 function，必填，回调函数。或者是一段字符串代码，但是这种方式不建议使用，就和使用`eval()`一样，有安全风险；而且还有作用域问题（字符串会在全局作用域内被解释执行）\\n```\\nsetTimeout(\\'console.log(123);fn()\\', 2000)\\n```\\n-   第二个参数 delay，可选，单位是 ms，对于`setTimeout`是延迟时间，对于`setInterval`是间隔时间，默认都是 0\\n-   第三个参数 param1,param2,param3...，可选，是传递给回调函数的参数，不大常用\\n ```\\nsetTimeout(function (a, b) {\\nconsole.log(a, b)\\n}, 2000, \\'我是\\', \\'定时器\\')\\n```\\n### 3、返回值\\n-   返回一个 ID（数字），可以将这个 ID 传递给`clearTimeout()`或`clearInterval()`来取消执行\\n-   PS: `setTimeout()`和`setInterval()`共用一个编号池，技术上，`clearTimeout()`和`clearInterval()`可以互换使用，但是为了避免混淆，一般不这么做\\n## 二、setTimeout 和 setInterval 的实际表现\\n### 1、使用 setInterval 实现计时\\n```\\nconst startTime = new Date().getTime()\\nlet count = 0\\nconst interval = setInterval(function () {\\ncount++\\nconsole.log(new Date().getTime() - (startTime + count * 1000) + \\'ms\\')\\nif(count === 10){\\nclearInterval(interval);\\n}\\n}, 1000)\\n```\\n`new Date().getTime() - (startTime + count * 1000)`理想情况下应该是 0ms，然而事实并不是这样，而是存在着误差：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ba8397cf6a184ed6a32b285693cff3c0~tplv-k3u1fbpfcp-zoom-1.image)\\n### 2、使用 setTimeout 实现计时\\n```\\nconst startTime = new Date().getTime(), delay = 1000\\nlet count = 0\\nlet timer = setTimeout(doFunc, delay)\\nfunction doFunc(){\\ncount++\\nconsole.log(new Date().getTime() - (startTime + count * 1000) + \\'ms\\')\\nif(count < 10){\\ntimer = setTimeout(doFunc, delay)\\n}\\n}\\n```\\nsetTimeout 也同样存在着误差，而且时间越来越大（setTimeout 需要在同步代码执行完成后才重新开始计时）：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c59850b3ac2a475eb718b5492630d88e~tplv-k3u1fbpfcp-zoom-1.image)\\n## 三、为什么会出现误差\\n### 1、setTimeout 的最短延迟时间\\n`setTimeout`遵循的规范由 whatwg 来维护，在 [HTML Standard - 8.6 Timers](https://link.juejin.cn?target=https%3A%2F%2Fhtml.spec.whatwg.org%2Fmultipage%2Ftimers-and-user-prompts.html%23dom-settimeout \"https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-settimeout\") 中写到了定义定时器的详细步骤，其中有两条：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ffbfbab446fe494fb44c54181f48aa31~tplv-k3u1fbpfcp-zoom-1.image)\\n上面的意思就是说，如果设置的 timeout 小于 0，则设置为 0，如果嵌套的层级超过了 5 层（计时器嵌套），并且 timeout 小于 4ms，则设置 timeout 为 4ms。并且，在不同浏览器中出现这种最小延迟的情况有所不同\\n具体的源代码实现以及各大浏览器实现的不同，大家可以参考这篇文章：[为什么 setTimeout 有最小延时 4ms ？](https://link.juejin.cn?target=https%3A%2F%2Fwww.bruceyj.com%2Ffront-end-interview-summary%2Fsystem-design%2Fwhy-is-the-design%2F2-why-setTimeout-4ms.html \"https://www.bruceyj.com/front-end-interview-summary/system-design/why-is-the-design/2-why-setTimeout-4ms.html\")\\n这里只看结论，定时器本身的定义步骤是造成其出现误差的原因之一\\n### 2、setInterval 的最小间隔时间\\n在 HTML5 标准中，setInterval 的最小间隔为 10ms，虽然我在规范文档中并未找到其相关说明，但是经过实际测试，也确实存在最小间隔时间，例如以下代码：\\n```\\nlet startTime = new Date().getTime()\\nlet count = 0\\nconst interval = setInterval(function () {\\ncount++\\n console.log(new Date().getTime() - startTime + \\'ms\\')\\nstartTime = new Date().getTime()\\nif(count === 10) {\\nclearInterval(interval)\\n}\\n}, 0)\\n```\\n测试结果：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9bcffa807d384a7ab542fd1174186b12~tplv-k3u1fbpfcp-zoom-1.image)\\n虽然没有 10ms 那么大的间隔，但是间隔仍然存在，猜测具体的间隔时间是和浏览器实现以及设备性能有关，无论如何，间隔是确实存在的\\n另外，当使用 setInterval 时间间隔到点后，仅当队列中没有该定时器的任何其他代码实例时，才会将定时器的代码添加到队列中，如果有的话，则不会添加，造成堵塞，这个也与 JS 的事件循环有关\\n 未被激活的tabs的定时最小延迟 >= 1000ms\\n为了优化后台 tab 的加载损耗（以及降低耗电量），在未被激活的 tab 中定时器的最小延时限制为1s(1000ms)，具体时间在不同的浏览器实现中也有差别\\n  JS 的事件循环机制\\n`setTimeout`和`setInterval`中的时间并不是到点就立即执行，而是到点将其回调函数加入异步事件队列中，按照队列先进先出的性质，该回调函数到点之后是否能执行还得取决于是否属于队列首位，如果前头还有其他事件在等待，则不能按点执行，如果没有，则将其放入同步队列执行。具体事件循环机制，可以参考这篇文章：[动图学习-EventLoop](https://juejin.cn/post/6969028296893792286 \"https://juejin.cn/post/6969028296893792286\")\\n## 四、解决方案\\n1、在浏览器中实现一个 0ms 延时的定时器\\n可以参考如下代码（来自于国外的一篇博客，也是 MDN 推荐的方法），主要是使用了 postMessage 方法，异步的执行了回调函数，并且速度要比 setTimeout(0) 要快的多。具体比较可以参照原文：[setTimeout with a shorter delay](https://link.juejin.cn?target=https%3A%2F%2Fdbaron.org%2Flog%2F20100309-faster-timeouts \"https://dbaron.org/log/20100309-faster-timeouts\")\\n使用 setTimeout(0) 得到的时间：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8994a7da32e549cd9d06c34d1ac0bbc8~tplv-k3u1fbpfcp-zoom-1.image)\\n将 setTimeout 改成 setZeroTimeout 后得到的时间，时间几乎都在 0～1，至于为什么不是绝对的 0，猜测可能与性能有关，总的来说，时间确实缩短了：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dced5471b7fc422d9f9eb28259b26ce2~tplv-k3u1fbpfcp-zoom-1.image)\\n购物网站的秒杀活动\\n一般情况下，从服务器拿到倒数时间后，前端的执行倒计时程序持续运行，事实上，显示时间相比实际时间会越来越慢的\\n究其原因，倒计时通常是使用定时器实现，而 JS 的单线程特性使得同步任务执行过程中出现阻塞时，任务队列中的异步任务并不能及时执行，因此浏览器并不能保证在定时器设置的时间结束后代码总是被准时执行，从而造成了倒计时的偏差\\n一般的解决方法是前端定时向服务器发送请求获取最新的时间差来校准倒计时时间，和用户一直按 F5 刷新没啥区别，比较简单粗暴，下面的方法可以一定程度上解决这个问题，纯前端控制，不依赖于后端。源地址已忘\\n 五、使用 setTimeout 替代 setInterval\\n定时器指定的时间间隔，表示的是何时将定时器的代码添加到消息队列，而不是何时执行代码。所以真正何时执行代码的时间是不能保证的，它取决于何时被主线程的事件循环获取到，并执行\\n假设有 `setInterval(function, 100)`，它的执行可能是这样的：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/30346ef998214cabb6c95141b19ad25f~tplv-k3u1fbpfcp-zoom-1.image)\\n上图可见，setInterval 每隔 100ms 往队列中添加一个事件；100ms 后，添加 T1 定时器代码至队列中，主线程中还有任务在执行，所以等待，some event 执行结束后执行 T1 定时器代码；又过了100ms，T2定时器被添加到队列中，主线程还在执行 T1 代码，所以等待；又过了 100ms，理论上又要往队列里推一个定时器代码，但由于此时 T2 还在队列中，所以 T3 不会被添加，结果就是此时被跳过；然后，T1 定时器执行结束后马上执行了 T2 代码，所以并没有达到定时器间隔的效果\\n综上所述，serInterval 有两个问题：\\n-   可能多个定时器会连续执行（会导致后续的间隔误差）\\n-   某些间隔会被跳过（这么设计也可能是为了尽量避免第一个问题）\\n因而一般会使用 setTimeout 模拟 setInterval，来规避掉上面的缺点\\n```\\nsetTimeout(function fn() {\\n// do something\\nsetTimeout(fn, delay)\\n}, delay)\\n```\\n这样的话，在前一个定时器代码执行完成前，不会向队列中插入新的定时器（不会连续执行），而且保证了定时器间隔\\n注：有些说法，可能对当队列中存在定时器实例时，是否会跳过添加实例，存在质疑；还有的说法是，在 Node 环境中会跳过，在浏览器环境中会累加；不过我这边实测，不管在 Node 还是在 web 中，当队列中存在定时器实例时，都会跳过添加的；当然也有可能是浏览器版本或内核不同，表现不同，没有细测；感兴趣的小伙伴可以使用一下代码实测下，看是会一次性输出，还是会间隔性输出\\n**这边顺便一提，涉及到做动画的场景可能会使用定时器**\\n-   由于定时器的种种误差问题，以及固定时间间隔不一定与屏幕刷新时间相同，可能会引起丢帧；而且定时器在后台仍会继续执行，也会造成资源的浪费\\n-   一般情况下，还是推荐使用 requestAnimationFrame，RAF 重绘或回流（重排）的时间间隔是紧紧跟随浏览器的刷新频率的；并且在页面未激活时，该页面的屏幕刷新任务也会被暂停，当页面被激活时，任务会从上次停留的地方继续执行，这也就意味着将耗费更少的资源，提升了性能\\n### 总结\\n-   setTimeout 和 setInterval 都存在计时误差，不会严格按照既定时间执行\\n-   一般情况下，这些误差不会造成太大影响，只对于某些特殊场景，对时间要求比较严格的情况下，需要特殊处理\\n-   对于 setInterval，个人建议能不用尽量不用，使用 setTimeout 的嵌套实现，可以规避掉一些潜在问题的发生\\n'\n      },{\n        id: 33,\n        name: 'ZEROL',\n        day: '22',\n        category: 'JavaScript',\n        title: 'setTimeout 和 setInterval，你们两位同学注意点时间~ ',\n        intro: '你们两位同学注意点时间~',\n        imgsrc: require('../assets/image/ArticleImg2.webp'),\n        content:\n        '## 一、基本定义与用法 \\n### 1、定义\\n-   `setTimeout()`方法用于在指定的时间（单位毫秒）后执行回调函数或指定的一段代码\\n-   `setInterval()`方法可按照指定的时间间隔（单位毫秒）来调用回调函数或指定的一段代码\\n### 2、参数\\n-   第一个参数 function，必填，回调函数。或者是一段字符串代码，但是这种方式不建议使用，就和使用`eval()`一样，有安全风险；而且还有作用域问题（字符串会在全局作用域内被解释执行）\\n```\\nsetTimeout(\\'console.log(123);fn()\\', 2000)\\n```\\n-   第二个参数 delay，可选，单位是 ms，对于`setTimeout`是延迟时间，对于`setInterval`是间隔时间，默认都是 0\\n-   第三个参数 param1,param2,param3...，可选，是传递给回调函数的参数，不大常用\\n ```\\nsetTimeout(function (a, b) {\\nconsole.log(a, b)\\n}, 2000, \\'我是\\', \\'定时器\\')\\n```\\n### 3、返回值\\n-   返回一个 ID（数字），可以将这个 ID 传递给`clearTimeout()`或`clearInterval()`来取消执行\\n-   PS: `setTimeout()`和`setInterval()`共用一个编号池，技术上，`clearTimeout()`和`clearInterval()`可以互换使用，但是为了避免混淆，一般不这么做\\n## 二、setTimeout 和 setInterval 的实际表现\\n### 1、使用 setInterval 实现计时\\n```\\nconst startTime = new Date().getTime()\\nlet count = 0\\nconst interval = setInterval(function () {\\ncount++\\nconsole.log(new Date().getTime() - (startTime + count * 1000) + \\'ms\\')\\nif(count === 10){\\nclearInterval(interval);\\n}\\n}, 1000)\\n```\\n`new Date().getTime() - (startTime + count * 1000)`理想情况下应该是 0ms，然而事实并不是这样，而是存在着误差：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ba8397cf6a184ed6a32b285693cff3c0~tplv-k3u1fbpfcp-zoom-1.image)\\n### 2、使用 setTimeout 实现计时\\n```\\nconst startTime = new Date().getTime(), delay = 1000\\nlet count = 0\\nlet timer = setTimeout(doFunc, delay)\\nfunction doFunc(){\\ncount++\\nconsole.log(new Date().getTime() - (startTime + count * 1000) + \\'ms\\')\\nif(count < 10){\\ntimer = setTimeout(doFunc, delay)\\n}\\n}\\n```\\nsetTimeout 也同样存在着误差，而且时间越来越大（setTimeout 需要在同步代码执行完成后才重新开始计时）：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c59850b3ac2a475eb718b5492630d88e~tplv-k3u1fbpfcp-zoom-1.image)\\n## 三、为什么会出现误差\\n### 1、setTimeout 的最短延迟时间\\n`setTimeout`遵循的规范由 whatwg 来维护，在 [HTML Standard - 8.6 Timers](https://link.juejin.cn?target=https%3A%2F%2Fhtml.spec.whatwg.org%2Fmultipage%2Ftimers-and-user-prompts.html%23dom-settimeout \"https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-settimeout\") 中写到了定义定时器的详细步骤，其中有两条：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ffbfbab446fe494fb44c54181f48aa31~tplv-k3u1fbpfcp-zoom-1.image)\\n上面的意思就是说，如果设置的 timeout 小于 0，则设置为 0，如果嵌套的层级超过了 5 层（计时器嵌套），并且 timeout 小于 4ms，则设置 timeout 为 4ms。并且，在不同浏览器中出现这种最小延迟的情况有所不同\\n具体的源代码实现以及各大浏览器实现的不同，大家可以参考这篇文章：[为什么 setTimeout 有最小延时 4ms ？](https://link.juejin.cn?target=https%3A%2F%2Fwww.bruceyj.com%2Ffront-end-interview-summary%2Fsystem-design%2Fwhy-is-the-design%2F2-why-setTimeout-4ms.html \"https://www.bruceyj.com/front-end-interview-summary/system-design/why-is-the-design/2-why-setTimeout-4ms.html\")\\n这里只看结论，定时器本身的定义步骤是造成其出现误差的原因之一\\n### 2、setInterval 的最小间隔时间\\n在 HTML5 标准中，setInterval 的最小间隔为 10ms，虽然我在规范文档中并未找到其相关说明，但是经过实际测试，也确实存在最小间隔时间，例如以下代码：\\n```\\nlet startTime = new Date().getTime()\\nlet count = 0\\nconst interval = setInterval(function () {\\ncount++\\n console.log(new Date().getTime() - startTime + \\'ms\\')\\nstartTime = new Date().getTime()\\nif(count === 10) {\\nclearInterval(interval)\\n}\\n}, 0)\\n```\\n测试结果：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9bcffa807d384a7ab542fd1174186b12~tplv-k3u1fbpfcp-zoom-1.image)\\n虽然没有 10ms 那么大的间隔，但是间隔仍然存在，猜测具体的间隔时间是和浏览器实现以及设备性能有关，无论如何，间隔是确实存在的\\n另外，当使用 setInterval 时间间隔到点后，仅当队列中没有该定时器的任何其他代码实例时，才会将定时器的代码添加到队列中，如果有的话，则不会添加，造成堵塞，这个也与 JS 的事件循环有关\\n 未被激活的tabs的定时最小延迟 >= 1000ms\\n为了优化后台 tab 的加载损耗（以及降低耗电量），在未被激活的 tab 中定时器的最小延时限制为1s(1000ms)，具体时间在不同的浏览器实现中也有差别\\n  JS 的事件循环机制\\n`setTimeout`和`setInterval`中的时间并不是到点就立即执行，而是到点将其回调函数加入异步事件队列中，按照队列先进先出的性质，该回调函数到点之后是否能执行还得取决于是否属于队列首位，如果前头还有其他事件在等待，则不能按点执行，如果没有，则将其放入同步队列执行。具体事件循环机制，可以参考这篇文章：[动图学习-EventLoop](https://juejin.cn/post/6969028296893792286 \"https://juejin.cn/post/6969028296893792286\")\\n## 四、解决方案\\n1、在浏览器中实现一个 0ms 延时的定时器\\n可以参考如下代码（来自于国外的一篇博客，也是 MDN 推荐的方法），主要是使用了 postMessage 方法，异步的执行了回调函数，并且速度要比 setTimeout(0) 要快的多。具体比较可以参照原文：[setTimeout with a shorter delay](https://link.juejin.cn?target=https%3A%2F%2Fdbaron.org%2Flog%2F20100309-faster-timeouts \"https://dbaron.org/log/20100309-faster-timeouts\")\\n使用 setTimeout(0) 得到的时间：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8994a7da32e549cd9d06c34d1ac0bbc8~tplv-k3u1fbpfcp-zoom-1.image)\\n将 setTimeout 改成 setZeroTimeout 后得到的时间，时间几乎都在 0～1，至于为什么不是绝对的 0，猜测可能与性能有关，总的来说，时间确实缩短了：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dced5471b7fc422d9f9eb28259b26ce2~tplv-k3u1fbpfcp-zoom-1.image)\\n购物网站的秒杀活动\\n一般情况下，从服务器拿到倒数时间后，前端的执行倒计时程序持续运行，事实上，显示时间相比实际时间会越来越慢的\\n究其原因，倒计时通常是使用定时器实现，而 JS 的单线程特性使得同步任务执行过程中出现阻塞时，任务队列中的异步任务并不能及时执行，因此浏览器并不能保证在定时器设置的时间结束后代码总是被准时执行，从而造成了倒计时的偏差\\n一般的解决方法是前端定时向服务器发送请求获取最新的时间差来校准倒计时时间，和用户一直按 F5 刷新没啥区别，比较简单粗暴，下面的方法可以一定程度上解决这个问题，纯前端控制，不依赖于后端。源地址已忘\\n 五、使用 setTimeout 替代 setInterval\\n定时器指定的时间间隔，表示的是何时将定时器的代码添加到消息队列，而不是何时执行代码。所以真正何时执行代码的时间是不能保证的，它取决于何时被主线程的事件循环获取到，并执行\\n假设有 `setInterval(function, 100)`，它的执行可能是这样的：\\n![png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/30346ef998214cabb6c95141b19ad25f~tplv-k3u1fbpfcp-zoom-1.image)\\n上图可见，setInterval 每隔 100ms 往队列中添加一个事件；100ms 后，添加 T1 定时器代码至队列中，主线程中还有任务在执行，所以等待，some event 执行结束后执行 T1 定时器代码；又过了100ms，T2定时器被添加到队列中，主线程还在执行 T1 代码，所以等待；又过了 100ms，理论上又要往队列里推一个定时器代码，但由于此时 T2 还在队列中，所以 T3 不会被添加，结果就是此时被跳过；然后，T1 定时器执行结束后马上执行了 T2 代码，所以并没有达到定时器间隔的效果\\n综上所述，serInterval 有两个问题：\\n-   可能多个定时器会连续执行（会导致后续的间隔误差）\\n-   某些间隔会被跳过（这么设计也可能是为了尽量避免第一个问题）\\n因而一般会使用 setTimeout 模拟 setInterval，来规避掉上面的缺点\\n```\\nsetTimeout(function fn() {\\n// do something\\nsetTimeout(fn, delay)\\n}, delay)\\n```\\n这样的话，在前一个定时器代码执行完成前，不会向队列中插入新的定时器（不会连续执行），而且保证了定时器间隔\\n注：有些说法，可能对当队列中存在定时器实例时，是否会跳过添加实例，存在质疑；还有的说法是，在 Node 环境中会跳过，在浏览器环境中会累加；不过我这边实测，不管在 Node 还是在 web 中，当队列中存在定时器实例时，都会跳过添加的；当然也有可能是浏览器版本或内核不同，表现不同，没有细测；感兴趣的小伙伴可以使用一下代码实测下，看是会一次性输出，还是会间隔性输出\\n**这边顺便一提，涉及到做动画的场景可能会使用定时器**\\n-   由于定时器的种种误差问题，以及固定时间间隔不一定与屏幕刷新时间相同，可能会引起丢帧；而且定时器在后台仍会继续执行，也会造成资源的浪费\\n-   一般情况下，还是推荐使用 requestAnimationFrame，RAF 重绘或回流（重排）的时间间隔是紧紧跟随浏览器的刷新频率的；并且在页面未激活时，该页面的屏幕刷新任务也会被暂停，当页面被激活时，任务会从上次停留的地方继续执行，这也就意味着将耗费更少的资源，提升了性能\\n### 总结\\n-   setTimeout 和 setInterval 都存在计时误差，不会严格按照既定时间执行\\n-   一般情况下，这些误差不会造成太大影响，只对于某些特殊场景，对时间要求比较严格的情况下，需要特殊处理\\n-   对于 setInterval，个人建议能不用尽量不用，使用 setTimeout 的嵌套实现，可以规避掉一些潜在问题的发生\\n'\n      },{\n        id: 34,\n        name: '望舟',\n        day: '1',\n        category: '面试',\n        title: '让“作用域和闭包”说人话！ ',\n        intro: '让作用域和闭包说人话，面试时候有话可讲！',\n        imgsrc: require('../assets/image/ArticleImg1.webp'),\n        content:\n        '# 一、作用域是什么\\n作用域与编译原理息息相关，但是我们暂时还不用管编译原理的复杂过程，它的作用可以简单看下面这张图： \\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2dc72d14948848159ed01ab7af90a090~tplv-k3u1fbpfcp-zoom-1.image)\\n简单来说就是“我得知道这些变量在哪里，不然我怎么取到它们再进行下一步操作呀！”\\n***\\nJavaScript的编译发生代码执行前的几微妙内，并不是发生在构建之前。\\n引擎根据作用域进行变量查询，存在两种影响结果的查找方式——LHS/RHS。\\nRHS（谁是源头【获取变量的值】）：需要找到这个变量的值才可以进行下一步操作。如console.log(a)，即得到a的值后执行操作。查询操作失败报ReferenceError异常，不合理操作报TypeError异常。\\nLHS（目标是谁【对变量赋值】）：为操作找到一个容器，如var a = 2，即找到一个a，给它赋值为2。查询操作失败在非严格模式下会创建变量。*这个特性可以解释变量提升这个东西，也就是“赋值可以跑到声明前”。为了完成赋值这个动作，我可以自己声明一下嘛。现在可以暂时放一下这句话，等到提升时再想。*\\n> ~~不推荐使用with/eval~~\\n# 二、函数作用域和块作用域\\n> 函数作用域含义：属于这个函数的全部变量都可以在整个函数的范围内使用或复用。\\nfunction 开头的就是函数声明，其余则是函数表达式。 **正常函数声明被绑定在作用域中，函数表达式则绑定在函数自身中。** 这句话不理解可以先埋下一个伏笔，等下面看到闭包的时候再回头看会回味无穷。\\n```\\n// 函数声明\\nfunction foo(){\\nvar a = 2;\\nconsole.log(a);\\n}\\nfoo()\\n// 函数表达式\\n(function foo(){\\nvar a = 2;\\nconsole.log(a);\\n})()\\nvar a = 2;\\n(function IIFE(global){\\nvar a = 3;\\nconsole.log(a, global.a)// 3,2\\n})(window)\\n// 函数表达式\\nvar foo = function(){\\nconsole.log(1)\\n}\\n```\\n那么怎么搞出一个块作用域呢？块作用域的声明方式有：\\n1.  with 仅在with声明中有效\\n1.  try/catch catch内的变量仅在catch内使用\\n1.  let 劫持所在块的作用域\\n1.  const 与let类似，变量不可修改\\n块作用域的优势：1. 有利于垃圾回收（块作用域内代码执行后可以直接回收）；2. 解决 var 循环问题。\\n# 三、提升\\n> 没有赋值只有声明的变量是会报错 undefined，提升也只是提升了个声明而已；再换句话说，赋值可以跑在声明的前面。光说不干假把式~\\n第一段代码可以顺利执行，因为对于 a 的声明会提升到最顶部，因此在作用域内能够找到a。但是这第二段代码中，`var a = 2;`会被拆分为两步，第一步是声明 a ，然后就执行了输出语句，还没有进行赋值呢，因此会出现报错。 这个例子恰好说明了“赋值可以跑在声明前面”。\\n***\\n例二：\\n```\\nfoo()\\nfunction foo(){\\nconsole.log(a); //undefined\\nvar a;\\n}\\n```\\n这里也是和例一一样，a会提升声明（作用域在foo内），但是只有声明，没有赋值，所以仍然会报错。\\n***\\n同样是声明提升，***函数的优先级高于变量***。这里的例子我们可以把函数表达式当作是一个变量的声明，相当于给foo2 这个变量赋值了一个函数。那么由于函数的优先级更高，这个foo2无法覆盖之前的foo1，所以输出仍然是1。\\n# 四、闭包\\n## 1. 闭包是什么\\n首先我们得知道闭包是什么，来看看书里是怎么说的：\\n> 函数在 定义时的词法作用域以外的地方 被调用，闭包使得函数可以继续访问定义时的词法作用域。\\n这句话的形容使闭包看起来像一种_访问作用域的方法_。我们继续看下一句：\\n> 无论通过何种手段将内部函数传递到所在的词法作用域以外，它都会持有对原始定义作用域的引用，无论在何处执行这个函数都会使用闭包。\\n**因此，不应该把比较理解成一种现象或者原理，应该作为一种工具方便我们使用来解决 JavaScript 中的一些问题。这是一个重要的理解点。** 用自己的话再来说一下闭包是什么吧：\\n一个函数（A）引用着另一个函数的变量（B），即使 B 已经顺利执行结束了也不会被回收，因为 A 还引用着呢，所以 B 的各种变量也要被保存。\\n'\n      },{\n        id: 35,\n        name: '望舟',\n        day: '1',\n        category: '面试',\n        title: '让“作用域和闭包”说人话！ ',\n        intro: '让作用域和闭包说人话，面试时候有话可讲！',\n        imgsrc: require('../assets/image/ArticleImg1.webp'),\n        content:\n        '# 一、作用域是什么\\n作用域与编译原理息息相关，但是我们暂时还不用管编译原理的复杂过程，它的作用可以简单看下面这张图： \\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2dc72d14948848159ed01ab7af90a090~tplv-k3u1fbpfcp-zoom-1.image)\\n简单来说就是“我得知道这些变量在哪里，不然我怎么取到它们再进行下一步操作呀！”\\n***\\nJavaScript的编译发生代码执行前的几微妙内，并不是发生在构建之前。\\n引擎根据作用域进行变量查询，存在两种影响结果的查找方式——LHS/RHS。\\nRHS（谁是源头【获取变量的值】）：需要找到这个变量的值才可以进行下一步操作。如console.log(a)，即得到a的值后执行操作。查询操作失败报ReferenceError异常，不合理操作报TypeError异常。\\nLHS（目标是谁【对变量赋值】）：为操作找到一个容器，如var a = 2，即找到一个a，给它赋值为2。查询操作失败在非严格模式下会创建变量。*这个特性可以解释变量提升这个东西，也就是“赋值可以跑到声明前”。为了完成赋值这个动作，我可以自己声明一下嘛。现在可以暂时放一下这句话，等到提升时再想。*\\n> ~~不推荐使用with/eval~~\\n# 二、函数作用域和块作用域\\n> 函数作用域含义：属于这个函数的全部变量都可以在整个函数的范围内使用或复用。\\nfunction 开头的就是函数声明，其余则是函数表达式。 **正常函数声明被绑定在作用域中，函数表达式则绑定在函数自身中。** 这句话不理解可以先埋下一个伏笔，等下面看到闭包的时候再回头看会回味无穷。\\n```\\n// 函数声明\\nfunction foo(){\\nvar a = 2;\\nconsole.log(a);\\n}\\nfoo()\\n// 函数表达式\\n(function foo(){\\nvar a = 2;\\nconsole.log(a);\\n})()\\nvar a = 2;\\n(function IIFE(global){\\nvar a = 3;\\nconsole.log(a, global.a)// 3,2\\n})(window)\\n// 函数表达式\\nvar foo = function(){\\nconsole.log(1)\\n}\\n```\\n那么怎么搞出一个块作用域呢？块作用域的声明方式有：\\n1.  with 仅在with声明中有效\\n1.  try/catch catch内的变量仅在catch内使用\\n1.  let 劫持所在块的作用域\\n1.  const 与let类似，变量不可修改\\n块作用域的优势：1. 有利于垃圾回收（块作用域内代码执行后可以直接回收）；2. 解决 var 循环问题。\\n# 三、提升\\n> 没有赋值只有声明的变量是会报错 undefined，提升也只是提升了个声明而已；再换句话说，赋值可以跑在声明的前面。光说不干假把式~\\n第一段代码可以顺利执行，因为对于 a 的声明会提升到最顶部，因此在作用域内能够找到a。但是这第二段代码中，`var a = 2;`会被拆分为两步，第一步是声明 a ，然后就执行了输出语句，还没有进行赋值呢，因此会出现报错。 这个例子恰好说明了“赋值可以跑在声明前面”。\\n***\\n例二：\\n```\\nfoo()\\nfunction foo(){\\nconsole.log(a); //undefined\\nvar a;\\n}\\n```\\n这里也是和例一一样，a会提升声明（作用域在foo内），但是只有声明，没有赋值，所以仍然会报错。\\n***\\n同样是声明提升，***函数的优先级高于变量***。这里的例子我们可以把函数表达式当作是一个变量的声明，相当于给foo2 这个变量赋值了一个函数。那么由于函数的优先级更高，这个foo2无法覆盖之前的foo1，所以输出仍然是1。\\n# 四、闭包\\n## 1. 闭包是什么\\n首先我们得知道闭包是什么，来看看书里是怎么说的：\\n> 函数在 定义时的词法作用域以外的地方 被调用，闭包使得函数可以继续访问定义时的词法作用域。\\n这句话的形容使闭包看起来像一种_访问作用域的方法_。我们继续看下一句：\\n> 无论通过何种手段将内部函数传递到所在的词法作用域以外，它都会持有对原始定义作用域的引用，无论在何处执行这个函数都会使用闭包。\\n**因此，不应该把比较理解成一种现象或者原理，应该作为一种工具方便我们使用来解决 JavaScript 中的一些问题。这是一个重要的理解点。** 用自己的话再来说一下闭包是什么吧：\\n一个函数（A）引用着另一个函数的变量（B），即使 B 已经顺利执行结束了也不会被回收，因为 A 还引用着呢，所以 B 的各种变量也要被保存。\\n'\n      },\n    ],\n  },\n  getters: {\n  },\n  mutations: {\n  },\n  actions: {\n  },\n  modules: {\n  }\n})\n","import Vue from 'vue'\r\nimport App from './App.vue'\r\nimport router from './router'\r\nimport Router from 'vue-router'\r\nimport store from './store'\r\nimport 'reset-css';\r\nVue.config.productionTip = false\r\n\r\nconst originalPush = Router.prototype.push\r\nRouter.prototype.push = function push(location) {\r\n\treturn originalPush.call(this, location).catch(err => err)\r\n}\r\n\r\nnew Vue({\r\n  router,\r\n  store,\r\n  render: h => h(App)\r\n}).$mount('#app')\r\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = 594;\nmodule.exports = webpackEmptyContext;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = function(chunkId) {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce(function(promises, key) {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks\n__webpack_require__.u = function(chunkId) {\n\t// return url for filenames based on template\n\treturn \"static/js/\" + {\"344\":\"show\",\"449\":\"course\",\"471\":\"activity\",\"730\":\"hot\",\"942\":\"article\"}[chunkId] + \".\" + {\"344\":\"44c77974\",\"449\":\"eed22d07\",\"471\":\"b0d7cbda\",\"730\":\"894e4119\",\"942\":\"74a83fd4\"}[chunkId] + \".js\";\n};","// This function allow to reference async chunks\n__webpack_require__.miniCssF = function(chunkId) {\n\t// return url for filenames based on template\n\treturn \"static/css/\" + \"article\" + \".\" + \"6ae409b2\" + \".css\";\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","var inProgress = {};\nvar dataWebpackPrefix = \"juejin:\";\n// loadScript function to load a script via script tag\n__webpack_require__.l = function(url, done, key, chunkId) {\n\tif(inProgress[url]) { inProgress[url].push(done); return; }\n\tvar script, needAttach;\n\tif(key !== undefined) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tfor(var i = 0; i < scripts.length; i++) {\n\t\t\tvar s = scripts[i];\n\t\t\tif(s.getAttribute(\"src\") == url || s.getAttribute(\"data-webpack\") == dataWebpackPrefix + key) { script = s; break; }\n\t\t}\n\t}\n\tif(!script) {\n\t\tneedAttach = true;\n\t\tscript = document.createElement('script');\n\n\t\tscript.charset = 'utf-8';\n\t\tscript.timeout = 120;\n\t\tif (__webpack_require__.nc) {\n\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n\t\t}\n\t\tscript.setAttribute(\"data-webpack\", dataWebpackPrefix + key);\n\t\tscript.src = url;\n\t}\n\tinProgress[url] = [done];\n\tvar onScriptComplete = function(prev, event) {\n\t\t// avoid mem leaks in IE.\n\t\tscript.onerror = script.onload = null;\n\t\tclearTimeout(timeout);\n\t\tvar doneFns = inProgress[url];\n\t\tdelete inProgress[url];\n\t\tscript.parentNode && script.parentNode.removeChild(script);\n\t\tdoneFns && doneFns.forEach(function(fn) { return fn(event); });\n\t\tif(prev) return prev(event);\n\t}\n\t;\n\tvar timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);\n\tscript.onerror = onScriptComplete.bind(null, script.onerror);\n\tscript.onload = onScriptComplete.bind(null, script.onload);\n\tneedAttach && document.head.appendChild(script);\n};","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"\";","var createStylesheet = function(chunkId, fullhref, resolve, reject) {\n\tvar linkTag = document.createElement(\"link\");\n\n\tlinkTag.rel = \"stylesheet\";\n\tlinkTag.type = \"text/css\";\n\tvar onLinkComplete = function(event) {\n\t\t// avoid mem leaks.\n\t\tlinkTag.onerror = linkTag.onload = null;\n\t\tif (event.type === 'load') {\n\t\t\tresolve();\n\t\t} else {\n\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n\t\t\tvar realHref = event && event.target && event.target.href || fullhref;\n\t\t\tvar err = new Error(\"Loading CSS chunk \" + chunkId + \" failed.\\n(\" + realHref + \")\");\n\t\t\terr.code = \"CSS_CHUNK_LOAD_FAILED\";\n\t\t\terr.type = errorType;\n\t\t\terr.request = realHref;\n\t\t\tlinkTag.parentNode.removeChild(linkTag)\n\t\t\treject(err);\n\t\t}\n\t}\n\tlinkTag.onerror = linkTag.onload = onLinkComplete;\n\tlinkTag.href = fullhref;\n\n\tdocument.head.appendChild(linkTag);\n\treturn linkTag;\n};\nvar findStylesheet = function(href, fullhref) {\n\tvar existingLinkTags = document.getElementsByTagName(\"link\");\n\tfor(var i = 0; i < existingLinkTags.length; i++) {\n\t\tvar tag = existingLinkTags[i];\n\t\tvar dataHref = tag.getAttribute(\"data-href\") || tag.getAttribute(\"href\");\n\t\tif(tag.rel === \"stylesheet\" && (dataHref === href || dataHref === fullhref)) return tag;\n\t}\n\tvar existingStyleTags = document.getElementsByTagName(\"style\");\n\tfor(var i = 0; i < existingStyleTags.length; i++) {\n\t\tvar tag = existingStyleTags[i];\n\t\tvar dataHref = tag.getAttribute(\"data-href\");\n\t\tif(dataHref === href || dataHref === fullhref) return tag;\n\t}\n};\nvar loadStylesheet = function(chunkId) {\n\treturn new Promise(function(resolve, reject) {\n\t\tvar href = __webpack_require__.miniCssF(chunkId);\n\t\tvar fullhref = __webpack_require__.p + href;\n\t\tif(findStylesheet(href, fullhref)) return resolve();\n\t\tcreateStylesheet(chunkId, fullhref, resolve, reject);\n\t});\n}\n// object to store loaded CSS chunks\nvar installedCssChunks = {\n\t143: 0\n};\n\n__webpack_require__.f.miniCss = function(chunkId, promises) {\n\tvar cssChunks = {\"942\":1};\n\tif(installedCssChunks[chunkId]) promises.push(installedCssChunks[chunkId]);\n\telse if(installedCssChunks[chunkId] !== 0 && cssChunks[chunkId]) {\n\t\tpromises.push(installedCssChunks[chunkId] = loadStylesheet(chunkId).then(function() {\n\t\t\tinstalledCssChunks[chunkId] = 0;\n\t\t}, function(e) {\n\t\t\tdelete installedCssChunks[chunkId];\n\t\t\tthrow e;\n\t\t}));\n\t}\n};\n\n// no hmr","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t143: 0\n};\n\n__webpack_require__.f.j = function(chunkId, promises) {\n\t\t// JSONP chunk loading for javascript\n\t\tvar installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;\n\t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n\t\t\t// a Promise means \"currently loading\".\n\t\t\tif(installedChunkData) {\n\t\t\t\tpromises.push(installedChunkData[2]);\n\t\t\t} else {\n\t\t\t\tif(true) { // all chunks have JS\n\t\t\t\t\t// setup Promise in chunk cache\n\t\t\t\t\tvar promise = new Promise(function(resolve, reject) { installedChunkData = installedChunks[chunkId] = [resolve, reject]; });\n\t\t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n\t\t\t\t\t// start chunk loading\n\t\t\t\t\tvar url = __webpack_require__.p + __webpack_require__.u(chunkId);\n\t\t\t\t\t// create error before stack unwound to get useful stacktrace later\n\t\t\t\t\tvar error = new Error();\n\t\t\t\t\tvar loadingEnded = function(event) {\n\t\t\t\t\t\tif(__webpack_require__.o(installedChunks, chunkId)) {\n\t\t\t\t\t\t\tinstalledChunkData = installedChunks[chunkId];\n\t\t\t\t\t\t\tif(installedChunkData !== 0) installedChunks[chunkId] = undefined;\n\t\t\t\t\t\t\tif(installedChunkData) {\n\t\t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n\t\t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n\t\t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n\t\t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n\t\t\t\t\t\t\t\terror.type = errorType;\n\t\t\t\t\t\t\t\terror.request = realSrc;\n\t\t\t\t\t\t\t\tinstalledChunkData[1](error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t__webpack_require__.l(url, loadingEnded, \"chunk-\" + chunkId, chunkId);\n\t\t\t\t} else installedChunks[chunkId] = 0;\n\t\t\t}\n\t\t}\n};\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkjuejin\"] = self[\"webpackChunkjuejin\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [998], function() { return __webpack_require__(277); })\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["render","_vm","this","_c","_self","attrs","staticRenderFns","staticClass","class","$route","path","on","$event","$router","push","_v","_m","require","methods","jumpFn","component","name","components","Nav","_l","ArticleData","item","key","id","_s","day","category","goToArticle","title","intro","imgsrc","obj","objKey","data","Adivertising","Header","ImgSrc","scrollFn","mounted","window","beforeDestroy","Vue","VueRouter","routes","redirect","Home","router","base","process","scrollBehavior","to","from","savedPosition","x","y","Vuex","state","database","content","getters","mutations","actions","modules","originalPush","Router","location","call","catch","err","store","h","App","$mount","webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","m","deferred","O","result","chunkIds","fn","priority","notFulfilled","Infinity","i","length","fulfilled","j","Object","every","splice","r","n","getter","__esModule","d","a","definition","o","defineProperty","enumerable","get","f","chunkId","Promise","all","reduce","promises","u","miniCssF","g","globalThis","Function","prop","prototype","hasOwnProperty","inProgress","dataWebpackPrefix","l","url","done","script","needAttach","scripts","document","getElementsByTagName","s","getAttribute","createElement","charset","timeout","nc","setAttribute","src","onScriptComplete","prev","event","onerror","onload","clearTimeout","doneFns","parentNode","removeChild","forEach","setTimeout","bind","type","target","head","appendChild","Symbol","toStringTag","value","p","createStylesheet","fullhref","reject","linkTag","rel","onLinkComplete","errorType","realHref","href","request","findStylesheet","existingLinkTags","tag","dataHref","existingStyleTags","loadStylesheet","installedCssChunks","miniCss","cssChunks","then","installedChunks","installedChunkData","promise","error","loadingEnded","realSrc","message","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","chunkLoadingGlobal","self","__webpack_exports__"],"sourceRoot":""}